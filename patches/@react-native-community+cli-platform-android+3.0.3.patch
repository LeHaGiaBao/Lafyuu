diff --git a/node_modules/@react-native-community/cli-platform-android/README.md b/node_modules/@react-native-community/cli-platform-android/README.md
deleted file mode 100644
index fa9ec78..0000000
--- a/node_modules/@react-native-community/cli-platform-android/README.md
+++ /dev/null
@@ -1,126 +0,0 @@
-# @react-native-community/cli-platform-android
-
-This package is part of the [React Native CLI](../../README.md). It contains commands for managing the Android part of React Native app.
-
-## Installation
-
-```sh
-yarn add @react-native-community/cli-platform-android
-```
-
-## Commands
-
-### `run-android`
-
-Usage:
-
-```sh
-npx react-native run-android [options]
-```
-
-Builds your app and starts it on a connected Android emulator or device.
-
-#### Options
-
-#### `--appId <string>`
-
-Specify an `applicationId` to launch after build. If not specified, `package` from AndroidManifest.xml will be used.
-
-#### `--appIdSuffix <string>`
-
-Specify an `applicationIdSuffix` to launch after build.
-
-#### `--main-activity <string>`
-
-> default: 'MainActivity'
-
-Name of the activity to start.
-
-#### `--deviceId <string>`
-
-builds your app and starts it on a specific device/simulator with the given device id (listed by running "adb devices" on the command line).
-
-#### `--no-packager`
-
-Do not launch packager while building.
-
-#### `--port <number>`
-
-> default: process.env.RCT_METRO_PORT || 8081
-
-#### `--terminal <string>`
-
-> default: process.env.REACT_TERMINAL || process.env.TERM_PROGRAM
-
-Launches the Metro Bundler in a new window using the specified terminal path.
-
-#### `--tasks <list>`
-
-> default: 'installDebug'
-
-Run custom gradle tasks. If this argument is provided, then `--mode` option is ignored.
-Example: `yarn react-native run-android --tasks clean,installDebug`.
-
-#### `--active-arch-only`
-
-> default: false
-
-Build native libraries only for the current device architecture for debug builds.
-
-#### `--list-devices`
-
-> default: false
-
-List all available Android devices and simulators and let you choose one to run the app.
-
-#### `--interactive`
-
-Manually select a task and device/simulator you want to run your app on.
-
-> [!WARNING]  
-> This flag is running `./gradlew tasks` under the hood, which might take some time for more complex apps. If that affects your project, consider using `--mode` and `--deviceId` flags instead.
-
-### `build-android`
-
-Usage:
-
-```sh
-npx react-native build-android [options]
-```
-
-Builds Android app.
-
-#### Options
-
-#### `--mode <string>`
-
-> default: debug
-
-Mode to build the app. Either 'debug' (default) or 'release'.
-
-#### `--extra-params <string>`
-
-Custom params that will be passed to gradle build command.
-Example:
-
-```sh
-npx react-native build-android --extra-params "-x lint -x test"
-```
-
-#### `--binary-path <path>`
-
-Installs passed binary instead of building a fresh one. This command is not compatible with `--tasks`.
-
-#### `--user` <number | string>
-
-Id of the User Profile you want to install the app on.
-
-### `log-android`
-
-Usage:
-
-```sh
-npx react-native log-android
-```
-
-Starts [`logkitty`](https://github.com/zamotany/logkitty) displaying pretty Android logs.
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/buildAndroid/index.d.ts b/node_modules/@react-native-community/cli-platform-android/build/commands/buildAndroid/index.d.ts
deleted file mode 100644
index 0cd510c..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/buildAndroid/index.d.ts
+++ /dev/null
@@ -1,49 +0,0 @@
-import { Config } from '@react-native-community/cli-types';
-export interface BuildFlags {
-    mode?: string;
-    activeArchOnly?: boolean;
-    tasks?: Array<string>;
-    extraParams?: Array<string>;
-    interactive?: boolean;
-}
-declare function buildAndroid(_argv: Array<string>, config: Config, args: BuildFlags): Promise<void>;
-export declare function build(gradleArgs: string[], sourceDir: string): void;
-export declare const options: ({
-    name: string;
-    description: string;
-    parse?: undefined;
-    default?: undefined;
-} | {
-    name: string;
-    description: string;
-    parse: (val: string) => string[];
-    default?: undefined;
-} | {
-    name: string;
-    description: string;
-    default: boolean;
-    parse?: undefined;
-})[];
-declare const _default: {
-    name: string;
-    description: string;
-    func: typeof buildAndroid;
-    options: ({
-        name: string;
-        description: string;
-        parse?: undefined;
-        default?: undefined;
-    } | {
-        name: string;
-        description: string;
-        parse: (val: string) => string[];
-        default?: undefined;
-    } | {
-        name: string;
-        description: string;
-        default: boolean;
-        parse?: undefined;
-    })[];
-};
-export default _default;
-//# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/buildAndroid/index.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/commands/buildAndroid/index.d.ts.map
deleted file mode 100644
index d9b2db3..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/buildAndroid/index.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../../src/commands/buildAndroid/index.ts"],"names":[],"mappings":"AAKA,OAAO,EAAC,MAAM,EAAC,MAAM,mCAAmC,CAAC;AAQzD,MAAM,WAAW,UAAU;IACzB,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,cAAc,CAAC,EAAE,OAAO,CAAC;IACzB,KAAK,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;IACtB,WAAW,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;IAC5B,WAAW,CAAC,EAAE,OAAO,CAAC;CACvB;AAED,iBAAe,YAAY,CACzB,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,EACpB,MAAM,EAAE,MAAM,EACd,IAAI,EAAE,UAAU,iBAuDjB;AAED,wBAAgB,KAAK,CAAC,UAAU,EAAE,MAAM,EAAE,EAAE,SAAS,EAAE,MAAM,QAc5D;AAED,eAAO,MAAM,OAAO;;;;;;;;iBASH,MAAM;;;;;;;IAkBtB,CAAC;;;;;;;;;;;;;;;;;;;;;;AAEF,wBAKE"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/buildAndroid/index.js b/node_modules/@react-native-community/cli-platform-android/build/commands/buildAndroid/index.js
deleted file mode 100644
index 02d420d..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/buildAndroid/index.js
+++ /dev/null
@@ -1,105 +0,0 @@
-"use strict";
-
-Object.defineProperty(exports, "__esModule", {
-  value: true
-});
-exports.build = build;
-exports.options = exports.default = void 0;
-function _cliTools() {
-  const data = require("@react-native-community/cli-tools");
-  _cliTools = function () {
-    return data;
-  };
-  return data;
-}
-function _execa() {
-  const data = _interopRequireDefault(require("execa"));
-  _execa = function () {
-    return data;
-  };
-  return data;
-}
-var _getAndroidProject = require("../../config/getAndroidProject");
-var _adb = _interopRequireDefault(require("../runAndroid/adb"));
-var _getAdbPath = _interopRequireDefault(require("../runAndroid/getAdbPath"));
-var _getTaskNames = require("../runAndroid/getTaskNames");
-var _listAndroidTasks = require("../runAndroid/listAndroidTasks");
-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
-async function buildAndroid(_argv, config, args) {
-  const androidProject = (0, _getAndroidProject.getAndroidProject)(config);
-  if (args.tasks && args.mode) {
-    _cliTools().logger.warn('Both "tasks" and "mode" parameters were passed to "build" command. Using "tasks" for building the app.');
-  }
-  let {
-    tasks
-  } = args;
-  if (args.interactive) {
-    const selectedTask = await (0, _listAndroidTasks.promptForTaskSelection)('build', androidProject.sourceDir);
-    if (selectedTask) {
-      tasks = [selectedTask];
-    }
-  }
-  let gradleArgs = (0, _getTaskNames.getTaskNames)(androidProject.appName, args.mode, tasks, 'bundle');
-  if (args.extraParams) {
-    gradleArgs.push(...args.extraParams);
-  }
-  if (args.activeArchOnly) {
-    const adbPath = (0, _getAdbPath.default)();
-    const devices = _adb.default.getDevices(adbPath);
-    const architectures = devices.map(device => {
-      return _adb.default.getCPU(adbPath, device);
-    }).filter((arch, index, array) => arch != null && array.indexOf(arch) === index);
-    if (architectures.length > 0) {
-      _cliTools().logger.info(`Detected architectures ${architectures.join(', ')}`);
-      // `reactNativeDebugArchitectures` was renamed to `reactNativeArchitectures` in 0.68.
-      // Can be removed when 0.67 no longer needs to be supported.
-      gradleArgs.push('-PreactNativeDebugArchitectures=' + architectures.join(','));
-      gradleArgs.push('-PreactNativeArchitectures=' + architectures.join(','));
-    }
-  }
-  return build(gradleArgs, androidProject.sourceDir);
-}
-function build(gradleArgs, sourceDir) {
-  process.chdir(sourceDir);
-  const cmd = process.platform.startsWith('win') ? 'gradlew.bat' : './gradlew';
-  _cliTools().logger.info('Building the app...');
-  _cliTools().logger.debug(`Running command "${cmd} ${gradleArgs.join(' ')}"`);
-  try {
-    _execa().default.sync(cmd, gradleArgs, {
-      stdio: 'inherit',
-      cwd: sourceDir
-    });
-  } catch (error) {
-    (0, _cliTools().printRunDoctorTip)();
-    throw new (_cliTools().CLIError)('Failed to build the app.', error);
-  }
-}
-const options = [{
-  name: '--mode <string>',
-  description: "Specify your app's build variant"
-}, {
-  name: '--tasks <list>',
-  description: 'Run custom Gradle tasks. By default it\'s "assembleDebug". Will override passed mode and variant arguments.',
-  parse: val => val.split(',')
-}, {
-  name: '--active-arch-only',
-  description: 'Build native libraries only for the current device architecture for debug builds.',
-  default: false
-}, {
-  name: '--extra-params <string>',
-  description: 'Custom params passed to gradle build command',
-  parse: val => val.split(' ')
-}, {
-  name: '--interactive',
-  description: 'Explicitly select build type and flavour to use before running a build'
-}];
-exports.options = options;
-var _default = {
-  name: 'build-android',
-  description: 'builds your app',
-  func: buildAndroid,
-  options
-};
-exports.default = _default;
-
-//# sourceMappingURL=index.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/buildAndroid/index.js.map b/node_modules/@react-native-community/cli-platform-android/build/commands/buildAndroid/index.js.map
deleted file mode 100644
index 377e48a..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/buildAndroid/index.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["buildAndroid","_argv","config","args","androidProject","getAndroidProject","tasks","mode","logger","warn","interactive","selectedTask","promptForTaskSelection","sourceDir","gradleArgs","getTaskNames","appName","extraParams","push","activeArchOnly","adbPath","getAdbPath","devices","adb","getDevices","architectures","map","device","getCPU","filter","arch","index","array","indexOf","length","info","join","build","process","chdir","cmd","platform","startsWith","debug","execa","sync","stdio","cwd","error","printRunDoctorTip","CLIError","options","name","description","parse","val","split","default","func"],"sources":["../../../src/commands/buildAndroid/index.ts"],"sourcesContent":["import {\n  CLIError,\n  logger,\n  printRunDoctorTip,\n} from '@react-native-community/cli-tools';\nimport {Config} from '@react-native-community/cli-types';\nimport execa from 'execa';\nimport {getAndroidProject} from '../../config/getAndroidProject';\nimport adb from '../runAndroid/adb';\nimport getAdbPath from '../runAndroid/getAdbPath';\nimport {getTaskNames} from '../runAndroid/getTaskNames';\nimport {promptForTaskSelection} from '../runAndroid/listAndroidTasks';\n\nexport interface BuildFlags {\n  mode?: string;\n  activeArchOnly?: boolean;\n  tasks?: Array<string>;\n  extraParams?: Array<string>;\n  interactive?: boolean;\n}\n\nasync function buildAndroid(\n  _argv: Array<string>,\n  config: Config,\n  args: BuildFlags,\n) {\n  const androidProject = getAndroidProject(config);\n\n  if (args.tasks && args.mode) {\n    logger.warn(\n      'Both \"tasks\" and \"mode\" parameters were passed to \"build\" command. Using \"tasks\" for building the app.',\n    );\n  }\n\n  let {tasks} = args;\n\n  if (args.interactive) {\n    const selectedTask = await promptForTaskSelection(\n      'build',\n      androidProject.sourceDir,\n    );\n    if (selectedTask) {\n      tasks = [selectedTask];\n    }\n  }\n\n  let gradleArgs = getTaskNames(\n    androidProject.appName,\n    args.mode,\n    tasks,\n    'bundle',\n  );\n\n  if (args.extraParams) {\n    gradleArgs.push(...args.extraParams);\n  }\n\n  if (args.activeArchOnly) {\n    const adbPath = getAdbPath();\n    const devices = adb.getDevices(adbPath);\n    const architectures = devices\n      .map((device) => {\n        return adb.getCPU(adbPath, device);\n      })\n      .filter(\n        (arch, index, array) => arch != null && array.indexOf(arch) === index,\n      );\n    if (architectures.length > 0) {\n      logger.info(`Detected architectures ${architectures.join(', ')}`);\n      // `reactNativeDebugArchitectures` was renamed to `reactNativeArchitectures` in 0.68.\n      // Can be removed when 0.67 no longer needs to be supported.\n      gradleArgs.push(\n        '-PreactNativeDebugArchitectures=' + architectures.join(','),\n      );\n      gradleArgs.push('-PreactNativeArchitectures=' + architectures.join(','));\n    }\n  }\n\n  return build(gradleArgs, androidProject.sourceDir);\n}\n\nexport function build(gradleArgs: string[], sourceDir: string) {\n  process.chdir(sourceDir);\n  const cmd = process.platform.startsWith('win') ? 'gradlew.bat' : './gradlew';\n  logger.info('Building the app...');\n  logger.debug(`Running command \"${cmd} ${gradleArgs.join(' ')}\"`);\n  try {\n    execa.sync(cmd, gradleArgs, {\n      stdio: 'inherit',\n      cwd: sourceDir,\n    });\n  } catch (error) {\n    printRunDoctorTip();\n    throw new CLIError('Failed to build the app.', error as Error);\n  }\n}\n\nexport const options = [\n  {\n    name: '--mode <string>',\n    description: \"Specify your app's build variant\",\n  },\n  {\n    name: '--tasks <list>',\n    description:\n      'Run custom Gradle tasks. By default it\\'s \"assembleDebug\". Will override passed mode and variant arguments.',\n    parse: (val: string) => val.split(','),\n  },\n  {\n    name: '--active-arch-only',\n    description:\n      'Build native libraries only for the current device architecture for debug builds.',\n    default: false,\n  },\n  {\n    name: '--extra-params <string>',\n    description: 'Custom params passed to gradle build command',\n    parse: (val: string) => val.split(' '),\n  },\n  {\n    name: '--interactive',\n    description:\n      'Explicitly select build type and flavour to use before running a build',\n  },\n];\n\nexport default {\n  name: 'build-android',\n  description: 'builds your app',\n  func: buildAndroid,\n  options,\n};\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/index.d.ts b/node_modules/@react-native-community/cli-platform-android/build/commands/index.d.ts
index 26a60dc..881e4eb 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/index.d.ts
+++ b/node_modules/@react-native-community/cli-platform-android/build/commands/index.d.ts
@@ -9,22 +9,12 @@ declare const _default: ({
     options: ({
         name: string;
         description: string;
-        parse?: undefined;
-        default?: undefined;
-    } | {
-        name: string;
-        description: string;
-        parse: (val: string) => string[];
         default?: undefined;
-    } | {
-        name: string;
-        description: string;
-        default: boolean;
         parse?: undefined;
     } | {
         name: string;
         default: string | number;
-        parse: NumberConstructor;
+        parse: (val: string) => number;
         description?: undefined;
     } | {
         name: string;
@@ -34,8 +24,13 @@ declare const _default: ({
     } | {
         name: string;
         description: string;
-        parse: NumberConstructor;
+        parse: (val: string) => string[];
         default?: undefined;
+    } | {
+        name: string;
+        description: string;
+        default: boolean;
+        parse?: undefined;
     })[];
 })[];
 export default _default;
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/index.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/commands/index.d.ts.map
index ca618b8..61d2db2 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/index.d.ts.map
+++ b/node_modules/@react-native-community/cli-platform-android/build/commands/index.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../src/commands/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,wBAAsD"}
\ No newline at end of file
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../src/commands/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,wBAAwC"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/index.js b/node_modules/@react-native-community/cli-platform-android/build/commands/index.js
index 5e8f49e..657714b 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/index.js
+++ b/node_modules/@react-native-community/cli-platform-android/build/commands/index.js
@@ -4,11 +4,12 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
-var _buildAndroid = _interopRequireDefault(require("./buildAndroid"));
+
 var _logAndroid = _interopRequireDefault(require("./logAndroid"));
+
 var _runAndroid = _interopRequireDefault(require("./runAndroid"));
+
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
-var _default = [_logAndroid.default, _runAndroid.default, _buildAndroid.default];
-exports.default = _default;
 
-//# sourceMappingURL=index.ts.map
\ No newline at end of file
+var _default = [_logAndroid.default, _runAndroid.default];
+exports.default = _default;
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/index.js.map b/node_modules/@react-native-community/cli-platform-android/build/commands/index.js.map
deleted file mode 100644
index 62642ce..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/index.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["logAndroid","runAndroid","buildAndroid"],"sources":["../../src/commands/index.ts"],"sourcesContent":["import buildAndroid from './buildAndroid';\nimport logAndroid from './logAndroid';\nimport runAndroid from './runAndroid';\n\nexport default [logAndroid, runAndroid, buildAndroid];\n"],"mappings":";;;;;;AAAA;AACA;AACA;AAAsC;AAAA,eAEvB,CAACA,mBAAU,EAAEC,mBAAU,EAAEC,qBAAY,CAAC;AAAA"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/logAndroid/index.js b/node_modules/@react-native-community/cli-platform-android/build/commands/logAndroid/index.js
index 8336e49..56796d4 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/logAndroid/index.js
+++ b/node_modules/@react-native-community/cli-platform-android/build/commands/logAndroid/index.js
@@ -4,29 +4,36 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
+
 function _logkitty() {
   const data = require("logkitty");
+
   _logkitty = function () {
     return data;
   };
+
   return data;
 }
+
 function _cliTools() {
   const data = require("@react-native-community/cli-tools");
+
   _cliTools = function () {
     return data;
   };
+
   return data;
 }
+
 /**
  * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
-
 async function logAndroid() {
   _cliTools().logger.info('Starting logkitty');
+
   const emitter = (0, _logkitty().logkitty)({
     platform: 'android',
     priority: _logkitty().AndroidPriority.VERBOSE,
@@ -39,11 +46,10 @@ async function logAndroid() {
     _cliTools().logger.log((0, _logkitty().formatError)(error));
   });
 }
+
 var _default = {
   name: 'log-android',
   description: 'starts logkitty',
   func: logAndroid
 };
 exports.default = _default;
\ No newline at end of file
-
-//# sourceMappingURL=index.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/logAndroid/index.js.map b/node_modules/@react-native-community/cli-platform-android/build/commands/logAndroid/index.js.map
deleted file mode 100644
index 0e5dee3..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/logAndroid/index.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["logAndroid","logger","info","emitter","logkitty","platform","priority","AndroidPriority","VERBOSE","filter","makeTagsFilter","on","entry","log","formatEntry","error","formatError","name","description","func"],"sources":["../../../src/commands/logAndroid/index.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  logkitty,\n  makeTagsFilter,\n  formatEntry,\n  formatError,\n  AndroidPriority,\n} from 'logkitty';\nimport {logger} from '@react-native-community/cli-tools';\n\nasync function logAndroid() {\n  logger.info('Starting logkitty');\n\n  const emitter = logkitty({\n    platform: 'android',\n    priority: AndroidPriority.VERBOSE,\n    filter: makeTagsFilter('ReactNative', 'ReactNativeJS'),\n  });\n\n  emitter.on('entry', (entry) => {\n    logger.log(formatEntry(entry));\n  });\n\n  emitter.on('error', (error) => {\n    logger.log(formatError(error));\n  });\n}\n\nexport default {\n  name: 'log-android',\n  description: 'starts logkitty',\n  func: logAndroid,\n};\n"],"mappings":";;;;;;AAOA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAOA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAdA;AACA;AACA;AACA;AACA;AACA;;AAWA,eAAeA,UAAU,GAAG;EAC1BC,kBAAM,CAACC,IAAI,CAAC,mBAAmB,CAAC;EAEhC,MAAMC,OAAO,GAAG,IAAAC,oBAAQ,EAAC;IACvBC,QAAQ,EAAE,SAAS;IACnBC,QAAQ,EAAEC,2BAAe,CAACC,OAAO;IACjCC,MAAM,EAAE,IAAAC,0BAAc,EAAC,aAAa,EAAE,eAAe;EACvD,CAAC,CAAC;EAEFP,OAAO,CAACQ,EAAE,CAAC,OAAO,EAAGC,KAAK,IAAK;IAC7BX,kBAAM,CAACY,GAAG,CAAC,IAAAC,uBAAW,EAACF,KAAK,CAAC,CAAC;EAChC,CAAC,CAAC;EAEFT,OAAO,CAACQ,EAAE,CAAC,OAAO,EAAGI,KAAK,IAAK;IAC7Bd,kBAAM,CAACY,GAAG,CAAC,IAAAG,uBAAW,EAACD,KAAK,CAAC,CAAC;EAChC,CAAC,CAAC;AACJ;AAAC,eAEc;EACbE,IAAI,EAAE,aAAa;EACnBC,WAAW,EAAE,iBAAiB;EAC9BC,IAAI,EAAEnB;AACR,CAAC;AAAA"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/adb.d.ts b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/adb.d.ts
index 791ff6d..013b561 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/adb.d.ts
+++ b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/adb.d.ts
@@ -13,14 +13,9 @@ declare function getDevices(adbPath: string): Array<string>;
  * Gets available CPUs of devices from ADB
  */
 declare function getAvailableCPUs(adbPath: string, device: string): Array<string>;
-/**
- * Gets the CPU architecture of a device from ADB
- */
-declare function getCPU(adbPath: string, device: string): string | null;
 declare const _default: {
     getDevices: typeof getDevices;
     getAvailableCPUs: typeof getAvailableCPUs;
-    getCPU: typeof getCPU;
 };
 export default _default;
 //# sourceMappingURL=adb.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/adb.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/adb.d.ts.map
index 7f54452..eb6cd77 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/adb.d.ts.map
+++ b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/adb.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"adb.d.ts","sourceRoot":"","sources":["../../../src/commands/runAndroid/adb.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAyBH;;GAEG;AACH,iBAAS,UAAU,CAAC,OAAO,EAAE,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAOlD;AAED;;GAEG;AACH,iBAAS,gBAAgB,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAqBxE;AAED;;GAEG;AACH,iBAAS,MAAM,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG,MAAM,GAAG,IAAI,CAgB9D;;;;;;AAED,wBAIE"}
\ No newline at end of file
+{"version":3,"file":"adb.d.ts","sourceRoot":"","sources":["../../../src/commands/runAndroid/adb.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAyBH;;GAEG;AACH,iBAAS,UAAU,CAAC,OAAO,EAAE,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAOlD;AAED;;GAEG;AACH,iBAAS,gBAAgB,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAqBxE;;;;;AAED,wBAGE"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/adb.js b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/adb.js
index c5c7b2b..a392332 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/adb.js
+++ b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/adb.js
@@ -4,13 +4,17 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
+
 function _child_process() {
   const data = require("child_process");
+
   _child_process = function () {
     return data;
   };
+
   return data;
 }
+
 /**
  * Copyright (c) Facebook, Inc. and its affiliates.
  *
@@ -26,63 +30,55 @@ function parseDevicesResult(result) {
   if (!result) {
     return [];
   }
+
   const devices = [];
   const lines = result.trim().split(/\r?\n/);
+
   for (let i = 0; i < lines.length; i++) {
     const words = lines[i].split(/[ ,\t]+/).filter(w => w !== '');
+
     if (words[1] === 'device') {
       devices.push(words[0]);
     }
   }
+
   return devices;
 }
-
 /**
  * Executes the commands needed to get a list of devices from ADB
  */
+
+
 function getDevices(adbPath) {
   try {
-    const devicesResult = (0, _child_process().execSync)(`"${adbPath}" devices`);
+    const devicesResult = (0, _child_process().execSync)(`${adbPath} devices`);
     return parseDevicesResult(devicesResult.toString());
   } catch (e) {
     return [];
   }
 }
-
 /**
  * Gets available CPUs of devices from ADB
  */
+
+
 function getAvailableCPUs(adbPath, device) {
   try {
     const baseArgs = ['-s', device, 'shell', 'getprop'];
-    let cpus = (0, _child_process().execFileSync)(adbPath, baseArgs.concat(['ro.product.cpu.abilist'])).toString();
+    let cpus = (0, _child_process().execFileSync)(adbPath, baseArgs.concat(['ro.product.cpu.abilist'])).toString(); // pre-Lollipop
 
-    // pre-Lollipop
     if (!cpus || cpus.trim().length === 0) {
       cpus = (0, _child_process().execFileSync)(adbPath, baseArgs.concat(['ro.product.cpu.abi'])).toString();
     }
+
     return (cpus || '').trim().split(',');
   } catch (e) {
     return [];
   }
 }
 
-/**
- * Gets the CPU architecture of a device from ADB
- */
-function getCPU(adbPath, device) {
-  try {
-    const cpus = (0, _child_process().execFileSync)(adbPath, ['-s', device, 'shell', 'getprop', 'ro.product.cpu.abi']).toString().trim();
-    return cpus.length > 0 ? cpus : null;
-  } catch (e) {
-    return null;
-  }
-}
 var _default = {
   getDevices,
-  getAvailableCPUs,
-  getCPU
+  getAvailableCPUs
 };
 exports.default = _default;
\ No newline at end of file
-
-//# sourceMappingURL=adb.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/adb.js.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/adb.js.map
deleted file mode 100644
index e77ae0e..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/adb.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["parseDevicesResult","result","devices","lines","trim","split","i","length","words","filter","w","push","getDevices","adbPath","devicesResult","execSync","toString","e","getAvailableCPUs","device","baseArgs","cpus","execFileSync","concat","getCPU"],"sources":["../../../src/commands/runAndroid/adb.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport {execSync, execFileSync} from 'child_process';\n\n/**\n * Parses the output of the 'adb devices' command\n */\nfunction parseDevicesResult(result: string): Array<string> {\n  if (!result) {\n    return [];\n  }\n\n  const devices = [];\n  const lines = result.trim().split(/\\r?\\n/);\n\n  for (let i = 0; i < lines.length; i++) {\n    const words = lines[i].split(/[ ,\\t]+/).filter((w) => w !== '');\n\n    if (words[1] === 'device') {\n      devices.push(words[0]);\n    }\n  }\n  return devices;\n}\n\n/**\n * Executes the commands needed to get a list of devices from ADB\n */\nfunction getDevices(adbPath: string): Array<string> {\n  try {\n    const devicesResult = execSync(`\"${adbPath}\" devices`);\n    return parseDevicesResult(devicesResult.toString());\n  } catch (e) {\n    return [];\n  }\n}\n\n/**\n * Gets available CPUs of devices from ADB\n */\nfunction getAvailableCPUs(adbPath: string, device: string): Array<string> {\n  try {\n    const baseArgs = ['-s', device, 'shell', 'getprop'];\n\n    let cpus = execFileSync(\n      adbPath,\n      baseArgs.concat(['ro.product.cpu.abilist']),\n    ).toString();\n\n    // pre-Lollipop\n    if (!cpus || cpus.trim().length === 0) {\n      cpus = execFileSync(\n        adbPath,\n        baseArgs.concat(['ro.product.cpu.abi']),\n      ).toString();\n    }\n\n    return (cpus || '').trim().split(',');\n  } catch (e) {\n    return [];\n  }\n}\n\n/**\n * Gets the CPU architecture of a device from ADB\n */\nfunction getCPU(adbPath: string, device: string): string | null {\n  try {\n    const cpus = execFileSync(adbPath, [\n      '-s',\n      device,\n      'shell',\n      'getprop',\n      'ro.product.cpu.abi',\n    ])\n      .toString()\n      .trim();\n\n    return cpus.length > 0 ? cpus : null;\n  } catch (e) {\n    return null;\n  }\n}\n\nexport default {\n  getDevices,\n  getAvailableCPUs,\n  getCPU,\n};\n"],"mappings":";;;;;;AAQA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AARA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA,SAASA,kBAAkB,CAACC,MAAc,EAAiB;EACzD,IAAI,CAACA,MAAM,EAAE;IACX,OAAO,EAAE;EACX;EAEA,MAAMC,OAAO,GAAG,EAAE;EAClB,MAAMC,KAAK,GAAGF,MAAM,CAACG,IAAI,EAAE,CAACC,KAAK,CAAC,OAAO,CAAC;EAE1C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,MAAME,KAAK,GAAGL,KAAK,CAACG,CAAC,CAAC,CAACD,KAAK,CAAC,SAAS,CAAC,CAACI,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAK,EAAE,CAAC;IAE/D,IAAIF,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MACzBN,OAAO,CAACS,IAAI,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC;IACxB;EACF;EACA,OAAON,OAAO;AAChB;;AAEA;AACA;AACA;AACA,SAASU,UAAU,CAACC,OAAe,EAAiB;EAClD,IAAI;IACF,MAAMC,aAAa,GAAG,IAAAC,yBAAQ,EAAE,IAAGF,OAAQ,WAAU,CAAC;IACtD,OAAOb,kBAAkB,CAACc,aAAa,CAACE,QAAQ,EAAE,CAAC;EACrD,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV,OAAO,EAAE;EACX;AACF;;AAEA;AACA;AACA;AACA,SAASC,gBAAgB,CAACL,OAAe,EAAEM,MAAc,EAAiB;EACxE,IAAI;IACF,MAAMC,QAAQ,GAAG,CAAC,IAAI,EAAED,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC;IAEnD,IAAIE,IAAI,GAAG,IAAAC,6BAAY,EACrBT,OAAO,EACPO,QAAQ,CAACG,MAAM,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAC5C,CAACP,QAAQ,EAAE;;IAEZ;IACA,IAAI,CAACK,IAAI,IAAIA,IAAI,CAACjB,IAAI,EAAE,CAACG,MAAM,KAAK,CAAC,EAAE;MACrCc,IAAI,GAAG,IAAAC,6BAAY,EACjBT,OAAO,EACPO,QAAQ,CAACG,MAAM,CAAC,CAAC,oBAAoB,CAAC,CAAC,CACxC,CAACP,QAAQ,EAAE;IACd;IAEA,OAAO,CAACK,IAAI,IAAI,EAAE,EAAEjB,IAAI,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC;EACvC,CAAC,CAAC,OAAOY,CAAC,EAAE;IACV,OAAO,EAAE;EACX;AACF;;AAEA;AACA;AACA;AACA,SAASO,MAAM,CAACX,OAAe,EAAEM,MAAc,EAAiB;EAC9D,IAAI;IACF,MAAME,IAAI,GAAG,IAAAC,6BAAY,EAACT,OAAO,EAAE,CACjC,IAAI,EACJM,MAAM,EACN,OAAO,EACP,SAAS,EACT,oBAAoB,CACrB,CAAC,CACCH,QAAQ,EAAE,CACVZ,IAAI,EAAE;IAET,OAAOiB,IAAI,CAACd,MAAM,GAAG,CAAC,GAAGc,IAAI,GAAG,IAAI;EACtC,CAAC,CAAC,OAAOJ,CAAC,EAAE;IACV,OAAO,IAAI;EACb;AACF;AAAC,eAEc;EACbL,UAAU;EACVM,gBAAgB;EAChBM;AACF,CAAC;AAAA"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getAdbPath.d.ts b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getAdbPath.d.ts
index 70caa2e..c6c88f8 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getAdbPath.d.ts
+++ b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getAdbPath.d.ts
@@ -1,3 +1,10 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
 declare function getAdbPath(): string;
 export default getAdbPath;
 //# sourceMappingURL=getAdbPath.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getAdbPath.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getAdbPath.d.ts.map
index c13758d..63de326 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getAdbPath.d.ts.map
+++ b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getAdbPath.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"getAdbPath.d.ts","sourceRoot":"","sources":["../../../src/commands/runAndroid/getAdbPath.ts"],"names":[],"mappings":"AASA,iBAAS,UAAU,WAIlB;AAED,eAAe,UAAU,CAAC"}
\ No newline at end of file
+{"version":3,"file":"getAdbPath.d.ts","sourceRoot":"","sources":["../../../src/commands/runAndroid/getAdbPath.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,iBAAS,UAAU,WAIlB;AAED,eAAe,UAAU,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getAdbPath.js b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getAdbPath.js
index e1d6737..5d8bc91 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getAdbPath.js
+++ b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getAdbPath.js
@@ -4,14 +4,7 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
-function _path() {
-  const data = _interopRequireDefault(require("path"));
-  _path = function () {
-    return data;
-  };
-  return data;
-}
-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
 /**
  * Copyright (c) Facebook, Inc. and its affiliates.
  *
@@ -19,11 +12,9 @@ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { de
  * LICENSE file in the root directory of this source tree.
  *
  */
-
 function getAdbPath() {
-  return process.env.ANDROID_HOME ? _path().default.join(process.env.ANDROID_HOME, 'platform-tools', 'adb') : 'adb';
+  return process.env.ANDROID_HOME ? `${process.env.ANDROID_HOME}/platform-tools/adb` : 'adb';
 }
+
 var _default = getAdbPath;
 exports.default = _default;
\ No newline at end of file
-
-//# sourceMappingURL=getAdbPath.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getAdbPath.js.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getAdbPath.js.map
deleted file mode 100644
index 24201a5..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getAdbPath.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["getAdbPath","process","env","ANDROID_HOME","path","join"],"sources":["../../../src/commands/runAndroid/getAdbPath.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport path from 'path';\n\nfunction getAdbPath() {\n  return process.env.ANDROID_HOME\n    ? path.join(process.env.ANDROID_HOME, 'platform-tools', 'adb')\n    : 'adb';\n}\n\nexport default getAdbPath;\n"],"mappings":";;;;;;AAOA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAAwB;AAPxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,UAAU,GAAG;EACpB,OAAOC,OAAO,CAACC,GAAG,CAACC,YAAY,GAC3BC,eAAI,CAACC,IAAI,CAACJ,OAAO,CAACC,GAAG,CAACC,YAAY,EAAE,gBAAgB,EAAE,KAAK,CAAC,GAC5D,KAAK;AACX;AAAC,eAEcH,UAAU;AAAA"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getTaskNames.d.ts b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getTaskNames.d.ts
deleted file mode 100644
index 7b0a1fe..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getTaskNames.d.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-import type { BuildFlags } from '../buildAndroid';
-export declare function getTaskNames(appName: string, mode: string | undefined, tasks: BuildFlags['tasks'], taskPrefix: 'assemble' | 'install' | 'bundle'): Array<string>;
-//# sourceMappingURL=getTaskNames.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getTaskNames.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getTaskNames.d.ts.map
deleted file mode 100644
index e915d9f..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getTaskNames.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"getTaskNames.d.ts","sourceRoot":"","sources":["../../../src/commands/runAndroid/getTaskNames.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAC,UAAU,EAAC,MAAM,iBAAiB,CAAC;AAEhD,wBAAgB,YAAY,CAC1B,OAAO,EAAE,MAAM,EACf,IAAI,oBAA8B,EAClC,KAAK,EAAE,UAAU,CAAC,OAAO,CAAC,EAC1B,UAAU,EAAE,UAAU,GAAG,SAAS,GAAG,QAAQ,GAC5C,KAAK,CAAC,MAAM,CAAC,CAOf"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getTaskNames.js b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getTaskNames.js
deleted file mode 100644
index aed7b61..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getTaskNames.js
+++ /dev/null
@@ -1,13 +0,0 @@
-"use strict";
-
-Object.defineProperty(exports, "__esModule", {
-  value: true
-});
-exports.getTaskNames = getTaskNames;
-var _toPascalCase = require("./toPascalCase");
-function getTaskNames(appName, mode = 'debug', tasks, taskPrefix) {
-  const appTasks = tasks && tasks.length ? tasks : [taskPrefix + (0, _toPascalCase.toPascalCase)(mode)];
-  return appName ? appTasks.map(command => `${appName}:${command}`) : appTasks;
-}
-
-//# sourceMappingURL=getTaskNames.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getTaskNames.js.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getTaskNames.js.map
deleted file mode 100644
index 5bce080..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getTaskNames.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["getTaskNames","appName","mode","tasks","taskPrefix","appTasks","length","toPascalCase","map","command"],"sources":["../../../src/commands/runAndroid/getTaskNames.ts"],"sourcesContent":["import {toPascalCase} from './toPascalCase';\nimport type {BuildFlags} from '../buildAndroid';\n\nexport function getTaskNames(\n  appName: string,\n  mode: BuildFlags['mode'] = 'debug',\n  tasks: BuildFlags['tasks'],\n  taskPrefix: 'assemble' | 'install' | 'bundle',\n): Array<string> {\n  const appTasks =\n    tasks && tasks.length ? tasks : [taskPrefix + toPascalCase(mode)];\n\n  return appName\n    ? appTasks.map((command) => `${appName}:${command}`)\n    : appTasks;\n}\n"],"mappings":";;;;;;AAAA;AAGO,SAASA,YAAY,CAC1BC,OAAe,EACfC,IAAwB,GAAG,OAAO,EAClCC,KAA0B,EAC1BC,UAA6C,EAC9B;EACf,MAAMC,QAAQ,GACZF,KAAK,IAAIA,KAAK,CAACG,MAAM,GAAGH,KAAK,GAAG,CAACC,UAAU,GAAG,IAAAG,0BAAY,EAACL,IAAI,CAAC,CAAC;EAEnE,OAAOD,OAAO,GACVI,QAAQ,CAACG,GAAG,CAAEC,OAAO,IAAM,GAAER,OAAQ,IAAGQ,OAAQ,EAAC,CAAC,GAClDJ,QAAQ;AACd"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/index.d.ts b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/index.d.ts
index ce67d81..9de111f 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/index.d.ts
+++ b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/index.d.ts
@@ -1,22 +1,18 @@
 import { Config } from '@react-native-community/cli-types';
-import adb from './adb';
-import tryRunAdbReverse from './tryRunAdbReverse';
-import getAdbPath from './getAdbPath';
-import listAndroidDevices from './listAndroidDevices';
-import { BuildFlags } from '../buildAndroid';
-export interface Flags extends BuildFlags {
+export interface Flags {
+    tasks?: Array<string>;
+    root: string;
+    variant: string;
+    appFolder: string;
     appId: string;
     appIdSuffix: string;
-    mainActivity?: string;
-    port: number;
-    terminal?: string;
-    packager?: boolean;
+    mainActivity: string;
     deviceId?: string;
-    listDevices?: boolean;
-    binaryPath?: string;
-    user?: number | string;
+    packager: boolean;
+    port: number;
+    terminal: string;
+    jetifier: boolean;
 }
-export type AndroidProject = NonNullable<Config['project']['android']>;
 /**
  * Starts the app on a connected Android emulator or device.
  */
@@ -28,22 +24,12 @@ declare const _default: {
     options: ({
         name: string;
         description: string;
-        parse?: undefined;
         default?: undefined;
-    } | {
-        name: string;
-        description: string;
-        parse: (val: string) => string[];
-        default?: undefined;
-    } | {
-        name: string;
-        description: string;
-        default: boolean;
         parse?: undefined;
     } | {
         name: string;
         default: string | number;
-        parse: NumberConstructor;
+        parse: (val: string) => number;
         description?: undefined;
     } | {
         name: string;
@@ -53,10 +39,14 @@ declare const _default: {
     } | {
         name: string;
         description: string;
-        parse: NumberConstructor;
+        parse: (val: string) => string[];
         default?: undefined;
+    } | {
+        name: string;
+        description: string;
+        default: boolean;
+        parse?: undefined;
     })[];
 };
 export default _default;
-export { adb, getAdbPath, listAndroidDevices, tryRunAdbReverse };
 //# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/index.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/index.d.ts.map
index f36fa2e..ca1ca11 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/index.d.ts.map
+++ b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/index.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../../src/commands/runAndroid/index.ts"],"names":[],"mappings":"AAQA,OAAO,EAAC,MAAM,EAAC,MAAM,mCAAmC,CAAC;AACzD,OAAO,GAAG,MAAM,OAAO,CAAC;AAExB,OAAO,gBAAgB,MAAM,oBAAoB,CAAC;AAGlD,OAAO,UAAU,MAAM,cAAc,CAAC;AAUtC,OAAO,kBAAkB,MAAM,sBAAsB,CAAC;AAItD,OAAO,EAAQ,UAAU,EAAU,MAAM,iBAAiB,CAAC;AAK3D,MAAM,WAAW,KAAM,SAAQ,UAAU;IACvC,KAAK,EAAE,MAAM,CAAC;IACd,WAAW,EAAE,MAAM,CAAC;IACpB,YAAY,CAAC,EAAE,MAAM,CAAC;IACtB,IAAI,EAAE,MAAM,CAAC;IACb,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB,QAAQ,CAAC,EAAE,OAAO,CAAC;IACnB,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB,WAAW,CAAC,EAAE,OAAO,CAAC;IACtB,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,IAAI,CAAC,EAAE,MAAM,GAAG,MAAM,CAAC;CACxB;AAED,MAAM,MAAM,cAAc,GAAG,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;AAEvE;;GAEG;AACH,iBAAe,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,iBAmD1E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6LD,wBA4DE;AAEF,OAAO,EAAC,GAAG,EAAE,UAAU,EAAE,kBAAkB,EAAE,gBAAgB,EAAC,CAAC"}
\ No newline at end of file
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../../src/commands/runAndroid/index.ts"],"names":[],"mappings":"AAWA,OAAO,EAAC,MAAM,EAAC,MAAM,mCAAmC,CAAC;AAmBzD,MAAM,WAAW,KAAK;IACpB,KAAK,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;IACtB,IAAI,EAAE,MAAM,CAAC;IACb,OAAO,EAAE,MAAM,CAAC;IAChB,SAAS,EAAE,MAAM,CAAC;IAClB,KAAK,EAAE,MAAM,CAAC;IACd,WAAW,EAAE,MAAM,CAAC;IACpB,YAAY,EAAE,MAAM,CAAC;IACrB,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB,QAAQ,EAAE,OAAO,CAAC;IAClB,IAAI,EAAE,MAAM,CAAC;IACb,QAAQ,EAAE,MAAM,CAAC;IACjB,QAAQ,EAAE,OAAO,CAAC;CACnB;AAED;;GAEG;AACH,iBAAe,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,iBAsD1E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2QD,wBAuEE"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/index.js b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/index.js
index 2114cfb..9bc5255 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/index.js
+++ b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/index.js
@@ -3,278 +3,390 @@
 Object.defineProperty(exports, "__esModule", {
   value: true
 });
-Object.defineProperty(exports, "adb", {
-  enumerable: true,
-  get: function () {
-    return _adb.default;
-  }
-});
 exports.default = void 0;
-Object.defineProperty(exports, "getAdbPath", {
-  enumerable: true,
-  get: function () {
-    return _getAdbPath.default;
-  }
-});
-Object.defineProperty(exports, "listAndroidDevices", {
-  enumerable: true,
-  get: function () {
-    return _listAndroidDevices.default;
-  }
-});
-Object.defineProperty(exports, "tryRunAdbReverse", {
-  enumerable: true,
-  get: function () {
-    return _tryRunAdbReverse.default;
-  }
-});
-function _fs() {
-  const data = _interopRequireDefault(require("fs"));
-  _fs = function () {
+
+function _path() {
+  const data = _interopRequireDefault(require("path"));
+
+  _path = function () {
     return data;
   };
+
   return data;
 }
-var _adb = _interopRequireDefault(require("./adb"));
-var _runOnAllDevices = _interopRequireDefault(require("./runOnAllDevices"));
-var _tryRunAdbReverse = _interopRequireDefault(require("./tryRunAdbReverse"));
-var _tryLaunchAppOnDevice = _interopRequireDefault(require("./tryLaunchAppOnDevice"));
-var _tryInstallAppOnDevice = _interopRequireDefault(require("./tryInstallAppOnDevice"));
-var _getAdbPath = _interopRequireDefault(require("./getAdbPath"));
-function _cliTools() {
-  const data = require("@react-native-community/cli-tools");
-  _cliTools = function () {
+
+function _execa() {
+  const data = _interopRequireDefault(require("execa"));
+
+  _execa = function () {
     return data;
   };
+
   return data;
 }
-var _getAndroidProject = require("../../config/getAndroidProject");
-var _listAndroidDevices = _interopRequireDefault(require("./listAndroidDevices"));
-var _tryLaunchEmulator = _interopRequireDefault(require("./tryLaunchEmulator"));
+
 function _chalk() {
   const data = _interopRequireDefault(require("chalk"));
+
   _chalk = function () {
     return data;
   };
+
   return data;
 }
-function _path() {
-  const data = _interopRequireDefault(require("path"));
-  _path = function () {
+
+function _fs() {
+  const data = _interopRequireDefault(require("fs"));
+
+  _fs = function () {
     return data;
   };
+
   return data;
 }
-var _buildAndroid = require("../buildAndroid");
-var _listAndroidTasks = require("./listAndroidTasks");
-var _getTaskNames = require("./getTaskNames");
-var _listAndroidUsers = require("./listAndroidUsers");
+
+var _adb = _interopRequireDefault(require("./adb"));
+
+var _runOnAllDevices = _interopRequireDefault(require("./runOnAllDevices"));
+
+var _tryRunAdbReverse = _interopRequireDefault(require("./tryRunAdbReverse"));
+
+var _tryLaunchAppOnDevice = _interopRequireDefault(require("./tryLaunchAppOnDevice"));
+
+var _getAdbPath = _interopRequireDefault(require("./getAdbPath"));
+
+function _cliTools() {
+  const data = require("@react-native-community/cli-tools");
+
+  _cliTools = function () {
+    return data;
+  };
+
+  return data;
+}
+
+var _warnAboutManuallyLinkedLibs = _interopRequireDefault(require("../../link/warnAboutManuallyLinkedLibs"));
+
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
-/**
- * Copyright (c) Facebook, Inc. and its affiliates.
- *
- * This source code is licensed under the MIT license found in the
- * LICENSE file in the root directory of this source tree.
- *
- */
+
+function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }
+
+function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
+
+// Verifies this is an Android project
+function checkAndroid(root) {
+  return _fs().default.existsSync(_path().default.join(root, 'android/gradlew'));
+}
 
 /**
  * Starts the app on a connected Android emulator or device.
  */
 async function runAndroid(_argv, config, args) {
-  _cliTools().link.setPlatform('android');
-  let {
-    packager,
-    port
-  } = args;
-  if (packager) {
-    const {
-      port: newPort,
-      startPackager
-    } = await (0, _cliTools().findDevServerPort)(port, config.root);
-    if (startPackager) {
-      // Awaiting this causes the CLI to hang indefinitely, so this must execute without await.
-      (0, _cliTools().startServerInNewWindow)(newPort, config.root, config.reactNativePath, args.terminal);
-    }
-  }
-  if (config.reactNativeVersion !== 'unknown') {
-    _cliTools().link.setVersion(config.reactNativeVersion);
+  if (!checkAndroid(args.root)) {
+    _cliTools().logger.error('Android project not found. Are you sure this is a React Native project?');
+
+    return;
   }
-  if (args.binaryPath) {
-    if (args.tasks) {
-      throw new (_cliTools().CLIError)('binary-path and tasks were specified, but they are not compatible. Specify only one');
-    }
-    args.binaryPath = _path().default.isAbsolute(args.binaryPath) ? args.binaryPath : _path().default.join(config.root, args.binaryPath);
-    if (args.binaryPath && !_fs().default.existsSync(args.binaryPath)) {
-      throw new (_cliTools().CLIError)('binary-path was specified, but the file was not found.');
+
+  (0, _warnAboutManuallyLinkedLibs.default)(config);
+
+  if (args.jetifier) {
+    _cliTools().logger.info(`Running ${_chalk().default.bold('jetifier')} to migrate libraries to AndroidX. ${_chalk().default.dim('You can disable it using "--no-jetifier" flag.')}`);
+
+    try {
+      await (0, _execa().default)(require.resolve('jetifier/bin/jetify'), {
+        stdio: 'inherit'
+      });
+    } catch (error) {
+      throw new (_cliTools().CLIError)('Failed to run jetifier.', error);
     }
   }
-  let androidProject = (0, _getAndroidProject.getAndroidProject)(config);
-  if (args.mainActivity) {
-    androidProject.mainActivity = args.mainActivity;
+
+  if (!args.packager) {
+    return buildAndRun(args);
   }
-  return buildAndRun(args, androidProject);
+
+  return (0, _cliTools().isPackagerRunning)(args.port).then(result => {
+    if (result === 'running') {
+      _cliTools().logger.info('JS server already running.');
+    } else if (result === 'unrecognized') {
+      _cliTools().logger.warn('JS server not recognized, continuing with build...');
+    } else {
+      // result == 'not_running'
+      _cliTools().logger.info('Starting JS server...');
+
+      try {
+        startServerInNewWindow(args.port, args.terminal, config.reactNativePath);
+      } catch (error) {
+        _cliTools().logger.warn(`Failed to automatically start the packager server. Please run "react-native start" manually. Error details: ${error.message}`);
+      }
+    }
+
+    return buildAndRun(args);
+  });
 }
-const defaultPort = 5552;
-async function getAvailableDevicePort(port = defaultPort) {
-  /**
-   * The default value is 5554 for the first virtual device instance running on your machine. A virtual device normally occupies a pair of adjacent ports: a console port and an adb port. The console of the first virtual device running on a particular machine uses console port 5554 and adb port 5555. Subsequent instances use port numbers increasing by two. For example, 5556/5557, 5558/5559, and so on. The range is 5554 to 5682, allowing for 64 concurrent virtual devices.
-   */
-  const adbPath = (0, _getAdbPath.default)();
-  const devices = _adb.default.getDevices(adbPath);
-  if (port > 5682) {
-    throw new (_cliTools().CLIError)('Failed to launch emulator...');
+
+function getPackageNameWithSuffix(appId, appIdSuffix, packageName) {
+  if (appId) {
+    return appId;
   }
-  if (devices.some(d => d.includes(port.toString()))) {
-    return await getAvailableDevicePort(port + 2);
+
+  if (appIdSuffix) {
+    return `${packageName}.${appIdSuffix}`;
   }
-  return port;
-}
 
-// Builds the app and runs it on a connected emulator / device.
-async function buildAndRun(args, androidProject) {
-  process.chdir(androidProject.sourceDir);
-  const cmd = process.platform.startsWith('win') ? 'gradlew.bat' : './gradlew';
+  return packageName;
+} // Builds the app and runs it on a connected emulator / device.
+
+
+function buildAndRun(args) {
+  process.chdir(_path().default.join(args.root, 'android'));
+  const cmd = process.platform.startsWith('win') ? 'gradlew.bat' : './gradlew'; // "app" is usually the default value for Android apps with only 1 app
+
+  const {
+    appFolder
+  } = args; // @ts-ignore
+
+  const packageName = _fs().default.readFileSync(`${appFolder}/src/main/AndroidManifest.xml`, 'utf8').match(/package="(.+?)"/)[1];
+
+  const packageNameWithSuffix = getPackageNameWithSuffix(args.appId, args.appIdSuffix, packageName);
   const adbPath = (0, _getAdbPath.default)();
-  let selectedTask;
-  if (args.interactive) {
-    const task = await (0, _listAndroidTasks.promptForTaskSelection)('install', androidProject.sourceDir);
-    if (task) {
-      selectedTask = task;
-    }
-  }
-  if (args.listDevices || args.interactive) {
-    if (args.deviceId) {
-      _cliTools().logger.warn('Both "deviceId" and "list-devices" parameters were passed to "run" command. We will list available devices and let you choose from one');
-    }
-    const device = await (0, _listAndroidDevices.default)();
-    if (!device) {
-      throw new (_cliTools().CLIError)(`Failed to select device, please try to run app without ${args.listDevices ? 'list-devices' : 'interactive'} command.`);
-    }
-    if (args.interactive) {
-      const users = (0, _listAndroidUsers.checkUsers)(device.deviceId, adbPath);
-      if (users && users.length > 1) {
-        const user = await (0, _listAndroidUsers.promptForUser)(users);
-        if (user) {
-          args.user = user.id;
-        }
-      }
-    }
-    if (device.connected) {
-      return runOnSpecificDevice({
-        ...args,
-        deviceId: device.deviceId
-      }, adbPath, androidProject, selectedTask);
-    }
-    const port = await getAvailableDevicePort();
-    const emulator = `emulator-${port}`;
-    _cliTools().logger.info('Launching emulator...');
-    const result = await (0, _tryLaunchEmulator.default)(adbPath, device.readableName, port);
-    if (result.success) {
-      _cliTools().logger.info('Successfully launched emulator.');
-      return runOnSpecificDevice({
-        ...args,
-        deviceId: emulator
-      }, adbPath, androidProject, selectedTask);
-    }
-    throw new (_cliTools().CLIError)(`Failed to launch emulator. Reason: ${_chalk().default.dim(result.error || '')}`);
-  }
+
   if (args.deviceId) {
-    return runOnSpecificDevice(args, adbPath, androidProject, selectedTask);
+    return runOnSpecificDevice(args, cmd, packageNameWithSuffix, packageName, adbPath);
   } else {
-    return (0, _runOnAllDevices.default)(args, cmd, adbPath, androidProject);
+    return (0, _runOnAllDevices.default)(args, cmd, packageNameWithSuffix, packageName, adbPath);
   }
 }
-function runOnSpecificDevice(args, adbPath, androidProject, selectedTask) {
+
+function runOnSpecificDevice(args, gradlew, packageNameWithSuffix, packageName, adbPath) {
   const devices = _adb.default.getDevices(adbPath);
+
   const {
     deviceId
   } = args;
 
-  // if coming from run-android command and we have selected task
-  // from interactive mode we need to create appropriate build task
-  // eg 'installRelease' -> 'assembleRelease'
-  const buildTask = selectedTask ? [selectedTask.replace('install', 'assemble')] : [];
   if (devices.length > 0 && deviceId) {
     if (devices.indexOf(deviceId) !== -1) {
-      let gradleArgs = (0, _getTaskNames.getTaskNames)(androidProject.appName, args.mode, args.tasks ?? buildTask, 'install');
-
-      // using '-x lint' in order to ignore linting errors while building the apk
-      gradleArgs.push('-x', 'lint');
-      if (args.extraParams) {
-        gradleArgs.push(...args.extraParams);
-      }
-      if (args.port) {
-        gradleArgs.push(`-PreactNativeDevServerPort=${args.port}`);
-      }
-      if (args.activeArchOnly) {
-        const architecture = _adb.default.getCPU(adbPath, deviceId);
-        if (architecture !== null) {
-          _cliTools().logger.info(`Detected architecture ${architecture}`);
-          // `reactNativeDebugArchitectures` was renamed to `reactNativeArchitectures` in 0.68.
-          // Can be removed when 0.67 no longer needs to be supported.
-          gradleArgs.push(`-PreactNativeDebugArchitectures=${architecture}`);
-          gradleArgs.push(`-PreactNativeArchitectures=${architecture}`);
-        }
-      }
-      if (!args.binaryPath) {
-        (0, _buildAndroid.build)(gradleArgs, androidProject.sourceDir);
-      }
-      installAndLaunchOnDevice(args, deviceId, adbPath, androidProject, selectedTask);
+      buildApk(gradlew);
+      installAndLaunchOnDevice(args, deviceId, packageNameWithSuffix, packageName, adbPath);
     } else {
       _cliTools().logger.error(`Could not find device with the id: "${deviceId}". Please choose one of the following:`, ...devices);
     }
   } else {
-    _cliTools().logger.error('No Android device or emulator connected.');
+    _cliTools().logger.error('No Android devices connected.');
   }
 }
-function installAndLaunchOnDevice(args, selectedDevice, adbPath, androidProject, selectedTask) {
+
+function buildApk(gradlew) {
+  try {
+    // using '-x lint' in order to ignore linting errors while building the apk
+    const gradleArgs = ['build', '-x', 'lint'];
+
+    _cliTools().logger.info('Building the app...');
+
+    _cliTools().logger.debug(`Running command "${gradlew} ${gradleArgs.join(' ')}"`);
+
+    _execa().default.sync(gradlew, gradleArgs, {
+      stdio: 'inherit'
+    });
+  } catch (error) {
+    throw new (_cliTools().CLIError)('Failed to build the app.', error);
+  }
+}
+
+function tryInstallAppOnDevice(args, adbPath, device) {
+  try {
+    // "app" is usually the default value for Android apps with only 1 app
+    const {
+      appFolder
+    } = args;
+    const variant = args.variant.toLowerCase();
+    const buildDirectory = `${appFolder}/build/outputs/apk/${variant}`;
+    const apkFile = getInstallApkName(appFolder, adbPath, variant, device, buildDirectory);
+    const pathToApk = `${buildDirectory}/${apkFile}`;
+    const adbArgs = ['-s', device, 'install', '-r', '-d', pathToApk];
+
+    _cliTools().logger.info(`Installing the app on the device "${device}"...`);
+
+    _cliTools().logger.debug(`Running command "cd android && adb -s ${device} install -r -d ${pathToApk}"`);
+
+    _execa().default.sync(adbPath, adbArgs, {
+      stdio: 'inherit'
+    });
+  } catch (error) {
+    throw new (_cliTools().CLIError)('Failed to install the app on the device.', error);
+  }
+}
+
+function getInstallApkName(appFolder, adbPath, variant, device, buildDirectory) {
+  const availableCPUs = _adb.default.getAvailableCPUs(adbPath, device); // check if there is an apk file like app-armeabi-v7a-debug.apk
+
+
+  for (const availableCPU of availableCPUs.concat('universal')) {
+    const apkName = `${appFolder}-${availableCPU}-${variant}.apk`;
+
+    if (_fs().default.existsSync(`${buildDirectory}/${apkName}`)) {
+      return apkName;
+    }
+  } // check if there is a default file like app-debug.apk
+
+
+  const apkName = `${appFolder}-${variant}.apk`;
+
+  if (_fs().default.existsSync(`${buildDirectory}/${apkName}`)) {
+    return apkName;
+  }
+
+  throw new Error('Not found the correct install APK file!');
+}
+
+function installAndLaunchOnDevice(args, selectedDevice, packageNameWithSuffix, packageName, adbPath) {
   (0, _tryRunAdbReverse.default)(args.port, selectedDevice);
-  (0, _tryInstallAppOnDevice.default)(args, adbPath, selectedDevice, androidProject, selectedTask);
-  (0, _tryLaunchAppOnDevice.default)(selectedDevice, androidProject, adbPath, args);
+  tryInstallAppOnDevice(args, adbPath, selectedDevice);
+  (0, _tryLaunchAppOnDevice.default)(selectedDevice, packageNameWithSuffix, packageName, adbPath, args.mainActivity);
+} // @ts-ignore
+
+
+function startServerInNewWindow(port, terminal, reactNativePath) {
+  /**
+   * Set up OS-specific filenames and commands
+   */
+  const isWindows = /^win/.test(process.platform);
+  const scriptFile = isWindows ? 'launchPackager.bat' : 'launchPackager.command';
+  const packagerEnvFilename = isWindows ? '.packager.bat' : '.packager.env';
+  const portExportContent = isWindows ? `set RCT_METRO_PORT=${port}` : `export RCT_METRO_PORT=${port}`;
+  /**
+   * Quick & temporary fix for packager crashing on Windows due to using removed --projectRoot flag
+   * in script. So we just replace the contents of the script with the fixed version. This should be
+   * removed when PR #25517 on RN Repo gets approved and a new RN version is released.
+   */
+
+  const launchPackagerScriptContent = `:: Copyright (c) Facebook, Inc. and its affiliates.
+  ::
+  :: This source code is licensed under the MIT license found in the
+  :: LICENSE file in the root directory of this source tree.
+
+  @echo off
+  title Metro Bundler
+  call .packager.bat
+  cd ../../../
+  node "%~dp0..\\cli.js" start
+  pause
+  exit`;
+  /**
+   * Set up the `.packager.(env|bat)` file to ensure the packager starts on the right port.
+   */
+
+  const launchPackagerScript = _path().default.join(reactNativePath, `scripts/${scriptFile}`);
+  /**
+   * Set up the `launchpackager.(command|bat)` file.
+   * It lives next to `.packager.(bat|env)`
+   */
+
+
+  const scriptsDir = _path().default.dirname(launchPackagerScript);
+
+  const packagerEnvFile = _path().default.join(scriptsDir, packagerEnvFilename);
+
+  const procConfig = {
+    cwd: scriptsDir
+  };
+  /**
+   * Ensure we overwrite file by passing the `w` flag
+   */
+
+  _fs().default.writeFileSync(packagerEnvFile, portExportContent, {
+    encoding: 'utf8',
+    flag: 'w'
+  });
+
+  if (process.platform === 'darwin') {
+    try {
+      return _execa().default.sync('open', ['-a', terminal, launchPackagerScript], procConfig);
+    } catch (error) {
+      return _execa().default.sync('open', [launchPackagerScript], procConfig);
+    }
+  }
+
+  if (process.platform === 'linux') {
+    try {
+      return _execa().default.sync(terminal, ['-e', `sh ${launchPackagerScript}`], _objectSpread({}, procConfig, {
+        detached: true
+      }));
+    } catch (error) {
+      // By default, the child shell process will be attached to the parent
+      return _execa().default.sync('sh', [launchPackagerScript], procConfig);
+    }
+  }
+
+  if (/^win/.test(process.platform)) {
+    //Temporary fix for #484. See comment on line 254
+    _fs().default.writeFileSync(launchPackagerScript, launchPackagerScriptContent, {
+      encoding: 'utf8',
+      flag: 'w'
+    }); // Awaiting this causes the CLI to hang indefinitely, so this must execute without await.
+
+
+    return (0, _execa().default)('cmd.exe', ['/C', launchPackagerScript], _objectSpread({}, procConfig, {
+      detached: true,
+      stdio: 'ignore'
+    }));
+  }
+
+  _cliTools().logger.error(`Cannot start the packager. Unknown platform ${process.platform}`);
 }
+
 var _default = {
   name: 'run-android',
   description: 'builds your app and starts it on a connected Android emulator or device',
   func: runAndroid,
-  options: [..._buildAndroid.options, {
-    name: '--no-packager',
-    description: 'Do not launch packager while running the app'
+  options: [{
+    name: '--root [string]',
+    description: 'Override the root directory for the android build (which contains the android directory)',
+    default: ''
   }, {
-    name: '--port <number>',
-    default: process.env.RCT_METRO_PORT || 8081,
-    parse: Number
+    name: '--variant [string]',
+    description: "Specify your app's build variant",
+    default: 'debug'
   }, {
-    name: '--terminal <string>',
-    description: 'Launches the Metro Bundler in a new window using the specified terminal path.',
-    default: (0, _cliTools().getDefaultUserTerminal)()
+    name: '--appFolder [string]',
+    description: 'Specify a different application folder name for the android source. If not, we assume is "app"',
+    default: 'app'
   }, {
-    name: '--appId <string>',
-    description: 'Specify an applicationId to launch after build. If not specified, `package` from AndroidManifest.xml will be used.',
+    name: '--appId [string]',
+    description: 'Specify an applicationId to launch after build.',
     default: ''
   }, {
-    name: '--appIdSuffix <string>',
+    name: '--appIdSuffix [string]',
     description: 'Specify an applicationIdSuffix to launch after build.',
     default: ''
   }, {
-    name: '--main-activity <string>',
-    description: 'Name of the activity to start'
+    name: '--main-activity [string]',
+    description: 'Name of the activity to start',
+    default: 'MainActivity'
   }, {
-    name: '--deviceId <string>',
+    name: '--deviceId [string]',
     description: 'builds your app and starts it on a specific device/simulator with the ' + 'given device id (listed by running "adb devices" on the command line).'
   }, {
-    name: '--list-devices',
-    description: 'Lists all available Android devices and simulators and let you choose one to run the app',
-    default: false
+    name: '--no-packager',
+    description: 'Do not launch packager while building'
   }, {
-    name: '--binary-path <string>',
-    description: 'Path relative to project root where pre-built .apk binary lives.'
+    name: '--port [number]',
+    default: process.env.RCT_METRO_PORT || 8081,
+    parse: val => Number(val)
   }, {
-    name: '--user <number>',
-    description: 'Id of the User Profile you want to install the app on.',
-    parse: Number
+    name: '--terminal [string]',
+    description: 'Launches the Metro Bundler in a new window using the specified terminal path.',
+    default: (0, _cliTools().getDefaultUserTerminal)()
+  }, {
+    name: '--tasks [list]',
+    description: 'Run custom Gradle tasks. By default it\'s "installDebug"',
+    parse: val => val.split(',')
+  }, {
+    name: '--no-jetifier',
+    description: 'Do not run "jetifier" – the AndroidX transition tool. By default it runs before Gradle to ease working with libraries that don\'t support AndroidX yet. See more at: https://www.npmjs.com/package/jetifier.',
+    default: false
   }]
 };
 exports.default = _default;
\ No newline at end of file
-
-//# sourceMappingURL=index.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/index.js.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/index.js.map
deleted file mode 100644
index 3484486..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/index.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["runAndroid","_argv","config","args","link","setPlatform","packager","port","newPort","startPackager","findDevServerPort","root","startServerInNewWindow","reactNativePath","terminal","reactNativeVersion","setVersion","binaryPath","tasks","CLIError","path","isAbsolute","join","fs","existsSync","androidProject","getAndroidProject","mainActivity","buildAndRun","defaultPort","getAvailableDevicePort","adbPath","getAdbPath","devices","adb","getDevices","some","d","includes","toString","process","chdir","sourceDir","cmd","platform","startsWith","selectedTask","interactive","task","promptForTaskSelection","listDevices","deviceId","logger","warn","device","listAndroidDevices","users","checkUsers","length","user","promptForUser","id","connected","runOnSpecificDevice","emulator","info","result","tryLaunchEmulator","readableName","success","chalk","dim","error","runOnAllDevices","buildTask","replace","indexOf","gradleArgs","getTaskNames","appName","mode","push","extraParams","activeArchOnly","architecture","getCPU","build","installAndLaunchOnDevice","selectedDevice","tryRunAdbReverse","tryInstallAppOnDevice","tryLaunchAppOnDevice","name","description","func","options","default","env","RCT_METRO_PORT","parse","Number","getDefaultUserTerminal"],"sources":["../../../src/commands/runAndroid/index.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport fs from 'fs';\nimport {Config} from '@react-native-community/cli-types';\nimport adb from './adb';\nimport runOnAllDevices from './runOnAllDevices';\nimport tryRunAdbReverse from './tryRunAdbReverse';\nimport tryLaunchAppOnDevice from './tryLaunchAppOnDevice';\nimport tryInstallAppOnDevice from './tryInstallAppOnDevice';\nimport getAdbPath from './getAdbPath';\nimport {\n  logger,\n  CLIError,\n  link,\n  getDefaultUserTerminal,\n  startServerInNewWindow,\n  findDevServerPort,\n} from '@react-native-community/cli-tools';\nimport {getAndroidProject} from '../../config/getAndroidProject';\nimport listAndroidDevices from './listAndroidDevices';\nimport tryLaunchEmulator from './tryLaunchEmulator';\nimport chalk from 'chalk';\nimport path from 'path';\nimport {build, BuildFlags, options} from '../buildAndroid';\nimport {promptForTaskSelection} from './listAndroidTasks';\nimport {getTaskNames} from './getTaskNames';\nimport {checkUsers, promptForUser} from './listAndroidUsers';\n\nexport interface Flags extends BuildFlags {\n  appId: string;\n  appIdSuffix: string;\n  mainActivity?: string;\n  port: number;\n  terminal?: string;\n  packager?: boolean;\n  deviceId?: string;\n  listDevices?: boolean;\n  binaryPath?: string;\n  user?: number | string;\n}\n\nexport type AndroidProject = NonNullable<Config['project']['android']>;\n\n/**\n * Starts the app on a connected Android emulator or device.\n */\nasync function runAndroid(_argv: Array<string>, config: Config, args: Flags) {\n  link.setPlatform('android');\n\n  let {packager, port} = args;\n\n  if (packager) {\n    const {port: newPort, startPackager} = await findDevServerPort(\n      port,\n      config.root,\n    );\n\n    if (startPackager) {\n      // Awaiting this causes the CLI to hang indefinitely, so this must execute without await.\n      startServerInNewWindow(\n        newPort,\n        config.root,\n        config.reactNativePath,\n        args.terminal,\n      );\n    }\n  }\n\n  if (config.reactNativeVersion !== 'unknown') {\n    link.setVersion(config.reactNativeVersion);\n  }\n\n  if (args.binaryPath) {\n    if (args.tasks) {\n      throw new CLIError(\n        'binary-path and tasks were specified, but they are not compatible. Specify only one',\n      );\n    }\n\n    args.binaryPath = path.isAbsolute(args.binaryPath)\n      ? args.binaryPath\n      : path.join(config.root, args.binaryPath);\n\n    if (args.binaryPath && !fs.existsSync(args.binaryPath)) {\n      throw new CLIError(\n        'binary-path was specified, but the file was not found.',\n      );\n    }\n  }\n\n  let androidProject = getAndroidProject(config);\n\n  if (args.mainActivity) {\n    androidProject.mainActivity = args.mainActivity;\n  }\n\n  return buildAndRun(args, androidProject);\n}\n\nconst defaultPort = 5552;\nasync function getAvailableDevicePort(\n  port: number = defaultPort,\n): Promise<number> {\n  /**\n   * The default value is 5554 for the first virtual device instance running on your machine. A virtual device normally occupies a pair of adjacent ports: a console port and an adb port. The console of the first virtual device running on a particular machine uses console port 5554 and adb port 5555. Subsequent instances use port numbers increasing by two. For example, 5556/5557, 5558/5559, and so on. The range is 5554 to 5682, allowing for 64 concurrent virtual devices.\n   */\n  const adbPath = getAdbPath();\n  const devices = adb.getDevices(adbPath);\n  if (port > 5682) {\n    throw new CLIError('Failed to launch emulator...');\n  }\n  if (devices.some((d) => d.includes(port.toString()))) {\n    return await getAvailableDevicePort(port + 2);\n  }\n  return port;\n}\n\n// Builds the app and runs it on a connected emulator / device.\nasync function buildAndRun(args: Flags, androidProject: AndroidProject) {\n  process.chdir(androidProject.sourceDir);\n  const cmd = process.platform.startsWith('win') ? 'gradlew.bat' : './gradlew';\n\n  const adbPath = getAdbPath();\n\n  let selectedTask;\n\n  if (args.interactive) {\n    const task = await promptForTaskSelection(\n      'install',\n      androidProject.sourceDir,\n    );\n    if (task) {\n      selectedTask = task;\n    }\n  }\n\n  if (args.listDevices || args.interactive) {\n    if (args.deviceId) {\n      logger.warn(\n        'Both \"deviceId\" and \"list-devices\" parameters were passed to \"run\" command. We will list available devices and let you choose from one',\n      );\n    }\n\n    const device = await listAndroidDevices();\n    if (!device) {\n      throw new CLIError(\n        `Failed to select device, please try to run app without ${\n          args.listDevices ? 'list-devices' : 'interactive'\n        } command.`,\n      );\n    }\n\n    if (args.interactive) {\n      const users = checkUsers(device.deviceId as string, adbPath);\n      if (users && users.length > 1) {\n        const user = await promptForUser(users);\n\n        if (user) {\n          args.user = user.id;\n        }\n      }\n    }\n\n    if (device.connected) {\n      return runOnSpecificDevice(\n        {...args, deviceId: device.deviceId},\n        adbPath,\n        androidProject,\n        selectedTask,\n      );\n    }\n\n    const port = await getAvailableDevicePort();\n    const emulator = `emulator-${port}`;\n    logger.info('Launching emulator...');\n    const result = await tryLaunchEmulator(adbPath, device.readableName, port);\n    if (result.success) {\n      logger.info('Successfully launched emulator.');\n      return runOnSpecificDevice(\n        {...args, deviceId: emulator},\n        adbPath,\n        androidProject,\n        selectedTask,\n      );\n    }\n    throw new CLIError(\n      `Failed to launch emulator. Reason: ${chalk.dim(result.error || '')}`,\n    );\n  }\n\n  if (args.deviceId) {\n    return runOnSpecificDevice(args, adbPath, androidProject, selectedTask);\n  } else {\n    return runOnAllDevices(args, cmd, adbPath, androidProject);\n  }\n}\n\nfunction runOnSpecificDevice(\n  args: Flags,\n  adbPath: string,\n  androidProject: AndroidProject,\n  selectedTask?: string,\n) {\n  const devices = adb.getDevices(adbPath);\n  const {deviceId} = args;\n\n  // if coming from run-android command and we have selected task\n  // from interactive mode we need to create appropriate build task\n  // eg 'installRelease' -> 'assembleRelease'\n  const buildTask = selectedTask\n    ? [selectedTask.replace('install', 'assemble')]\n    : [];\n\n  if (devices.length > 0 && deviceId) {\n    if (devices.indexOf(deviceId) !== -1) {\n      let gradleArgs = getTaskNames(\n        androidProject.appName,\n        args.mode,\n        args.tasks ?? buildTask,\n        'install',\n      );\n\n      // using '-x lint' in order to ignore linting errors while building the apk\n      gradleArgs.push('-x', 'lint');\n      if (args.extraParams) {\n        gradleArgs.push(...args.extraParams);\n      }\n\n      if (args.port) {\n        gradleArgs.push(`-PreactNativeDevServerPort=${args.port}`);\n      }\n\n      if (args.activeArchOnly) {\n        const architecture = adb.getCPU(adbPath, deviceId);\n\n        if (architecture !== null) {\n          logger.info(`Detected architecture ${architecture}`);\n          // `reactNativeDebugArchitectures` was renamed to `reactNativeArchitectures` in 0.68.\n          // Can be removed when 0.67 no longer needs to be supported.\n          gradleArgs.push(`-PreactNativeDebugArchitectures=${architecture}`);\n          gradleArgs.push(`-PreactNativeArchitectures=${architecture}`);\n        }\n      }\n\n      if (!args.binaryPath) {\n        build(gradleArgs, androidProject.sourceDir);\n      }\n\n      installAndLaunchOnDevice(\n        args,\n        deviceId,\n        adbPath,\n        androidProject,\n        selectedTask,\n      );\n    } else {\n      logger.error(\n        `Could not find device with the id: \"${deviceId}\". Please choose one of the following:`,\n        ...devices,\n      );\n    }\n  } else {\n    logger.error('No Android device or emulator connected.');\n  }\n}\n\nfunction installAndLaunchOnDevice(\n  args: Flags,\n  selectedDevice: string,\n  adbPath: string,\n  androidProject: AndroidProject,\n  selectedTask?: string,\n) {\n  tryRunAdbReverse(args.port, selectedDevice);\n\n  tryInstallAppOnDevice(\n    args,\n    adbPath,\n    selectedDevice,\n    androidProject,\n    selectedTask,\n  );\n\n  tryLaunchAppOnDevice(selectedDevice, androidProject, adbPath, args);\n}\n\nexport default {\n  name: 'run-android',\n  description:\n    'builds your app and starts it on a connected Android emulator or device',\n  func: runAndroid,\n  options: [\n    ...options,\n    {\n      name: '--no-packager',\n      description: 'Do not launch packager while running the app',\n    },\n    {\n      name: '--port <number>',\n      default: process.env.RCT_METRO_PORT || 8081,\n      parse: Number,\n    },\n    {\n      name: '--terminal <string>',\n      description:\n        'Launches the Metro Bundler in a new window using the specified terminal path.',\n      default: getDefaultUserTerminal(),\n    },\n    {\n      name: '--appId <string>',\n      description:\n        'Specify an applicationId to launch after build. If not specified, `package` from AndroidManifest.xml will be used.',\n      default: '',\n    },\n    {\n      name: '--appIdSuffix <string>',\n      description: 'Specify an applicationIdSuffix to launch after build.',\n      default: '',\n    },\n    {\n      name: '--main-activity <string>',\n      description: 'Name of the activity to start',\n    },\n    {\n      name: '--deviceId <string>',\n      description:\n        'builds your app and starts it on a specific device/simulator with the ' +\n        'given device id (listed by running \"adb devices\" on the command line).',\n    },\n    {\n      name: '--list-devices',\n      description:\n        'Lists all available Android devices and simulators and let you choose one to run the app',\n      default: false,\n    },\n    {\n      name: '--binary-path <string>',\n      description:\n        'Path relative to project root where pre-built .apk binary lives.',\n    },\n    {\n      name: '--user <number>',\n      description: 'Id of the User Profile you want to install the app on.',\n      parse: Number,\n    },\n  ],\n};\n\nexport {adb, getAdbPath, listAndroidDevices, tryRunAdbReverse};\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidDevices.d.ts b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidDevices.d.ts
deleted file mode 100644
index abe4259..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidDevices.d.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-type DeviceData = {
-    deviceId: string | undefined;
-    readableName: string;
-    connected: boolean;
-    type: 'emulator' | 'phone';
-};
-declare function listAndroidDevices(): Promise<DeviceData | undefined>;
-export default listAndroidDevices;
-//# sourceMappingURL=listAndroidDevices.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidDevices.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidDevices.d.ts.map
deleted file mode 100644
index 186f7a9..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidDevices.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"listAndroidDevices.d.ts","sourceRoot":"","sources":["../../../src/commands/runAndroid/listAndroidDevices.ts"],"names":[],"mappings":"AASA,KAAK,UAAU,GAAG;IAChB,QAAQ,EAAE,MAAM,GAAG,SAAS,CAAC;IAC7B,YAAY,EAAE,MAAM,CAAC;IACrB,SAAS,EAAE,OAAO,CAAC;IACnB,IAAI,EAAE,UAAU,GAAG,OAAO,CAAC;CAC5B,CAAC;AA2DF,iBAAe,kBAAkB,oCA6ChC;AAED,eAAe,kBAAkB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidDevices.js b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidDevices.js
deleted file mode 100644
index 5130618..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidDevices.js
+++ /dev/null
@@ -1,126 +0,0 @@
-"use strict";
-
-Object.defineProperty(exports, "__esModule", {
-  value: true
-});
-exports.default = void 0;
-function _child_process() {
-  const data = require("child_process");
-  _child_process = function () {
-    return data;
-  };
-  return data;
-}
-var _adb = _interopRequireDefault(require("./adb"));
-var _getAdbPath = _interopRequireDefault(require("./getAdbPath"));
-var _tryLaunchEmulator = require("./tryLaunchEmulator");
-var _toPascalCase = require("./toPascalCase");
-function _os() {
-  const data = _interopRequireDefault(require("os"));
-  _os = function () {
-    return data;
-  };
-  return data;
-}
-function _chalk() {
-  const data = _interopRequireDefault(require("chalk"));
-  _chalk = function () {
-    return data;
-  };
-  return data;
-}
-function _cliTools() {
-  const data = require("@react-native-community/cli-tools");
-  _cliTools = function () {
-    return data;
-  };
-  return data;
-}
-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
-/**
- *
- * @param deviceId string
- * @returns name of Android emulator
- */
-function getEmulatorName(deviceId) {
-  const adbPath = (0, _getAdbPath.default)();
-  const buffer = (0, _child_process().execSync)(`${adbPath} -s ${deviceId} emu avd name`);
-
-  // 1st line should get us emu name
-  return buffer.toString().split(_os().default.EOL)[0].replace(/(\r\n|\n|\r)/gm, '').trim();
-}
-
-/**
- *
- * @param deviceId string
- * @returns Android device name in readable format
- */
-function getPhoneName(deviceId) {
-  const adbPath = (0, _getAdbPath.default)();
-  const buffer = (0, _child_process().execSync)(`${adbPath} -s ${deviceId} shell getprop | grep ro.product.model`);
-  return buffer.toString().replace(/\[ro\.product\.model\]:\s*\[(.*)\]/, '$1').trim();
-}
-async function promptForDeviceSelection(allDevices) {
-  if (!allDevices.length) {
-    throw new (_cliTools().CLIError)('No devices and/or emulators connected. Please create emulator with Android Studio or connect Android device.');
-  }
-  const {
-    device
-  } = await (0, _cliTools().prompt)({
-    type: 'select',
-    name: 'device',
-    message: 'Select the device / emulator you want to use',
-    choices: allDevices.map(d => ({
-      title: `${_chalk().default.bold(`${(0, _toPascalCase.toPascalCase)(d.type)}`)} ${_chalk().default.green(`${d.readableName}`)} (${d.connected ? 'connected' : 'disconnected'})`,
-      value: d
-    })),
-    min: 1
-  });
-  return device;
-}
-async function listAndroidDevices() {
-  const adbPath = (0, _getAdbPath.default)();
-  const devices = _adb.default.getDevices(adbPath);
-  let allDevices = [];
-  devices.forEach(deviceId => {
-    if (deviceId.includes('emulator')) {
-      const emulatorData = {
-        deviceId,
-        readableName: getEmulatorName(deviceId),
-        connected: true,
-        type: 'emulator'
-      };
-      allDevices = [...allDevices, emulatorData];
-    } else {
-      const phoneData = {
-        deviceId,
-        readableName: getPhoneName(deviceId),
-        type: 'phone',
-        connected: true
-      };
-      allDevices = [...allDevices, phoneData];
-    }
-  });
-  const emulators = (0, _tryLaunchEmulator.getEmulators)();
-
-  // Find not booted ones:
-  emulators.forEach(emulatorName => {
-    // skip those already booted
-    if (allDevices.some(device => device.readableName === emulatorName)) {
-      return;
-    }
-    const emulatorData = {
-      deviceId: undefined,
-      readableName: emulatorName,
-      type: 'emulator',
-      connected: false
-    };
-    allDevices = [...allDevices, emulatorData];
-  });
-  const selectedDevice = await promptForDeviceSelection(allDevices);
-  return selectedDevice;
-}
-var _default = listAndroidDevices;
-exports.default = _default;
-
-//# sourceMappingURL=listAndroidDevices.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidDevices.js.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidDevices.js.map
deleted file mode 100644
index 8a88a11..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidDevices.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["getEmulatorName","deviceId","adbPath","getAdbPath","buffer","execSync","toString","split","os","EOL","replace","trim","getPhoneName","promptForDeviceSelection","allDevices","length","CLIError","device","prompt","type","name","message","choices","map","d","title","chalk","bold","toPascalCase","green","readableName","connected","value","min","listAndroidDevices","devices","adb","getDevices","forEach","includes","emulatorData","phoneData","emulators","getEmulators","emulatorName","some","undefined","selectedDevice"],"sources":["../../../src/commands/runAndroid/listAndroidDevices.ts"],"sourcesContent":["import {execSync} from 'child_process';\nimport adb from './adb';\nimport getAdbPath from './getAdbPath';\nimport {getEmulators} from './tryLaunchEmulator';\nimport {toPascalCase} from './toPascalCase';\nimport os from 'os';\nimport chalk from 'chalk';\nimport {CLIError, prompt} from '@react-native-community/cli-tools';\n\ntype DeviceData = {\n  deviceId: string | undefined;\n  readableName: string;\n  connected: boolean;\n  type: 'emulator' | 'phone';\n};\n\n/**\n *\n * @param deviceId string\n * @returns name of Android emulator\n */\nfunction getEmulatorName(deviceId: string) {\n  const adbPath = getAdbPath();\n  const buffer = execSync(`${adbPath} -s ${deviceId} emu avd name`);\n\n  // 1st line should get us emu name\n  return buffer\n    .toString()\n    .split(os.EOL)[0]\n    .replace(/(\\r\\n|\\n|\\r)/gm, '')\n    .trim();\n}\n\n/**\n *\n * @param deviceId string\n * @returns Android device name in readable format\n */\nfunction getPhoneName(deviceId: string) {\n  const adbPath = getAdbPath();\n  const buffer = execSync(\n    `${adbPath} -s ${deviceId} shell getprop | grep ro.product.model`,\n  );\n  return buffer\n    .toString()\n    .replace(/\\[ro\\.product\\.model\\]:\\s*\\[(.*)\\]/, '$1')\n    .trim();\n}\n\nasync function promptForDeviceSelection(\n  allDevices: Array<DeviceData>,\n): Promise<DeviceData | undefined> {\n  if (!allDevices.length) {\n    throw new CLIError(\n      'No devices and/or emulators connected. Please create emulator with Android Studio or connect Android device.',\n    );\n  }\n  const {device} = await prompt({\n    type: 'select',\n    name: 'device',\n    message: 'Select the device / emulator you want to use',\n    choices: allDevices.map((d) => ({\n      title: `${chalk.bold(`${toPascalCase(d.type)}`)} ${chalk.green(\n        `${d.readableName}`,\n      )} (${d.connected ? 'connected' : 'disconnected'})`,\n      value: d,\n    })),\n    min: 1,\n  });\n\n  return device;\n}\n\nasync function listAndroidDevices() {\n  const adbPath = getAdbPath();\n  const devices = adb.getDevices(adbPath);\n\n  let allDevices: Array<DeviceData> = [];\n\n  devices.forEach((deviceId) => {\n    if (deviceId.includes('emulator')) {\n      const emulatorData: DeviceData = {\n        deviceId,\n        readableName: getEmulatorName(deviceId),\n        connected: true,\n        type: 'emulator',\n      };\n      allDevices = [...allDevices, emulatorData];\n    } else {\n      const phoneData: DeviceData = {\n        deviceId,\n        readableName: getPhoneName(deviceId),\n        type: 'phone',\n        connected: true,\n      };\n      allDevices = [...allDevices, phoneData];\n    }\n  });\n\n  const emulators = getEmulators();\n\n  // Find not booted ones:\n  emulators.forEach((emulatorName) => {\n    // skip those already booted\n    if (allDevices.some((device) => device.readableName === emulatorName)) {\n      return;\n    }\n    const emulatorData: DeviceData = {\n      deviceId: undefined,\n      readableName: emulatorName,\n      type: 'emulator',\n      connected: false,\n    };\n    allDevices = [...allDevices, emulatorData];\n  });\n\n  const selectedDevice = await promptForDeviceSelection(allDevices);\n  return selectedDevice;\n}\n\nexport default listAndroidDevices;\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidTasks.d.ts b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidTasks.d.ts
deleted file mode 100644
index cfe588c..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidTasks.d.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-type GradleTask = {
-    task: string;
-    description: string;
-};
-export declare const parseTasksFromGradleFile: (taskType: 'install' | 'build', text: string) => Array<GradleTask>;
-export declare const getGradleTasks: (taskType: 'install' | 'build', sourceDir: string) => GradleTask[];
-export declare const promptForTaskSelection: (taskType: 'install' | 'build', sourceDir: string) => Promise<string | undefined>;
-export {};
-//# sourceMappingURL=listAndroidTasks.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidTasks.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidTasks.d.ts.map
deleted file mode 100644
index 03a8bcd..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidTasks.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"listAndroidTasks.d.ts","sourceRoot":"","sources":["../../../src/commands/runAndroid/listAndroidTasks.ts"],"names":[],"mappings":"AAIA,KAAK,UAAU,GAAG;IAChB,IAAI,EAAE,MAAM,CAAC;IACb,WAAW,EAAE,MAAM,CAAC;CACrB,CAAC;AAEF,eAAO,MAAM,wBAAwB,aACzB,SAAS,GAAG,OAAO,QACvB,MAAM,KACX,MAAM,UAAU,CAelB,CAAC;AAEF,eAAO,MAAM,cAAc,aACf,SAAS,GAAG,OAAO,aAClB,MAAM,iBAelB,CAAC;AAEF,eAAO,MAAM,sBAAsB,aACvB,SAAS,GAAG,OAAO,aAClB,MAAM,KAChB,QAAQ,MAAM,GAAG,SAAS,CAgB5B,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidTasks.js b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidTasks.js
deleted file mode 100644
index e2312e6..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidTasks.js
+++ /dev/null
@@ -1,81 +0,0 @@
-"use strict";
-
-Object.defineProperty(exports, "__esModule", {
-  value: true
-});
-exports.promptForTaskSelection = exports.parseTasksFromGradleFile = exports.getGradleTasks = void 0;
-function _cliTools() {
-  const data = require("@react-native-community/cli-tools");
-  _cliTools = function () {
-    return data;
-  };
-  return data;
-}
-function _chalk() {
-  const data = _interopRequireDefault(require("chalk"));
-  _chalk = function () {
-    return data;
-  };
-  return data;
-}
-function _execa() {
-  const data = _interopRequireDefault(require("execa"));
-  _execa = function () {
-    return data;
-  };
-  return data;
-}
-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
-const parseTasksFromGradleFile = (taskType, text) => {
-  const instalTasks = [];
-  const taskRegex = new RegExp(taskType === 'build' ? '^assemble|^bundle' : '^install');
-  text.split('\n').forEach(line => {
-    if (taskRegex.test(line.trim()) && /(?!.*?Test)^.*$/.test(line.trim())) {
-      const metadata = line.split(' - ');
-      instalTasks.push({
-        task: metadata[0],
-        description: metadata[1]
-      });
-    }
-  });
-  return instalTasks;
-};
-exports.parseTasksFromGradleFile = parseTasksFromGradleFile;
-const getGradleTasks = (taskType, sourceDir) => {
-  const loader = (0, _cliTools().getLoader)();
-  loader.start('Searching for available Gradle tasks...');
-  const cmd = process.platform.startsWith('win') ? 'gradlew.bat' : './gradlew';
-  try {
-    const out = _execa().default.sync(cmd, ['tasks', '--group', taskType], {
-      cwd: sourceDir
-    }).stdout;
-    loader.succeed();
-    return parseTasksFromGradleFile(taskType, out);
-  } catch {
-    loader.fail();
-    return [];
-  }
-};
-exports.getGradleTasks = getGradleTasks;
-const promptForTaskSelection = async (taskType, sourceDir) => {
-  const tasks = getGradleTasks(taskType, sourceDir);
-  if (!tasks.length) {
-    throw new (_cliTools().CLIError)(`No actionable ${taskType} tasks were found...`);
-  }
-  const {
-    task
-  } = await (0, _cliTools().prompt)({
-    type: 'select',
-    name: 'task',
-    message: `Select ${taskType} task you want to perform`,
-    choices: tasks.map(t => ({
-      title: `${_chalk().default.bold(t.task)} - ${t.description}`,
-      value: t.task
-    })),
-    min: 1
-  });
-  return task;
-};
-exports.promptForTaskSelection = promptForTaskSelection;
-
-//# sourceMappingURL=listAndroidTasks.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidTasks.js.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidTasks.js.map
deleted file mode 100644
index 31365fb..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidTasks.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["parseTasksFromGradleFile","taskType","text","instalTasks","taskRegex","RegExp","split","forEach","line","test","trim","metadata","push","task","description","getGradleTasks","sourceDir","loader","getLoader","start","cmd","process","platform","startsWith","out","execa","sync","cwd","stdout","succeed","fail","promptForTaskSelection","tasks","length","CLIError","prompt","type","name","message","choices","map","t","title","chalk","bold","value","min"],"sources":["../../../src/commands/runAndroid/listAndroidTasks.ts"],"sourcesContent":["import {CLIError, getLoader, prompt} from '@react-native-community/cli-tools';\nimport chalk from 'chalk';\nimport execa from 'execa';\n\ntype GradleTask = {\n  task: string;\n  description: string;\n};\n\nexport const parseTasksFromGradleFile = (\n  taskType: 'install' | 'build',\n  text: string,\n): Array<GradleTask> => {\n  const instalTasks: Array<GradleTask> = [];\n  const taskRegex = new RegExp(\n    taskType === 'build' ? '^assemble|^bundle' : '^install',\n  );\n  text.split('\\n').forEach((line) => {\n    if (taskRegex.test(line.trim()) && /(?!.*?Test)^.*$/.test(line.trim())) {\n      const metadata = line.split(' - ');\n      instalTasks.push({\n        task: metadata[0],\n        description: metadata[1],\n      });\n    }\n  });\n  return instalTasks;\n};\n\nexport const getGradleTasks = (\n  taskType: 'install' | 'build',\n  sourceDir: string,\n) => {\n  const loader = getLoader();\n  loader.start('Searching for available Gradle tasks...');\n  const cmd = process.platform.startsWith('win') ? 'gradlew.bat' : './gradlew';\n  try {\n    const out = execa.sync(cmd, ['tasks', '--group', taskType], {\n      cwd: sourceDir,\n    }).stdout;\n    loader.succeed();\n    return parseTasksFromGradleFile(taskType, out);\n  } catch {\n    loader.fail();\n    return [];\n  }\n};\n\nexport const promptForTaskSelection = async (\n  taskType: 'install' | 'build',\n  sourceDir: string,\n): Promise<string | undefined> => {\n  const tasks = getGradleTasks(taskType, sourceDir);\n  if (!tasks.length) {\n    throw new CLIError(`No actionable ${taskType} tasks were found...`);\n  }\n  const {task}: {task: string} = await prompt({\n    type: 'select',\n    name: 'task',\n    message: `Select ${taskType} task you want to perform`,\n    choices: tasks.map((t: GradleTask) => ({\n      title: `${chalk.bold(t.task)} - ${t.description}`,\n      value: t.task,\n    })),\n    min: 1,\n  });\n  return task;\n};\n"],"mappings":";;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAA0B;AAOnB,MAAMA,wBAAwB,GAAG,CACtCC,QAA6B,EAC7BC,IAAY,KACU;EACtB,MAAMC,WAA8B,GAAG,EAAE;EACzC,MAAMC,SAAS,GAAG,IAAIC,MAAM,CAC1BJ,QAAQ,KAAK,OAAO,GAAG,mBAAmB,GAAG,UAAU,CACxD;EACDC,IAAI,CAACI,KAAK,CAAC,IAAI,CAAC,CAACC,OAAO,CAAEC,IAAI,IAAK;IACjC,IAAIJ,SAAS,CAACK,IAAI,CAACD,IAAI,CAACE,IAAI,EAAE,CAAC,IAAI,iBAAiB,CAACD,IAAI,CAACD,IAAI,CAACE,IAAI,EAAE,CAAC,EAAE;MACtE,MAAMC,QAAQ,GAAGH,IAAI,CAACF,KAAK,CAAC,KAAK,CAAC;MAClCH,WAAW,CAACS,IAAI,CAAC;QACfC,IAAI,EAAEF,QAAQ,CAAC,CAAC,CAAC;QACjBG,WAAW,EAAEH,QAAQ,CAAC,CAAC;MACzB,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EACF,OAAOR,WAAW;AACpB,CAAC;AAAC;AAEK,MAAMY,cAAc,GAAG,CAC5Bd,QAA6B,EAC7Be,SAAiB,KACd;EACH,MAAMC,MAAM,GAAG,IAAAC,qBAAS,GAAE;EAC1BD,MAAM,CAACE,KAAK,CAAC,yCAAyC,CAAC;EACvD,MAAMC,GAAG,GAAGC,OAAO,CAACC,QAAQ,CAACC,UAAU,CAAC,KAAK,CAAC,GAAG,aAAa,GAAG,WAAW;EAC5E,IAAI;IACF,MAAMC,GAAG,GAAGC,gBAAK,CAACC,IAAI,CAACN,GAAG,EAAE,CAAC,OAAO,EAAE,SAAS,EAAEnB,QAAQ,CAAC,EAAE;MAC1D0B,GAAG,EAAEX;IACP,CAAC,CAAC,CAACY,MAAM;IACTX,MAAM,CAACY,OAAO,EAAE;IAChB,OAAO7B,wBAAwB,CAACC,QAAQ,EAAEuB,GAAG,CAAC;EAChD,CAAC,CAAC,MAAM;IACNP,MAAM,CAACa,IAAI,EAAE;IACb,OAAO,EAAE;EACX;AACF,CAAC;AAAC;AAEK,MAAMC,sBAAsB,GAAG,OACpC9B,QAA6B,EAC7Be,SAAiB,KACe;EAChC,MAAMgB,KAAK,GAAGjB,cAAc,CAACd,QAAQ,EAAEe,SAAS,CAAC;EACjD,IAAI,CAACgB,KAAK,CAACC,MAAM,EAAE;IACjB,MAAM,KAAIC,oBAAQ,EAAE,iBAAgBjC,QAAS,sBAAqB,CAAC;EACrE;EACA,MAAM;IAACY;EAAoB,CAAC,GAAG,MAAM,IAAAsB,kBAAM,EAAC;IAC1CC,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE,MAAM;IACZC,OAAO,EAAG,UAASrC,QAAS,2BAA0B;IACtDsC,OAAO,EAAEP,KAAK,CAACQ,GAAG,CAAEC,CAAa,KAAM;MACrCC,KAAK,EAAG,GAAEC,gBAAK,CAACC,IAAI,CAACH,CAAC,CAAC5B,IAAI,CAAE,MAAK4B,CAAC,CAAC3B,WAAY,EAAC;MACjD+B,KAAK,EAAEJ,CAAC,CAAC5B;IACX,CAAC,CAAC,CAAC;IACHiC,GAAG,EAAE;EACP,CAAC,CAAC;EACF,OAAOjC,IAAI;AACb,CAAC;AAAC"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidUsers.d.ts b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidUsers.d.ts
deleted file mode 100644
index 17db0c0..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidUsers.d.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-type User = {
-    id: string;
-    name: string;
-};
-export declare function checkUsers(device: string, adbPath: string): User[];
-export declare function promptForUser(users: User[]): Promise<User>;
-export {};
-//# sourceMappingURL=listAndroidUsers.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidUsers.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidUsers.d.ts.map
deleted file mode 100644
index 9e7a5d4..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidUsers.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"listAndroidUsers.d.ts","sourceRoot":"","sources":["../../../src/commands/runAndroid/listAndroidUsers.ts"],"names":[],"mappings":"AAGA,KAAK,IAAI,GAAG;IACV,EAAE,EAAE,MAAM,CAAC;IACX,IAAI,EAAE,MAAM,CAAC;CACd,CAAC;AAEF,wBAAgB,UAAU,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,UAgCzD;AAED,wBAAsB,aAAa,CAAC,KAAK,EAAE,IAAI,EAAE,iBAahD"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidUsers.js b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidUsers.js
deleted file mode 100644
index 11fbc50..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidUsers.js
+++ /dev/null
@@ -1,69 +0,0 @@
-"use strict";
-
-Object.defineProperty(exports, "__esModule", {
-  value: true
-});
-exports.checkUsers = checkUsers;
-exports.promptForUser = promptForUser;
-function _execa() {
-  const data = _interopRequireDefault(require("execa"));
-  _execa = function () {
-    return data;
-  };
-  return data;
-}
-function _cliTools() {
-  const data = require("@react-native-community/cli-tools");
-  _cliTools = function () {
-    return data;
-  };
-  return data;
-}
-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
-function checkUsers(device, adbPath) {
-  try {
-    const adbArgs = ['-s', device, 'shell', 'pm', 'list', 'users'];
-    _cliTools().logger.debug(`Checking users on "${device}"...`);
-    const {
-      stdout
-    } = _execa().default.sync(adbPath, adbArgs, {
-      encoding: 'utf-8'
-    });
-    const regex = new RegExp(/^\s*UserInfo\{(?<userId>\d+):(?<userName>.*):(?<userFlags>[0-9a-f]*)}/);
-    const users = [];
-    const lines = stdout.split('\n');
-    for (const line of lines) {
-      const res = regex.exec(line);
-      if (res === null || res === void 0 ? void 0 : res.groups) {
-        users.push({
-          id: res.groups.userId,
-          name: res.groups.userName
-        });
-      }
-    }
-    if (users.length > 1) {
-      _cliTools().logger.debug(`Available users are:\n${users.map(user => `${user.name} - ${user.id}`).join('\n')}`);
-    }
-    return users;
-  } catch (error) {
-    _cliTools().logger.error('Failed to check users of device.', error);
-    return [];
-  }
-}
-async function promptForUser(users) {
-  const {
-    selectedUser
-  } = await (0, _cliTools().prompt)({
-    type: 'select',
-    name: 'selectedUser',
-    message: 'Which profile would you like to launch your app into?',
-    choices: users.map(user => ({
-      title: user.name,
-      value: user
-    })),
-    min: 1
-  });
-  return selectedUser;
-}
-
-//# sourceMappingURL=listAndroidUsers.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidUsers.js.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidUsers.js.map
deleted file mode 100644
index c196f7f..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidUsers.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["checkUsers","device","adbPath","adbArgs","logger","debug","stdout","execa","sync","encoding","regex","RegExp","users","lines","split","line","res","exec","groups","push","id","userId","name","userName","length","map","user","join","error","promptForUser","selectedUser","prompt","type","message","choices","title","value","min"],"sources":["../../../src/commands/runAndroid/listAndroidUsers.ts"],"sourcesContent":["import execa from 'execa';\nimport {logger, prompt} from '@react-native-community/cli-tools';\n\ntype User = {\n  id: string;\n  name: string;\n};\n\nexport function checkUsers(device: string, adbPath: string) {\n  try {\n    const adbArgs = ['-s', device, 'shell', 'pm', 'list', 'users'];\n\n    logger.debug(`Checking users on \"${device}\"...`);\n    const {stdout} = execa.sync(adbPath, adbArgs, {encoding: 'utf-8'});\n    const regex = new RegExp(\n      /^\\s*UserInfo\\{(?<userId>\\d+):(?<userName>.*):(?<userFlags>[0-9a-f]*)}/,\n    );\n    const users: User[] = [];\n\n    const lines = stdout.split('\\n');\n    for (const line of lines) {\n      const res = regex.exec(line);\n      if (res?.groups) {\n        users.push({id: res.groups.userId, name: res.groups.userName});\n      }\n    }\n\n    if (users.length > 1) {\n      logger.debug(\n        `Available users are:\\n${users\n          .map((user) => `${user.name} - ${user.id}`)\n          .join('\\n')}`,\n      );\n    }\n\n    return users;\n  } catch (error) {\n    logger.error('Failed to check users of device.', error as any);\n    return [];\n  }\n}\n\nexport async function promptForUser(users: User[]) {\n  const {selectedUser}: {selectedUser: User} = await prompt({\n    type: 'select',\n    name: 'selectedUser',\n    message: 'Which profile would you like to launch your app into?',\n    choices: users.map((user: User) => ({\n      title: user.name,\n      value: user,\n    })),\n    min: 1,\n  });\n\n  return selectedUser;\n}\n"],"mappings":";;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAAiE;AAO1D,SAASA,UAAU,CAACC,MAAc,EAAEC,OAAe,EAAE;EAC1D,IAAI;IACF,MAAMC,OAAO,GAAG,CAAC,IAAI,EAAEF,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC;IAE9DG,kBAAM,CAACC,KAAK,CAAE,sBAAqBJ,MAAO,MAAK,CAAC;IAChD,MAAM;MAACK;IAAM,CAAC,GAAGC,gBAAK,CAACC,IAAI,CAACN,OAAO,EAAEC,OAAO,EAAE;MAACM,QAAQ,EAAE;IAAO,CAAC,CAAC;IAClE,MAAMC,KAAK,GAAG,IAAIC,MAAM,CACtB,uEAAuE,CACxE;IACD,MAAMC,KAAa,GAAG,EAAE;IAExB,MAAMC,KAAK,GAAGP,MAAM,CAACQ,KAAK,CAAC,IAAI,CAAC;IAChC,KAAK,MAAMC,IAAI,IAAIF,KAAK,EAAE;MACxB,MAAMG,GAAG,GAAGN,KAAK,CAACO,IAAI,CAACF,IAAI,CAAC;MAC5B,IAAIC,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEE,MAAM,EAAE;QACfN,KAAK,CAACO,IAAI,CAAC;UAACC,EAAE,EAAEJ,GAAG,CAACE,MAAM,CAACG,MAAM;UAAEC,IAAI,EAAEN,GAAG,CAACE,MAAM,CAACK;QAAQ,CAAC,CAAC;MAChE;IACF;IAEA,IAAIX,KAAK,CAACY,MAAM,GAAG,CAAC,EAAE;MACpBpB,kBAAM,CAACC,KAAK,CACT,yBAAwBO,KAAK,CAC3Ba,GAAG,CAAEC,IAAI,IAAM,GAAEA,IAAI,CAACJ,IAAK,MAAKI,IAAI,CAACN,EAAG,EAAC,CAAC,CAC1CO,IAAI,CAAC,IAAI,CAAE,EAAC,CAChB;IACH;IAEA,OAAOf,KAAK;EACd,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACdxB,kBAAM,CAACwB,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAQ;IAC9D,OAAO,EAAE;EACX;AACF;AAEO,eAAeC,aAAa,CAACjB,KAAa,EAAE;EACjD,MAAM;IAACkB;EAAkC,CAAC,GAAG,MAAM,IAAAC,kBAAM,EAAC;IACxDC,IAAI,EAAE,QAAQ;IACdV,IAAI,EAAE,cAAc;IACpBW,OAAO,EAAE,uDAAuD;IAChEC,OAAO,EAAEtB,KAAK,CAACa,GAAG,CAAEC,IAAU,KAAM;MAClCS,KAAK,EAAET,IAAI,CAACJ,IAAI;MAChBc,KAAK,EAAEV;IACT,CAAC,CAAC,CAAC;IACHW,GAAG,EAAE;EACP,CAAC,CAAC;EAEF,OAAOP,YAAY;AACrB"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/runOnAllDevices.d.ts b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/runOnAllDevices.d.ts
index 6755345..7a41ac7 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/runOnAllDevices.d.ts
+++ b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/runOnAllDevices.d.ts
@@ -5,9 +5,7 @@
  * LICENSE file in the root directory of this source tree.
  *
  */
-import { Config } from '@react-native-community/cli-types';
-import type { Flags } from '.';
-type AndroidProject = NonNullable<Config['project']['android']>;
-declare function runOnAllDevices(args: Flags, cmd: string, adbPath: string, androidProject: AndroidProject): Promise<void>;
+import { Flags } from '.';
+declare function runOnAllDevices(args: Flags, cmd: string, packageNameWithSuffix: string, packageName: string, adbPath: string): Promise<void>;
 export default runOnAllDevices;
 //# sourceMappingURL=runOnAllDevices.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/runOnAllDevices.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/runOnAllDevices.d.ts.map
index 5f85cb4..21779f2 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/runOnAllDevices.d.ts.map
+++ b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/runOnAllDevices.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"runOnAllDevices.d.ts","sourceRoot":"","sources":["../../../src/commands/runAndroid/runOnAllDevices.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAIH,OAAO,EAAC,MAAM,EAAC,MAAM,mCAAmC,CAAC;AAazD,OAAO,KAAK,EAAC,KAAK,EAAC,MAAM,GAAG,CAAC;AAE7B,KAAK,cAAc,GAAG,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;AAEhE,iBAAe,eAAe,CAC5B,IAAI,EAAE,KAAK,EACX,GAAG,EAAE,MAAM,EACX,OAAO,EAAE,MAAM,EACf,cAAc,EAAE,cAAc,iBAmF/B;AAqCD,eAAe,eAAe,CAAC"}
\ No newline at end of file
+{"version":3,"file":"runOnAllDevices.d.ts","sourceRoot":"","sources":["../../../src/commands/runAndroid/runOnAllDevices.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AASH,OAAO,EAAC,KAAK,EAAC,MAAM,GAAG,CAAC;AAexB,iBAAe,eAAe,CAC5B,IAAI,EAAE,KAAK,EACX,GAAG,EAAE,MAAM,EACX,qBAAqB,EAAE,MAAM,EAC7B,WAAW,EAAE,MAAM,EACnB,OAAO,EAAE,MAAM,iBAiDhB;AA8BD,eAAe,eAAe,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/runOnAllDevices.js b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/runOnAllDevices.js
index 44c0b08..4fdb96e 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/runOnAllDevices.js
+++ b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/runOnAllDevices.js
@@ -4,34 +4,47 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
+
 function _chalk() {
   const data = _interopRequireDefault(require("chalk"));
+
   _chalk = function () {
     return data;
   };
+
   return data;
 }
-function _execa() {
-  const data = _interopRequireDefault(require("execa"));
-  _execa = function () {
+
+function _child_process() {
+  const data = require("child_process");
+
+  _child_process = function () {
     return data;
   };
+
   return data;
 }
+
 function _cliTools() {
   const data = require("@react-native-community/cli-tools");
+
   _cliTools = function () {
     return data;
   };
+
   return data;
 }
+
 var _adb = _interopRequireDefault(require("./adb"));
+
 var _tryRunAdbReverse = _interopRequireDefault(require("./tryRunAdbReverse"));
+
 var _tryLaunchAppOnDevice = _interopRequireDefault(require("./tryLaunchAppOnDevice"));
+
 var _tryLaunchEmulator = _interopRequireDefault(require("./tryLaunchEmulator"));
-var _tryInstallAppOnDevice = _interopRequireDefault(require("./tryInstallAppOnDevice"));
-var _getTaskNames = require("./getTaskNames");
+
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
 /**
  * Copyright (c) Facebook, Inc. and its affiliates.
  *
@@ -39,83 +52,75 @@ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { de
  * LICENSE file in the root directory of this source tree.
  *
  */
+function getTaskNames(appFolder, commands) {
+  return appFolder ? commands.map(command => `${appFolder}:${command}`) : commands;
+}
+
+function toPascalCase(value) {
+  return value[0].toUpperCase() + value.slice(1);
+}
 
-async function runOnAllDevices(args, cmd, adbPath, androidProject) {
+async function runOnAllDevices(args, cmd, packageNameWithSuffix, packageName, adbPath) {
   let devices = _adb.default.getDevices(adbPath);
+
   if (devices.length === 0) {
     _cliTools().logger.info('Launching emulator...');
+
     const result = await (0, _tryLaunchEmulator.default)(adbPath);
+
     if (result.success) {
       _cliTools().logger.info('Successfully launched emulator.');
+
       devices = _adb.default.getDevices(adbPath);
     } else {
       _cliTools().logger.error(`Failed to launch emulator. Reason: ${_chalk().default.dim(result.error || '')}.`);
+
       _cliTools().logger.warn('Please launch an emulator manually or connect a device. Otherwise app may fail to launch.');
     }
   }
+
   try {
-    if (!args.binaryPath) {
-      let gradleArgs = (0, _getTaskNames.getTaskNames)(androidProject.appName, args.mode, args.tasks, 'install');
-      if (args.extraParams) {
-        gradleArgs.push(...args.extraParams);
-      }
-      if (args.port != null) {
-        gradleArgs.push('-PreactNativeDevServerPort=' + args.port);
-      }
-      if (args.activeArchOnly) {
-        const architectures = devices.map(device => {
-          return _adb.default.getCPU(adbPath, device);
-        }).filter((arch, index, array) => arch != null && array.indexOf(arch) === index);
-        if (architectures.length > 0) {
-          _cliTools().logger.info(`Detected architectures ${architectures.join(', ')}`);
-          // `reactNativeDebugArchitectures` was renamed to `reactNativeArchitectures` in 0.68.
-          // Can be removed when 0.67 no longer needs to be supported.
-          gradleArgs.push('-PreactNativeDebugArchitectures=' + architectures.join(','));
-          gradleArgs.push('-PreactNativeArchitectures=' + architectures.join(','));
-        }
-      }
-      _cliTools().logger.info('Installing the app...');
-      _cliTools().logger.debug(`Running command "cd android && ${cmd} ${gradleArgs.join(' ')}"`);
-      await (0, _execa().default)(cmd, gradleArgs, {
-        stdio: ['inherit', 'inherit', 'pipe'],
-        cwd: androidProject.sourceDir
-      });
+    const tasks = args.tasks || ['install' + toPascalCase(args.variant)];
+    const gradleArgs = getTaskNames(args.appFolder, tasks);
+
+    if (args.port != null) {
+      gradleArgs.push('-PreactNativeDevServerPort=' + args.port);
     }
+
+    _cliTools().logger.info('Installing the app...');
+
+    _cliTools().logger.debug(`Running command "cd android && ${cmd} ${gradleArgs.join(' ')}"`);
+
+    (0, _child_process().execFileSync)(cmd, gradleArgs, {
+      stdio: ['inherit', 'inherit', 'pipe']
+    });
   } catch (error) {
-    (0, _cliTools().printRunDoctorTip)();
     throw createInstallError(error);
   }
+
   (devices.length > 0 ? devices : [undefined]).forEach(device => {
     (0, _tryRunAdbReverse.default)(args.port, device);
-    if (args.binaryPath && device) {
-      (0, _tryInstallAppOnDevice.default)(args, adbPath, device, androidProject);
-    }
-    (0, _tryLaunchAppOnDevice.default)(device, androidProject, adbPath, args);
+    (0, _tryLaunchAppOnDevice.default)(device, packageNameWithSuffix, packageName, adbPath, args.mainActivity);
   });
 }
+
 function createInstallError(error) {
   const stderr = (error.stderr || '').toString();
-  let message = '';
-  // Pass the error message from the command to stdout because we pipe it to
+  const docs = 'https://facebook.github.io/react-native/docs/getting-started.html#android-development-environment';
+  let message = `Make sure you have the Android development environment set up: ${_chalk().default.underline.dim(docs)}`; // Pass the error message from the command to stdout because we pipe it to
   // parent process so it's not visible
-  _cliTools().logger.log(stderr);
 
-  // Handle some common failures and make the errors more helpful
+  _cliTools().logger.log(stderr); // Handle some common failures and make the errors more helpful
+
+
   if (stderr.includes('No connected devices')) {
-    message = 'Make sure you have an Android emulator running or a device connected.';
+    message = 'Make sure you have an Android emulator running or a device connected';
   } else if (stderr.includes('licences have not been accepted') || stderr.includes('accept the SDK license')) {
-    message = `Please accept all necessary Android SDK licenses using Android SDK Manager: "${_chalk().default.bold('$ANDROID_HOME/tools/bin/sdkmanager --licenses')}."`;
-  } else if (stderr.includes('requires Java')) {
-    message = `Looks like your Android environment is not properly set. Please go to ${_chalk().default.dim.underline(_cliTools().link.docs('environment-setup', 'android', {
-      hash: 'jdk-studio',
-      guide: 'native'
-    }))} and follow the React Native CLI QuickStart guide to install the compatible version of JDK.`;
-  } else {
-    message = error.message;
+    message = `Please accept all necessary SDK licenses using SDK Manager: "${_chalk().default.bold('$ANDROID_HOME/tools/bin/sdkmanager --licenses')}"`;
   }
-  return new (_cliTools().CLIError)(`Failed to install the app.${message ? ' ' + message : ''}`, error.message.length > 0 ? undefined : error);
+
+  return new (_cliTools().CLIError)(`Failed to install the app. ${message}.`, error);
 }
+
 var _default = runOnAllDevices;
 exports.default = _default;
\ No newline at end of file
-
-//# sourceMappingURL=runOnAllDevices.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/runOnAllDevices.js.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/runOnAllDevices.js.map
deleted file mode 100644
index a06033b..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/runOnAllDevices.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["runOnAllDevices","args","cmd","adbPath","androidProject","devices","adb","getDevices","length","logger","info","result","tryLaunchEmulator","success","error","chalk","dim","warn","binaryPath","gradleArgs","getTaskNames","appName","mode","tasks","extraParams","push","port","activeArchOnly","architectures","map","device","getCPU","filter","arch","index","array","indexOf","join","debug","execa","stdio","cwd","sourceDir","printRunDoctorTip","createInstallError","undefined","forEach","tryRunAdbReverse","tryInstallAppOnDevice","tryLaunchAppOnDevice","stderr","toString","message","log","includes","bold","underline","link","docs","hash","guide","CLIError"],"sources":["../../../src/commands/runAndroid/runOnAllDevices.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport chalk from 'chalk';\nimport execa from 'execa';\nimport {Config} from '@react-native-community/cli-types';\nimport {\n  link,\n  logger,\n  CLIError,\n  printRunDoctorTip,\n} from '@react-native-community/cli-tools';\nimport adb from './adb';\nimport tryRunAdbReverse from './tryRunAdbReverse';\nimport tryLaunchAppOnDevice from './tryLaunchAppOnDevice';\nimport tryLaunchEmulator from './tryLaunchEmulator';\nimport tryInstallAppOnDevice from './tryInstallAppOnDevice';\nimport {getTaskNames} from './getTaskNames';\nimport type {Flags} from '.';\n\ntype AndroidProject = NonNullable<Config['project']['android']>;\n\nasync function runOnAllDevices(\n  args: Flags,\n  cmd: string,\n  adbPath: string,\n  androidProject: AndroidProject,\n) {\n  let devices = adb.getDevices(adbPath);\n  if (devices.length === 0) {\n    logger.info('Launching emulator...');\n    const result = await tryLaunchEmulator(adbPath);\n    if (result.success) {\n      logger.info('Successfully launched emulator.');\n      devices = adb.getDevices(adbPath);\n    } else {\n      logger.error(\n        `Failed to launch emulator. Reason: ${chalk.dim(result.error || '')}.`,\n      );\n      logger.warn(\n        'Please launch an emulator manually or connect a device. Otherwise app may fail to launch.',\n      );\n    }\n  }\n\n  try {\n    if (!args.binaryPath) {\n      let gradleArgs = getTaskNames(\n        androidProject.appName,\n        args.mode,\n        args.tasks,\n        'install',\n      );\n\n      if (args.extraParams) {\n        gradleArgs.push(...args.extraParams);\n      }\n\n      if (args.port != null) {\n        gradleArgs.push('-PreactNativeDevServerPort=' + args.port);\n      }\n\n      if (args.activeArchOnly) {\n        const architectures = devices\n          .map((device) => {\n            return adb.getCPU(adbPath, device);\n          })\n          .filter(\n            (arch, index, array) =>\n              arch != null && array.indexOf(arch) === index,\n          );\n\n        if (architectures.length > 0) {\n          logger.info(`Detected architectures ${architectures.join(', ')}`);\n          // `reactNativeDebugArchitectures` was renamed to `reactNativeArchitectures` in 0.68.\n          // Can be removed when 0.67 no longer needs to be supported.\n          gradleArgs.push(\n            '-PreactNativeDebugArchitectures=' + architectures.join(','),\n          );\n          gradleArgs.push(\n            '-PreactNativeArchitectures=' + architectures.join(','),\n          );\n        }\n      }\n\n      logger.info('Installing the app...');\n      logger.debug(\n        `Running command \"cd android && ${cmd} ${gradleArgs.join(' ')}\"`,\n      );\n\n      await execa(cmd, gradleArgs, {\n        stdio: ['inherit', 'inherit', 'pipe'],\n        cwd: androidProject.sourceDir,\n      });\n    }\n  } catch (error) {\n    printRunDoctorTip();\n    throw createInstallError(error as any);\n  }\n\n  (devices.length > 0 ? devices : [undefined]).forEach(\n    (device: string | void) => {\n      tryRunAdbReverse(args.port, device);\n      if (args.binaryPath && device) {\n        tryInstallAppOnDevice(args, adbPath, device, androidProject);\n      }\n      tryLaunchAppOnDevice(device, androidProject, adbPath, args);\n    },\n  );\n}\n\nfunction createInstallError(error: Error & {stderr: string}) {\n  const stderr = (error.stderr || '').toString();\n  let message = '';\n  // Pass the error message from the command to stdout because we pipe it to\n  // parent process so it's not visible\n  logger.log(stderr);\n\n  // Handle some common failures and make the errors more helpful\n  if (stderr.includes('No connected devices')) {\n    message =\n      'Make sure you have an Android emulator running or a device connected.';\n  } else if (\n    stderr.includes('licences have not been accepted') ||\n    stderr.includes('accept the SDK license')\n  ) {\n    message = `Please accept all necessary Android SDK licenses using Android SDK Manager: \"${chalk.bold(\n      '$ANDROID_HOME/tools/bin/sdkmanager --licenses',\n    )}.\"`;\n  } else if (stderr.includes('requires Java')) {\n    message = `Looks like your Android environment is not properly set. Please go to ${chalk.dim.underline(\n      link.docs('environment-setup', 'android', {\n        hash: 'jdk-studio',\n        guide: 'native',\n      }),\n    )} and follow the React Native CLI QuickStart guide to install the compatible version of JDK.`;\n  } else {\n    message = error.message;\n  }\n\n  return new CLIError(\n    `Failed to install the app.${message ? ' ' + message : ''}`,\n    error.message.length > 0 ? undefined : error,\n  );\n}\n\nexport default runOnAllDevices;\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/toPascalCase.d.ts b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/toPascalCase.d.ts
deleted file mode 100644
index f3ece4e..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/toPascalCase.d.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-export declare function toPascalCase(value: string): string;
-//# sourceMappingURL=toPascalCase.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/toPascalCase.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/toPascalCase.d.ts.map
deleted file mode 100644
index 276c92a..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/toPascalCase.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"toPascalCase.d.ts","sourceRoot":"","sources":["../../../src/commands/runAndroid/toPascalCase.ts"],"names":[],"mappings":"AAAA,wBAAgB,YAAY,CAAC,KAAK,EAAE,MAAM,UAEzC"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/toPascalCase.js b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/toPascalCase.js
deleted file mode 100644
index a7c07c7..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/toPascalCase.js
+++ /dev/null
@@ -1,11 +0,0 @@
-"use strict";
-
-Object.defineProperty(exports, "__esModule", {
-  value: true
-});
-exports.toPascalCase = toPascalCase;
-function toPascalCase(value) {
-  return value !== '' ? value[0].toUpperCase() + value.slice(1) : value;
-}
-
-//# sourceMappingURL=toPascalCase.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/toPascalCase.js.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/toPascalCase.js.map
deleted file mode 100644
index 0187f9f..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/toPascalCase.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["toPascalCase","value","toUpperCase","slice"],"sources":["../../../src/commands/runAndroid/toPascalCase.ts"],"sourcesContent":["export function toPascalCase(value: string) {\n  return value !== '' ? value[0].toUpperCase() + value.slice(1) : value;\n}\n"],"mappings":";;;;;;AAAO,SAASA,YAAY,CAACC,KAAa,EAAE;EAC1C,OAAOA,KAAK,KAAK,EAAE,GAAGA,KAAK,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,GAAGD,KAAK,CAACE,KAAK,CAAC,CAAC,CAAC,GAAGF,KAAK;AACvE"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryInstallAppOnDevice.d.ts b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryInstallAppOnDevice.d.ts
deleted file mode 100644
index df60fc0..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryInstallAppOnDevice.d.ts
+++ /dev/null
@@ -1,4 +0,0 @@
-import type { AndroidProject, Flags } from './';
-declare function tryInstallAppOnDevice(args: Flags, adbPath: string, device: string, androidProject: AndroidProject, selectedTask?: string): void;
-export default tryInstallAppOnDevice;
-//# sourceMappingURL=tryInstallAppOnDevice.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryInstallAppOnDevice.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryInstallAppOnDevice.d.ts.map
deleted file mode 100644
index 2d1a34a..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryInstallAppOnDevice.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"tryInstallAppOnDevice.d.ts","sourceRoot":"","sources":["../../../src/commands/runAndroid/tryInstallAppOnDevice.ts"],"names":[],"mappings":"AAKA,OAAO,KAAK,EAAC,cAAc,EAAE,KAAK,EAAC,MAAM,IAAI,CAAC;AAE9C,iBAAS,qBAAqB,CAC5B,IAAI,EAAE,KAAK,EACX,OAAO,EAAE,MAAM,EACf,MAAM,EAAE,MAAM,EACd,cAAc,EAAE,cAAc,EAC9B,YAAY,CAAC,EAAE,MAAM,QAiDtB;AA4BD,eAAe,qBAAqB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryInstallAppOnDevice.js b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryInstallAppOnDevice.js
deleted file mode 100644
index 790de0d..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryInstallAppOnDevice.js
+++ /dev/null
@@ -1,90 +0,0 @@
-"use strict";
-
-Object.defineProperty(exports, "__esModule", {
-  value: true
-});
-exports.default = void 0;
-function _execa() {
-  const data = _interopRequireDefault(require("execa"));
-  _execa = function () {
-    return data;
-  };
-  return data;
-}
-function _fs() {
-  const data = _interopRequireDefault(require("fs"));
-  _fs = function () {
-    return data;
-  };
-  return data;
-}
-function _cliTools() {
-  const data = require("@react-native-community/cli-tools");
-  _cliTools = function () {
-    return data;
-  };
-  return data;
-}
-var _adb = _interopRequireDefault(require("./adb"));
-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
-function tryInstallAppOnDevice(args, adbPath, device, androidProject, selectedTask) {
-  try {
-    var _variantFromSelectedT, _variantFromSelectedT2;
-    // "app" is usually the default value for Android apps with only 1 app
-    const {
-      appName,
-      sourceDir
-    } = androidProject;
-    const defaultVariant = (args.mode || 'debug').toLowerCase();
-
-    // handle if selected task from interactive mode includes build flavour as well, eg. installProductionDebug should create ['production','debug'] array
-    const variantFromSelectedTask = selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.replace('install', '').split(/(?=[A-Z])/);
-
-    // create path to output file, eg. `production/debug`
-    const variantPath = (variantFromSelectedTask === null || variantFromSelectedTask === void 0 ? void 0 : (_variantFromSelectedT = variantFromSelectedTask.join('/')) === null || _variantFromSelectedT === void 0 ? void 0 : _variantFromSelectedT.toLowerCase()) ?? defaultVariant;
-    // create output file name, eg. `production-debug`
-    const variantAppName = (variantFromSelectedTask === null || variantFromSelectedTask === void 0 ? void 0 : (_variantFromSelectedT2 = variantFromSelectedTask.join('-')) === null || _variantFromSelectedT2 === void 0 ? void 0 : _variantFromSelectedT2.toLowerCase()) ?? defaultVariant;
-    let pathToApk;
-    if (!args.binaryPath) {
-      const buildDirectory = `${sourceDir}/${appName}/build/outputs/apk/${variantPath}`;
-      const apkFile = getInstallApkName(appName, adbPath, variantAppName, device, buildDirectory);
-      pathToApk = `${buildDirectory}/${apkFile}`;
-    } else {
-      pathToApk = args.binaryPath;
-    }
-    const installArgs = ['-s', device, 'install', '-r', '-d'];
-    if (args.user !== undefined) {
-      installArgs.push('--user', `${args.user}`);
-    }
-    const adbArgs = [...installArgs, pathToApk];
-    _cliTools().logger.info(`Installing the app on the device "${device}"...`);
-    _cliTools().logger.debug(`Running command "cd android && adb ${adbArgs.join(' ')}"`);
-    _execa().default.sync(adbPath, adbArgs, {
-      stdio: 'inherit'
-    });
-  } catch (error) {
-    throw new (_cliTools().CLIError)('Failed to install the app on the device.', error);
-  }
-}
-function getInstallApkName(appName, adbPath, variant, device, buildDirectory) {
-  const availableCPUs = _adb.default.getAvailableCPUs(adbPath, device);
-
-  // check if there is an apk file like app-armeabi-v7a-debug.apk
-  for (const availableCPU of availableCPUs.concat('universal')) {
-    const apkName = `${appName}-${availableCPU}-${variant}.apk`;
-    if (_fs().default.existsSync(`${buildDirectory}/${apkName}`)) {
-      return apkName;
-    }
-  }
-
-  // check if there is a default file like app-debug.apk
-  const apkName = `${appName}-${variant}.apk`;
-  if (_fs().default.existsSync(`${buildDirectory}/${apkName}`)) {
-    return apkName;
-  }
-  throw new Error('Could not find the correct install APK file.');
-}
-var _default = tryInstallAppOnDevice;
-exports.default = _default;
-
-//# sourceMappingURL=tryInstallAppOnDevice.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryInstallAppOnDevice.js.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryInstallAppOnDevice.js.map
deleted file mode 100644
index 7227311..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryInstallAppOnDevice.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["tryInstallAppOnDevice","args","adbPath","device","androidProject","selectedTask","appName","sourceDir","defaultVariant","mode","toLowerCase","variantFromSelectedTask","replace","split","variantPath","join","variantAppName","pathToApk","binaryPath","buildDirectory","apkFile","getInstallApkName","installArgs","user","undefined","push","adbArgs","logger","info","debug","execa","sync","stdio","error","CLIError","variant","availableCPUs","adb","getAvailableCPUs","availableCPU","concat","apkName","fs","existsSync","Error"],"sources":["../../../src/commands/runAndroid/tryInstallAppOnDevice.ts"],"sourcesContent":["import execa from 'execa';\nimport fs from 'fs';\nimport {logger, CLIError} from '@react-native-community/cli-tools';\n\nimport adb from './adb';\nimport type {AndroidProject, Flags} from './';\n\nfunction tryInstallAppOnDevice(\n  args: Flags,\n  adbPath: string,\n  device: string,\n  androidProject: AndroidProject,\n  selectedTask?: string,\n) {\n  try {\n    // \"app\" is usually the default value for Android apps with only 1 app\n    const {appName, sourceDir} = androidProject;\n\n    const defaultVariant = (args.mode || 'debug').toLowerCase();\n\n    // handle if selected task from interactive mode includes build flavour as well, eg. installProductionDebug should create ['production','debug'] array\n    const variantFromSelectedTask = selectedTask\n      ?.replace('install', '')\n      .split(/(?=[A-Z])/);\n\n    // create path to output file, eg. `production/debug`\n    const variantPath =\n      variantFromSelectedTask?.join('/')?.toLowerCase() ?? defaultVariant;\n    // create output file name, eg. `production-debug`\n    const variantAppName =\n      variantFromSelectedTask?.join('-')?.toLowerCase() ?? defaultVariant;\n\n    let pathToApk;\n    if (!args.binaryPath) {\n      const buildDirectory = `${sourceDir}/${appName}/build/outputs/apk/${variantPath}`;\n      const apkFile = getInstallApkName(\n        appName,\n        adbPath,\n        variantAppName,\n        device,\n        buildDirectory,\n      );\n      pathToApk = `${buildDirectory}/${apkFile}`;\n    } else {\n      pathToApk = args.binaryPath;\n    }\n\n    const installArgs = ['-s', device, 'install', '-r', '-d'];\n    if (args.user !== undefined) {\n      installArgs.push('--user', `${args.user}`);\n    }\n    const adbArgs = [...installArgs, pathToApk];\n    logger.info(`Installing the app on the device \"${device}\"...`);\n    logger.debug(`Running command \"cd android && adb ${adbArgs.join(' ')}\"`);\n    execa.sync(adbPath, adbArgs, {stdio: 'inherit'});\n  } catch (error) {\n    throw new CLIError(\n      'Failed to install the app on the device.',\n      error as any,\n    );\n  }\n}\n\nfunction getInstallApkName(\n  appName: string,\n  adbPath: string,\n  variant: string,\n  device: string,\n  buildDirectory: string,\n) {\n  const availableCPUs = adb.getAvailableCPUs(adbPath, device);\n\n  // check if there is an apk file like app-armeabi-v7a-debug.apk\n  for (const availableCPU of availableCPUs.concat('universal')) {\n    const apkName = `${appName}-${availableCPU}-${variant}.apk`;\n    if (fs.existsSync(`${buildDirectory}/${apkName}`)) {\n      return apkName;\n    }\n  }\n\n  // check if there is a default file like app-debug.apk\n  const apkName = `${appName}-${variant}.apk`;\n  if (fs.existsSync(`${buildDirectory}/${apkName}`)) {\n    return apkName;\n  }\n\n  throw new Error('Could not find the correct install APK file.');\n}\n\nexport default tryInstallAppOnDevice;\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchAppOnDevice.d.ts b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchAppOnDevice.d.ts
index 7c1426c..73cc006 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchAppOnDevice.d.ts
+++ b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchAppOnDevice.d.ts
@@ -5,7 +5,6 @@
  * LICENSE file in the root directory of this source tree.
  *
  */
-import { AndroidProject, Flags } from '.';
-declare function tryLaunchAppOnDevice(device: string | void, androidProject: AndroidProject, adbPath: string, args: Flags): void;
+declare function tryLaunchAppOnDevice(device: string | void, packageNameWithSuffix: string, packageName: string, adbPath: string, mainActivity: string): void;
 export default tryLaunchAppOnDevice;
 //# sourceMappingURL=tryLaunchAppOnDevice.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchAppOnDevice.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchAppOnDevice.d.ts.map
index 2a2fcb6..c2dce65 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchAppOnDevice.d.ts.map
+++ b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchAppOnDevice.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"tryLaunchAppOnDevice.d.ts","sourceRoot":"","sources":["../../../src/commands/runAndroid/tryLaunchAppOnDevice.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,EAAC,cAAc,EAAE,KAAK,EAAC,MAAM,GAAG,CAAC;AAGxC,iBAAS,oBAAoB,CAC3B,MAAM,EAAE,MAAM,GAAG,IAAI,EACrB,cAAc,EAAE,cAAc,EAC9B,OAAO,EAAE,MAAM,EACf,IAAI,EAAE,KAAK,QAyCZ;AAED,eAAe,oBAAoB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"tryLaunchAppOnDevice.d.ts","sourceRoot":"","sources":["../../../src/commands/runAndroid/tryLaunchAppOnDevice.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAKH,iBAAS,oBAAoB,CAC3B,MAAM,EAAE,MAAM,GAAG,IAAI,EACrB,qBAAqB,EAAE,MAAM,EAC7B,WAAW,EAAE,MAAM,EACnB,OAAO,EAAE,MAAM,EACf,YAAY,EAAE,MAAM,QAqBrB;AAED,eAAe,oBAAoB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchAppOnDevice.js b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchAppOnDevice.js
index 29eee23..8661b13 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchAppOnDevice.js
+++ b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchAppOnDevice.js
@@ -4,21 +4,27 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
-function _execa() {
-  const data = _interopRequireDefault(require("execa"));
-  _execa = function () {
+
+function _child_process() {
+  const data = require("child_process");
+
+  _child_process = function () {
     return data;
   };
+
   return data;
 }
+
 function _cliTools() {
   const data = require("@react-native-community/cli-tools");
+
   _cliTools = function () {
     return data;
   };
+
   return data;
 }
-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
 /**
  * Copyright (c) Facebook, Inc. and its affiliates.
  *
@@ -26,37 +32,27 @@ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { de
  * LICENSE file in the root directory of this source tree.
  *
  */
-
-function tryLaunchAppOnDevice(device, androidProject, adbPath, args) {
-  const {
-    appId,
-    appIdSuffix
-  } = args;
-  const {
-    packageName,
-    mainActivity,
-    applicationId
-  } = androidProject;
-  const applicationIdWithSuffix = [appId || applicationId, appIdSuffix].filter(Boolean).join('.');
-  const activityToLaunch = mainActivity.startsWith(packageName) ? mainActivity : mainActivity.startsWith('.') ? [packageName, mainActivity].join('') : [packageName, mainActivity].filter(Boolean).join('.');
+function tryLaunchAppOnDevice(device, packageNameWithSuffix, packageName, adbPath, mainActivity) {
   try {
-    // Here we're using the same flags as Android Studio to launch the app
-    const adbArgs = ['shell', 'am', 'start', '-n', `${applicationIdWithSuffix}/${activityToLaunch}`, '-a', 'android.intent.action.MAIN', '-c', 'android.intent.category.LAUNCHER'];
+    const adbArgs = ['shell', 'am', 'start', '-n', `${packageNameWithSuffix}/${packageName}.${mainActivity}`];
+
     if (device) {
       adbArgs.unshift('-s', device);
+
       _cliTools().logger.info(`Starting the app on "${device}"...`);
     } else {
       _cliTools().logger.info('Starting the app...');
     }
+
     _cliTools().logger.debug(`Running command "${adbPath} ${adbArgs.join(' ')}"`);
-    _execa().default.sync(adbPath, adbArgs, {
+
+    (0, _child_process().spawnSync)(adbPath, adbArgs, {
       stdio: 'inherit'
     });
   } catch (error) {
     throw new (_cliTools().CLIError)('Failed to start the app.', error);
   }
 }
+
 var _default = tryLaunchAppOnDevice;
 exports.default = _default;
\ No newline at end of file
-
-//# sourceMappingURL=tryLaunchAppOnDevice.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchAppOnDevice.js.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchAppOnDevice.js.map
deleted file mode 100644
index d6034cd..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchAppOnDevice.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["tryLaunchAppOnDevice","device","androidProject","adbPath","args","appId","appIdSuffix","packageName","mainActivity","applicationId","applicationIdWithSuffix","filter","Boolean","join","activityToLaunch","startsWith","adbArgs","unshift","logger","info","debug","execa","sync","stdio","error","CLIError"],"sources":["../../../src/commands/runAndroid/tryLaunchAppOnDevice.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport execa from 'execa';\nimport {AndroidProject, Flags} from '.';\nimport {logger, CLIError} from '@react-native-community/cli-tools';\n\nfunction tryLaunchAppOnDevice(\n  device: string | void,\n  androidProject: AndroidProject,\n  adbPath: string,\n  args: Flags,\n) {\n  const {appId, appIdSuffix} = args;\n\n  const {packageName, mainActivity, applicationId} = androidProject;\n\n  const applicationIdWithSuffix = [appId || applicationId, appIdSuffix]\n    .filter(Boolean)\n    .join('.');\n\n  const activityToLaunch = mainActivity.startsWith(packageName)\n    ? mainActivity\n    : mainActivity.startsWith('.')\n    ? [packageName, mainActivity].join('')\n    : [packageName, mainActivity].filter(Boolean).join('.');\n\n  try {\n    // Here we're using the same flags as Android Studio to launch the app\n    const adbArgs = [\n      'shell',\n      'am',\n      'start',\n      '-n',\n      `${applicationIdWithSuffix}/${activityToLaunch}`,\n      '-a',\n      'android.intent.action.MAIN',\n      '-c',\n      'android.intent.category.LAUNCHER',\n    ];\n\n    if (device) {\n      adbArgs.unshift('-s', device);\n      logger.info(`Starting the app on \"${device}\"...`);\n    } else {\n      logger.info('Starting the app...');\n    }\n    logger.debug(`Running command \"${adbPath} ${adbArgs.join(' ')}\"`);\n    execa.sync(adbPath, adbArgs, {stdio: 'inherit'});\n  } catch (error) {\n    throw new CLIError('Failed to start the app.', error as any);\n  }\n}\n\nexport default tryLaunchAppOnDevice;\n"],"mappings":";;;;;;AAQA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAAmE;AAVnE;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA,SAASA,oBAAoB,CAC3BC,MAAqB,EACrBC,cAA8B,EAC9BC,OAAe,EACfC,IAAW,EACX;EACA,MAAM;IAACC,KAAK;IAAEC;EAAW,CAAC,GAAGF,IAAI;EAEjC,MAAM;IAACG,WAAW;IAAEC,YAAY;IAAEC;EAAa,CAAC,GAAGP,cAAc;EAEjE,MAAMQ,uBAAuB,GAAG,CAACL,KAAK,IAAII,aAAa,EAAEH,WAAW,CAAC,CAClEK,MAAM,CAACC,OAAO,CAAC,CACfC,IAAI,CAAC,GAAG,CAAC;EAEZ,MAAMC,gBAAgB,GAAGN,YAAY,CAACO,UAAU,CAACR,WAAW,CAAC,GACzDC,YAAY,GACZA,YAAY,CAACO,UAAU,CAAC,GAAG,CAAC,GAC5B,CAACR,WAAW,EAAEC,YAAY,CAAC,CAACK,IAAI,CAAC,EAAE,CAAC,GACpC,CAACN,WAAW,EAAEC,YAAY,CAAC,CAACG,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EAEzD,IAAI;IACF;IACA,MAAMG,OAAO,GAAG,CACd,OAAO,EACP,IAAI,EACJ,OAAO,EACP,IAAI,EACH,GAAEN,uBAAwB,IAAGI,gBAAiB,EAAC,EAChD,IAAI,EACJ,4BAA4B,EAC5B,IAAI,EACJ,kCAAkC,CACnC;IAED,IAAIb,MAAM,EAAE;MACVe,OAAO,CAACC,OAAO,CAAC,IAAI,EAAEhB,MAAM,CAAC;MAC7BiB,kBAAM,CAACC,IAAI,CAAE,wBAAuBlB,MAAO,MAAK,CAAC;IACnD,CAAC,MAAM;MACLiB,kBAAM,CAACC,IAAI,CAAC,qBAAqB,CAAC;IACpC;IACAD,kBAAM,CAACE,KAAK,CAAE,oBAAmBjB,OAAQ,IAAGa,OAAO,CAACH,IAAI,CAAC,GAAG,CAAE,GAAE,CAAC;IACjEQ,gBAAK,CAACC,IAAI,CAACnB,OAAO,EAAEa,OAAO,EAAE;MAACO,KAAK,EAAE;IAAS,CAAC,CAAC;EAClD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,KAAIC,oBAAQ,EAAC,0BAA0B,EAAED,KAAK,CAAQ;EAC9D;AACF;AAAC,eAEcxB,oBAAoB;AAAA"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchEmulator.d.ts b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchEmulator.d.ts
index cde6b42..b969754 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchEmulator.d.ts
+++ b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchEmulator.d.ts
@@ -1,5 +1,4 @@
-export declare const getEmulators: () => string[];
-export default function tryLaunchEmulator(adbPath: string, emulatorName?: string, port?: number): Promise<{
+export default function tryLaunchEmulator(adbPath: string): Promise<{
     success: boolean;
     error?: string;
 }>;
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchEmulator.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchEmulator.d.ts.map
index 5eb1882..d372a7d 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchEmulator.d.ts.map
+++ b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchEmulator.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"tryLaunchEmulator.d.ts","sourceRoot":"","sources":["../../../src/commands/runAndroid/tryLaunchEmulator.ts"],"names":[],"mappings":"AAQA,eAAO,MAAM,YAAY,gBAaxB,CAAC;AA2DF,wBAA8B,iBAAiB,CAC7C,OAAO,EAAE,MAAM,EACf,YAAY,CAAC,EAAE,MAAM,EACrB,IAAI,CAAC,EAAE,MAAM,GACZ,OAAO,CAAC;IAAC,OAAO,EAAE,OAAO,CAAC;IAAC,KAAK,CAAC,EAAE,MAAM,CAAA;CAAC,CAAC,CAc7C"}
\ No newline at end of file
+{"version":3,"file":"tryLaunchEmulator.d.ts","sourceRoot":"","sources":["../../../src/commands/runAndroid/tryLaunchEmulator.ts"],"names":[],"mappings":"AAuDA,wBAA8B,iBAAiB,CAC7C,OAAO,EAAE,MAAM,GACd,OAAO,CAAC;IAAC,OAAO,EAAE,OAAO,CAAC;IAAC,KAAK,CAAC,EAAE,MAAM,CAAA;CAAC,CAAC,CAc7C"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchEmulator.js b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchEmulator.js
index ced43ba..17b5a72 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchEmulator.js
+++ b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchEmulator.js
@@ -4,95 +4,88 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = tryLaunchEmulator;
-exports.getEmulators = void 0;
-function _os() {
-  const data = _interopRequireDefault(require("os"));
-  _os = function () {
-    return data;
-  };
-  return data;
-}
+
 function _execa() {
   const data = _interopRequireDefault(require("execa"));
+
   _execa = function () {
     return data;
   };
+
   return data;
 }
+
 var _adb = _interopRequireDefault(require("./adb"));
+
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
 const emulatorCommand = process.env.ANDROID_HOME ? `${process.env.ANDROID_HOME}/emulator/emulator` : 'emulator';
+
 const getEmulators = () => {
   try {
     const emulatorsOutput = _execa().default.sync(emulatorCommand, ['-list-avds']).stdout;
-    return emulatorsOutput.split(_os().default.EOL).filter(name => name !== '' && !name.includes(' '));
-    // The `name` is AVD ID which is expected to not contain whitespace.
-    // The `emulator` command, however, can occasionally return verbose
-    // information about crashes or similar. Hence filtering out anything
-    // that has basic whitespace.
-  } catch {
+
+    return emulatorsOutput.split('\n').filter(name => name !== '');
+  } catch (_unused) {
     return [];
   }
 };
-exports.getEmulators = getEmulators;
-const launchEmulator = async (emulatorName, adbPath, port) => {
-  const manualCommand = `${emulatorCommand} @${emulatorName}`;
-  const cp = (0, _execa().default)(emulatorCommand, port ? [`@${emulatorName}`, '-port', `${port}`] : [`@${emulatorName}`], {
-    detached: true,
-    stdio: 'ignore'
-  });
-  cp.unref();
-  const timeout = 30;
+
+const launchEmulator = async (emulatorName, adbPath) => {
   return new Promise((resolve, reject) => {
-    const bootCheckInterval = setInterval(async () => {
-      const devices = _adb.default.getDevices(adbPath);
-      const connected = port ? devices.find(d => d.includes(`${port}`)) : devices.length > 0;
-      if (connected) {
+    const cp = (0, _execa().default)(emulatorCommand, [`@${emulatorName}`], {
+      detached: true,
+      stdio: 'ignore'
+    });
+    cp.unref();
+    const timeout = 30; // Reject command after timeout
+
+    const rejectTimeout = setTimeout(() => {
+      cleanup();
+      reject(`Could not start emulator within ${timeout} seconds.`);
+    }, timeout * 1000);
+    const bootCheckInterval = setInterval(() => {
+      if (_adb.default.getDevices(adbPath).length > 0) {
         cleanup();
-        resolve(true);
+        resolve();
       }
     }, 1000);
 
-    // Reject command after timeout
-    const rejectTimeout = setTimeout(() => {
-      stopWaitingAndReject(`It took too long to start and connect with Android emulator: ${emulatorName}. You can try starting the emulator manually from the terminal with: ${manualCommand}`);
-    }, timeout * 1000);
     const cleanup = () => {
       clearTimeout(rejectTimeout);
       clearInterval(bootCheckInterval);
     };
-    const stopWaitingAndReject = message => {
-      cleanup();
-      reject(new Error(message));
-    };
-    cp.on('error', ({
-      message
-    }) => stopWaitingAndReject(message));
+
     cp.on('exit', () => {
-      stopWaitingAndReject(`The emulator (${emulatorName}) quit before it finished opening. You can try starting the emulator manually from the terminal with: ${manualCommand}`);
+      cleanup();
+      reject('Emulator exited before boot.');
+    });
+    cp.on('error', error => {
+      cleanup();
+      reject(error.message);
     });
   });
 };
-async function tryLaunchEmulator(adbPath, emulatorName, port) {
+
+async function tryLaunchEmulator(adbPath) {
   const emulators = getEmulators();
+
   if (emulators.length > 0) {
     try {
-      await launchEmulator(emulatorName ?? emulators[0], adbPath, port);
+      await launchEmulator(emulators[0], adbPath);
       return {
         success: true
       };
     } catch (error) {
-      var _ref;
       return {
         success: false,
-        error: (_ref = error) === null || _ref === void 0 ? void 0 : _ref.message
+        error
       };
     }
   }
+
   return {
     success: false,
     error: 'No emulators found as an output of `emulator -list-avds`'
   };
 }
\ No newline at end of file
-
-//# sourceMappingURL=tryLaunchEmulator.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchEmulator.js.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchEmulator.js.map
deleted file mode 100644
index c93e1ce..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchEmulator.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["emulatorCommand","process","env","ANDROID_HOME","getEmulators","emulatorsOutput","execa","sync","stdout","split","os","EOL","filter","name","includes","launchEmulator","emulatorName","adbPath","port","manualCommand","cp","detached","stdio","unref","timeout","Promise","resolve","reject","bootCheckInterval","setInterval","devices","adb","getDevices","connected","find","d","length","cleanup","rejectTimeout","setTimeout","stopWaitingAndReject","clearTimeout","clearInterval","message","Error","on","tryLaunchEmulator","emulators","success","error"],"sources":["../../../src/commands/runAndroid/tryLaunchEmulator.ts"],"sourcesContent":["import os from 'os';\nimport execa from 'execa';\nimport adb from './adb';\n\nconst emulatorCommand = process.env.ANDROID_HOME\n  ? `${process.env.ANDROID_HOME}/emulator/emulator`\n  : 'emulator';\n\nexport const getEmulators = () => {\n  try {\n    const emulatorsOutput = execa.sync(emulatorCommand, ['-list-avds']).stdout;\n    return emulatorsOutput\n      .split(os.EOL)\n      .filter((name) => name !== '' && !name.includes(' '));\n    // The `name` is AVD ID which is expected to not contain whitespace.\n    // The `emulator` command, however, can occasionally return verbose\n    // information about crashes or similar. Hence filtering out anything\n    // that has basic whitespace.\n  } catch {\n    return [];\n  }\n};\n\nconst launchEmulator = async (\n  emulatorName: string,\n  adbPath: string,\n  port?: number,\n): Promise<boolean> => {\n  const manualCommand = `${emulatorCommand} @${emulatorName}`;\n\n  const cp = execa(\n    emulatorCommand,\n    port ? [`@${emulatorName}`, '-port', `${port}`] : [`@${emulatorName}`],\n    {\n      detached: true,\n      stdio: 'ignore',\n    },\n  );\n  cp.unref();\n  const timeout = 30;\n\n  return new Promise<boolean>((resolve, reject) => {\n    const bootCheckInterval = setInterval(async () => {\n      const devices = adb.getDevices(adbPath);\n      const connected = port\n        ? devices.find((d) => d.includes(`${port}`))\n        : devices.length > 0;\n      if (connected) {\n        cleanup();\n        resolve(true);\n      }\n    }, 1000);\n\n    // Reject command after timeout\n    const rejectTimeout = setTimeout(() => {\n      stopWaitingAndReject(\n        `It took too long to start and connect with Android emulator: ${emulatorName}. You can try starting the emulator manually from the terminal with: ${manualCommand}`,\n      );\n    }, timeout * 1000);\n\n    const cleanup = () => {\n      clearTimeout(rejectTimeout);\n      clearInterval(bootCheckInterval);\n    };\n\n    const stopWaitingAndReject = (message: string) => {\n      cleanup();\n      reject(new Error(message));\n    };\n\n    cp.on('error', ({message}) => stopWaitingAndReject(message));\n\n    cp.on('exit', () => {\n      stopWaitingAndReject(\n        `The emulator (${emulatorName}) quit before it finished opening. You can try starting the emulator manually from the terminal with: ${manualCommand}`,\n      );\n    });\n  });\n};\n\nexport default async function tryLaunchEmulator(\n  adbPath: string,\n  emulatorName?: string,\n  port?: number,\n): Promise<{success: boolean; error?: string}> {\n  const emulators = getEmulators();\n  if (emulators.length > 0) {\n    try {\n      await launchEmulator(emulatorName ?? emulators[0], adbPath, port);\n      return {success: true};\n    } catch (error) {\n      return {success: false, error: (error as any)?.message};\n    }\n  }\n  return {\n    success: false,\n    error: 'No emulators found as an output of `emulator -list-avds`',\n  };\n}\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryRunAdbReverse.js b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryRunAdbReverse.js
index e198953..a083c66 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryRunAdbReverse.js
+++ b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryRunAdbReverse.js
@@ -4,22 +4,31 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
+
 function _child_process() {
   const data = require("child_process");
+
   _child_process = function () {
     return data;
   };
+
   return data;
 }
+
 function _cliTools() {
   const data = require("@react-native-community/cli-tools");
+
   _cliTools = function () {
     return data;
   };
+
   return data;
 }
+
 var _getAdbPath = _interopRequireDefault(require("./getAdbPath"));
+
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
 /**
  * Copyright (c) Facebook, Inc. and its affiliates.
  *
@@ -27,19 +36,20 @@ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { de
  * LICENSE file in the root directory of this source tree.
  *
  */
-
 // Runs ADB reverse tcp:8081 tcp:8081 to allow loading the jsbundle from the packager
 function tryRunAdbReverse(packagerPort, device) {
   try {
     const adbPath = (0, _getAdbPath.default)();
-    const adbArgs = ['reverse', `tcp:${packagerPort}`, `tcp:${packagerPort}`];
+    const adbArgs = ['reverse', `tcp:${packagerPort}`, `tcp:${packagerPort}`]; // If a device is specified then tell adb to use it
 
-    // If a device is specified then tell adb to use it
     if (device) {
       adbArgs.unshift('-s', device);
     }
+
     _cliTools().logger.info('Connecting to the development server...');
+
     _cliTools().logger.debug(`Running command "${adbPath} ${adbArgs.join(' ')}"`);
+
     (0, _child_process().execFileSync)(adbPath, adbArgs, {
       stdio: 'inherit'
     });
@@ -47,7 +57,6 @@ function tryRunAdbReverse(packagerPort, device) {
     _cliTools().logger.warn(`Failed to connect to development server using "adb reverse": ${e.message}`);
   }
 }
+
 var _default = tryRunAdbReverse;
 exports.default = _default;
\ No newline at end of file
-
-//# sourceMappingURL=tryRunAdbReverse.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryRunAdbReverse.js.map b/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryRunAdbReverse.js.map
deleted file mode 100644
index 4f9d7ef..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryRunAdbReverse.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["tryRunAdbReverse","packagerPort","device","adbPath","getAdbPath","adbArgs","unshift","logger","info","debug","join","execFileSync","stdio","e","warn","message"],"sources":["../../../src/commands/runAndroid/tryRunAdbReverse.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport {execFileSync} from 'child_process';\nimport {logger} from '@react-native-community/cli-tools';\nimport getAdbPath from './getAdbPath';\n\n// Runs ADB reverse tcp:8081 tcp:8081 to allow loading the jsbundle from the packager\nfunction tryRunAdbReverse(\n  packagerPort: number | string,\n  device?: string | void,\n) {\n  try {\n    const adbPath = getAdbPath();\n    const adbArgs = ['reverse', `tcp:${packagerPort}`, `tcp:${packagerPort}`];\n\n    // If a device is specified then tell adb to use it\n    if (device) {\n      adbArgs.unshift('-s', device);\n    }\n\n    logger.info('Connecting to the development server...');\n    logger.debug(`Running command \"${adbPath} ${adbArgs.join(' ')}\"`);\n\n    execFileSync(adbPath, adbArgs, {stdio: 'inherit'});\n  } catch (e) {\n    logger.warn(\n      `Failed to connect to development server using \"adb reverse\": ${\n        (e as any).message\n      }`,\n    );\n  }\n}\n\nexport default tryRunAdbReverse;\n"],"mappings":";;;;;;AAQA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;AAAsC;AAVtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA,SAASA,gBAAgB,CACvBC,YAA6B,EAC7BC,MAAsB,EACtB;EACA,IAAI;IACF,MAAMC,OAAO,GAAG,IAAAC,mBAAU,GAAE;IAC5B,MAAMC,OAAO,GAAG,CAAC,SAAS,EAAG,OAAMJ,YAAa,EAAC,EAAG,OAAMA,YAAa,EAAC,CAAC;;IAEzE;IACA,IAAIC,MAAM,EAAE;MACVG,OAAO,CAACC,OAAO,CAAC,IAAI,EAAEJ,MAAM,CAAC;IAC/B;IAEAK,kBAAM,CAACC,IAAI,CAAC,yCAAyC,CAAC;IACtDD,kBAAM,CAACE,KAAK,CAAE,oBAAmBN,OAAQ,IAAGE,OAAO,CAACK,IAAI,CAAC,GAAG,CAAE,GAAE,CAAC;IAEjE,IAAAC,6BAAY,EAACR,OAAO,EAAEE,OAAO,EAAE;MAACO,KAAK,EAAE;IAAS,CAAC,CAAC;EACpD,CAAC,CAAC,OAAOC,CAAC,EAAE;IACVN,kBAAM,CAACO,IAAI,CACR,gEACED,CAAC,CAASE,OACZ,EAAC,CACH;EACH;AACF;AAAC,eAEcf,gBAAgB;AAAA"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/__fixtures__/android.d.ts b/node_modules/@react-native-community/cli-platform-android/build/config/__fixtures__/android.d.ts
index 89c5f19..25c0085 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/config/__fixtures__/android.d.ts
+++ b/node_modules/@react-native-community/cli-platform-android/build/config/__fixtures__/android.d.ts
@@ -6,7 +6,6 @@
  *
  */
 export declare const valid: {
-    'build.gradle': any;
     src: {
         'AndroidManifest.xml': any;
         main: {
@@ -22,7 +21,6 @@ export declare const valid: {
     };
 };
 export declare const validKotlin: {
-    'build.gradle': any;
     src: {
         'AndroidManifest.xml': any;
         main: {
@@ -37,15 +35,6 @@ export declare const validKotlin: {
         };
     };
 };
-export declare const validApp: {
-    'build.gradle': any;
-    app: {
-        'build.gradle': any;
-    };
-    src: {
-        'AndroidManifest.xml': any;
-    };
-};
 export declare const userConfigManifest: {
     src: {
         main: {
@@ -94,24 +83,4 @@ export declare const findPackagesClassNameKotlinValid: string[];
 export declare const findPackagesClassNameKotlinNotValid: string[];
 export declare const findPackagesClassNameJavaValid: string[];
 export declare const findPackagesClassNameJavaNotValid: string[];
-export declare const fewActivities: {
-    src: {
-        'AndroidManifest.xml': any;
-    };
-};
-export declare const className: {
-    src: {
-        'AndroidManifest.xml': any;
-    };
-};
-export declare const customFlavor: {
-    src: {
-        e2e: {
-            'AndroidManifest.xml': any;
-        };
-        main: {
-            'AndroidManifest.xml': any;
-        };
-    };
-};
 //# sourceMappingURL=android.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/__fixtures__/android.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/config/__fixtures__/android.d.ts.map
index f4eb404..06878ec 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/config/__fixtures__/android.d.ts.map
+++ b/node_modules/@react-native-community/cli-platform-android/build/config/__fixtures__/android.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"android.d.ts","sourceRoot":"","sources":["../../../src/config/__fixtures__/android.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAmEH,eAAO,MAAM,KAAK;;;;;;;;;;;;;;;CAAwD,CAAC;AAE3E,eAAO,MAAM,WAAW;;;;;;;;;;;;;;;CAAsD,CAAC;AAE/E,eAAO,MAAM,QAAQ;;;;;;;;CAAqC,CAAC;AAE3D,eAAO,MAAM,kBAAkB;;;;;;;;;;;;;;;;;CAqB9B,CAAC;AAEF,eAAO,MAAM,SAAS;;;;;;;;;;;CAWrB,CAAC;AAEF,eAAO,MAAM,SAAS;;;;;;;;;;;;;CAarB,CAAC;AAEF,eAAO,MAAM,gCAAgC,UAsE5C,CAAC;AAEF,eAAO,MAAM,mCAAmC,UAuB/C,CAAC;AAEF,eAAO,MAAM,8BAA8B,UA6C1C,CAAC;AAEF,eAAO,MAAM,iCAAiC,UAqB7C,CAAC;AAEF,eAAO,MAAM,aAAa;;;;CAIzB,CAAC;AAEF,eAAO,MAAM,SAAS;;;;CAIrB,CAAC;AAEF,eAAO,MAAM,YAAY;;;;;;;;;CASxB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"android.d.ts","sourceRoot":"","sources":["../../../src/config/__fixtures__/android.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAgCH,eAAO,MAAM,KAAK;;;;;;;;;;;;;;CAAkD,CAAC;AAErE,eAAO,MAAM,WAAW;;;;;;;;;;;;;;CAAgD,CAAC;AAEzE,eAAO,MAAM,kBAAkB;;;;;;;;;;;;;;;;;CAqB9B,CAAC;AAEF,eAAO,MAAM,SAAS;;;;;;;;;;;CAWrB,CAAC;AAEF,eAAO,MAAM,SAAS;;;;;;;;;;;;;CAarB,CAAC;AAEF,eAAO,MAAM,gCAAgC,UAkE5C,CAAC;AAEF,eAAO,MAAM,mCAAmC,UAuB/C,CAAC;AAEF,eAAO,MAAM,8BAA8B,UAwB1C,CAAC;AAEF,eAAO,MAAM,iCAAiC,UAqB7C,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/__fixtures__/projects.d.ts b/node_modules/@react-native-community/cli-platform-android/build/config/__fixtures__/projects.d.ts
index acc5ae3..a1506fe 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/config/__fixtures__/projects.d.ts
+++ b/node_modules/@react-native-community/cli-platform-android/build/config/__fixtures__/projects.d.ts
@@ -1,6 +1,5 @@
 export declare const flat: {
     android: {
-        'build.gradle': any;
         src: {
             'AndroidManifest.xml': any;
             main: {
@@ -19,7 +18,6 @@ export declare const flat: {
 export declare const nested: {
     android: {
         app: {
-            'build.gradle': any;
             src: {
                 'AndroidManifest.xml': any;
                 main: {
@@ -39,7 +37,6 @@ export declare const nested: {
 export declare const withExamples: {
     Examples: {
         android: {
-            'build.gradle': any;
             src: {
                 'AndroidManifest.xml': any;
                 main: {
@@ -56,7 +53,6 @@ export declare const withExamples: {
         };
     };
     android: {
-        'build.gradle': any;
         src: {
             'AndroidManifest.xml': any;
             main: {
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/__fixtures__/projects.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/config/__fixtures__/projects.d.ts.map
index 47ba177..6cf3d22 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/config/__fixtures__/projects.d.ts.map
+++ b/node_modules/@react-native-community/cli-platform-android/build/config/__fixtures__/projects.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"projects.d.ts","sourceRoot":"","sources":["../../../src/config/__fixtures__/projects.ts"],"names":[],"mappings":"AAEA,eAAO,MAAM,IAAI;;;;;;;;;;;;;;;;;CAEhB,CAAC;AAEF,eAAO,MAAM,MAAM;;;;;;;;;;;;;;;;;;;CAIlB,CAAC;AAEF,eAAO,MAAM,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAGxB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"projects.d.ts","sourceRoot":"","sources":["../../../src/config/__fixtures__/projects.ts"],"names":[],"mappings":"AAEA,eAAO,MAAM,IAAI;;;;;;;;;;;;;;;;CAEhB,CAAC;AAEF,eAAO,MAAM,MAAM;;;;;;;;;;;;;;;;;;CAIlB,CAAC;AAEF,eAAO,MAAM,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAGxB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/extractComponentDescriptors.d.ts b/node_modules/@react-native-community/cli-platform-android/build/config/extractComponentDescriptors.d.ts
deleted file mode 100644
index 011598f..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/extractComponentDescriptors.d.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-export declare function extractComponentDescriptors(contents: string): string | null;
-//# sourceMappingURL=extractComponentDescriptors.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/extractComponentDescriptors.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/config/extractComponentDescriptors.d.ts.map
deleted file mode 100644
index 5782bab..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/extractComponentDescriptors.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"extractComponentDescriptors.d.ts","sourceRoot":"","sources":["../../src/config/extractComponentDescriptors.ts"],"names":[],"mappings":"AAKA,wBAAgB,2BAA2B,CAAC,QAAQ,EAAE,MAAM,iBAM3D"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/extractComponentDescriptors.js b/node_modules/@react-native-community/cli-platform-android/build/config/extractComponentDescriptors.js
deleted file mode 100644
index 1782f58..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/extractComponentDescriptors.js
+++ /dev/null
@@ -1,18 +0,0 @@
-"use strict";
-
-Object.defineProperty(exports, "__esModule", {
-  value: true
-});
-exports.extractComponentDescriptors = extractComponentDescriptors;
-// TODO: avoid the regex and improve reliability by reading this data from codegen schema.json.
-// Need to find a way to run "generateNewArchitectureFiles" gradle task after each library's "generateCodegenSchemaFromJavaScript" task.
-const CODEGEN_NATIVE_COMPONENT_REGEX = /codegenNativeComponent(<.*>)?\s*\(\s*["'`](\w+)["'`](,?[\s\S]+interfaceOnly:\s*(\w+))?/m;
-function extractComponentDescriptors(contents) {
-  const match = contents.match(CODEGEN_NATIVE_COMPONENT_REGEX);
-  if (!((match === null || match === void 0 ? void 0 : match[4]) === 'true') && (match === null || match === void 0 ? void 0 : match[2])) {
-    return `${match[2]}ComponentDescriptor`;
-  }
-  return null;
-}
-
-//# sourceMappingURL=extractComponentDescriptors.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/extractComponentDescriptors.js.map b/node_modules/@react-native-community/cli-platform-android/build/config/extractComponentDescriptors.js.map
deleted file mode 100644
index 7e909e4..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/extractComponentDescriptors.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["CODEGEN_NATIVE_COMPONENT_REGEX","extractComponentDescriptors","contents","match"],"sources":["../../src/config/extractComponentDescriptors.ts"],"sourcesContent":["// TODO: avoid the regex and improve reliability by reading this data from codegen schema.json.\n// Need to find a way to run \"generateNewArchitectureFiles\" gradle task after each library's \"generateCodegenSchemaFromJavaScript\" task.\nconst CODEGEN_NATIVE_COMPONENT_REGEX =\n  /codegenNativeComponent(<.*>)?\\s*\\(\\s*[\"'`](\\w+)[\"'`](,?[\\s\\S]+interfaceOnly:\\s*(\\w+))?/m;\n\nexport function extractComponentDescriptors(contents: string) {\n  const match = contents.match(CODEGEN_NATIVE_COMPONENT_REGEX);\n  if (!(match?.[4] === 'true') && match?.[2]) {\n    return `${match[2]}ComponentDescriptor`;\n  }\n  return null;\n}\n"],"mappings":";;;;;;AAAA;AACA;AACA,MAAMA,8BAA8B,GAClC,yFAAyF;AAEpF,SAASC,2BAA2B,CAACC,QAAgB,EAAE;EAC5D,MAAMC,KAAK,GAAGD,QAAQ,CAACC,KAAK,CAACH,8BAA8B,CAAC;EAC5D,IAAI,EAAE,CAAAG,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAG,CAAC,CAAC,MAAK,MAAM,CAAC,KAAIA,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAG,CAAC,CAAC,GAAE;IAC1C,OAAQ,GAAEA,KAAK,CAAC,CAAC,CAAE,qBAAoB;EACzC;EACA,OAAO,IAAI;AACb"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findAndroidAppFolder.d.ts b/node_modules/@react-native-community/cli-platform-android/build/config/findAndroidAppFolder.d.ts
new file mode 100644
index 0000000..ae4b8d0
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/config/findAndroidAppFolder.d.ts
@@ -0,0 +1,9 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+export default function findAndroidAppFolder(folder: string): string | null;
+//# sourceMappingURL=findAndroidAppFolder.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findAndroidAppFolder.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/config/findAndroidAppFolder.d.ts.map
new file mode 100644
index 0000000..09efbba
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/config/findAndroidAppFolder.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"findAndroidAppFolder.d.ts","sourceRoot":"","sources":["../../src/config/findAndroidAppFolder.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAKH,MAAM,CAAC,OAAO,UAAU,oBAAoB,CAAC,MAAM,EAAE,MAAM,iBAa1D"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findAndroidDir.js b/node_modules/@react-native-community/cli-platform-android/build/config/findAndroidAppFolder.js
similarity index 64%
rename from node_modules/@react-native-community/cli-platform-android/build/config/findAndroidDir.js
rename to node_modules/@react-native-community/cli-platform-android/build/config/findAndroidAppFolder.js
index ea5854b..93d04ba 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/config/findAndroidDir.js
+++ b/node_modules/@react-native-community/cli-platform-android/build/config/findAndroidAppFolder.js
@@ -3,22 +3,30 @@
 Object.defineProperty(exports, "__esModule", {
   value: true
 });
-exports.default = findAndroidDir;
+exports.default = findAndroidAppFolder;
+
 function _fs() {
   const data = _interopRequireDefault(require("fs"));
+
   _fs = function () {
     return data;
   };
+
   return data;
 }
+
 function _path() {
   const data = _interopRequireDefault(require("path"));
+
   _path = function () {
     return data;
   };
+
   return data;
 }
+
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
 /**
  * Copyright (c) Facebook, Inc. and its affiliates.
  *
@@ -26,12 +34,18 @@ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { de
  * LICENSE file in the root directory of this source tree.
  *
  */
+function findAndroidAppFolder(folder) {
+  const flat = 'android';
+
+  const nested = _path().default.join('android', 'app');
+
+  if (_fs().default.existsSync(_path().default.join(folder, nested))) {
+    return nested;
+  }
 
-function findAndroidDir(root) {
-  if (_fs().default.existsSync(_path().default.join(root, 'android'))) {
-    return 'android';
+  if (_fs().default.existsSync(_path().default.join(folder, flat))) {
+    return flat;
   }
+
   return null;
 }
\ No newline at end of file
-
-//# sourceMappingURL=findAndroidDir.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findAndroidDir.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/config/findAndroidDir.d.ts.map
deleted file mode 100644
index c1104c2..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/findAndroidDir.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"findAndroidDir.d.ts","sourceRoot":"","sources":["../../src/config/findAndroidDir.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAKH,MAAM,CAAC,OAAO,UAAU,cAAc,CAAC,IAAI,EAAE,MAAM,oBAMlD"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findAndroidDir.js.map b/node_modules/@react-native-community/cli-platform-android/build/config/findAndroidDir.js.map
deleted file mode 100644
index d0f189b..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/findAndroidDir.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["findAndroidDir","root","fs","existsSync","path","join"],"sources":["../../src/config/findAndroidDir.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport fs from 'fs';\nimport path from 'path';\n\nexport default function findAndroidDir(root: string) {\n  if (fs.existsSync(path.join(root, 'android'))) {\n    return 'android';\n  }\n\n  return null;\n}\n"],"mappings":";;;;;;AAQA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAAwB;AATxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAKe,SAASA,cAAc,CAACC,IAAY,EAAE;EACnD,IAAIC,aAAE,CAACC,UAAU,CAACC,eAAI,CAACC,IAAI,CAACJ,IAAI,EAAE,SAAS,CAAC,CAAC,EAAE;IAC7C,OAAO,SAAS;EAClB;EAEA,OAAO,IAAI;AACb"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findBuildGradle.d.ts b/node_modules/@react-native-community/cli-platform-android/build/config/findBuildGradle.d.ts
deleted file mode 100644
index 7379cad..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/findBuildGradle.d.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-export declare function findBuildGradle(sourceDir: string, isLibrary: boolean): string | null;
-//# sourceMappingURL=findBuildGradle.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findBuildGradle.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/config/findBuildGradle.d.ts.map
deleted file mode 100644
index e04f27d..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/findBuildGradle.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"findBuildGradle.d.ts","sourceRoot":"","sources":["../../src/config/findBuildGradle.ts"],"names":[],"mappings":"AAGA,wBAAgB,eAAe,CAAC,SAAS,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,iBAiBpE"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findBuildGradle.js b/node_modules/@react-native-community/cli-platform-android/build/config/findBuildGradle.js
deleted file mode 100644
index 977d951..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/findBuildGradle.js
+++ /dev/null
@@ -1,34 +0,0 @@
-"use strict";
-
-Object.defineProperty(exports, "__esModule", {
-  value: true
-});
-exports.findBuildGradle = findBuildGradle;
-function _fs() {
-  const data = _interopRequireDefault(require("fs"));
-  _fs = function () {
-    return data;
-  };
-  return data;
-}
-function _path() {
-  const data = _interopRequireDefault(require("path"));
-  _path = function () {
-    return data;
-  };
-  return data;
-}
-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
-function findBuildGradle(sourceDir, isLibrary) {
-  const buildGradlePath = _path().default.join(sourceDir, isLibrary ? 'build.gradle' : 'app/build.gradle');
-  const buildGradleKtsPath = _path().default.join(sourceDir, isLibrary ? 'build.gradle.kts' : 'app/build.gradle.kts');
-  if (_fs().default.existsSync(buildGradlePath)) {
-    return buildGradlePath;
-  } else if (_fs().default.existsSync(buildGradleKtsPath)) {
-    return buildGradleKtsPath;
-  } else {
-    return null;
-  }
-}
-
-//# sourceMappingURL=findBuildGradle.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findBuildGradle.js.map b/node_modules/@react-native-community/cli-platform-android/build/config/findBuildGradle.js.map
deleted file mode 100644
index b450c5d..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/findBuildGradle.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["findBuildGradle","sourceDir","isLibrary","buildGradlePath","path","join","buildGradleKtsPath","fs","existsSync"],"sources":["../../src/config/findBuildGradle.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nexport function findBuildGradle(sourceDir: string, isLibrary: boolean) {\n  const buildGradlePath = path.join(\n    sourceDir,\n    isLibrary ? 'build.gradle' : 'app/build.gradle',\n  );\n  const buildGradleKtsPath = path.join(\n    sourceDir,\n    isLibrary ? 'build.gradle.kts' : 'app/build.gradle.kts',\n  );\n\n  if (fs.existsSync(buildGradlePath)) {\n    return buildGradlePath;\n  } else if (fs.existsSync(buildGradleKtsPath)) {\n    return buildGradleKtsPath;\n  } else {\n    return null;\n  }\n}\n"],"mappings":";;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAAwB;AAEjB,SAASA,eAAe,CAACC,SAAiB,EAAEC,SAAkB,EAAE;EACrE,MAAMC,eAAe,GAAGC,eAAI,CAACC,IAAI,CAC/BJ,SAAS,EACTC,SAAS,GAAG,cAAc,GAAG,kBAAkB,CAChD;EACD,MAAMI,kBAAkB,GAAGF,eAAI,CAACC,IAAI,CAClCJ,SAAS,EACTC,SAAS,GAAG,kBAAkB,GAAG,sBAAsB,CACxD;EAED,IAAIK,aAAE,CAACC,UAAU,CAACL,eAAe,CAAC,EAAE;IAClC,OAAOA,eAAe;EACxB,CAAC,MAAM,IAAII,aAAE,CAACC,UAAU,CAACF,kBAAkB,CAAC,EAAE;IAC5C,OAAOA,kBAAkB;EAC3B,CAAC,MAAM;IACL,OAAO,IAAI;EACb;AACF"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findComponentDescriptors.d.ts b/node_modules/@react-native-community/cli-platform-android/build/config/findComponentDescriptors.d.ts
deleted file mode 100644
index f2fdd6e..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/findComponentDescriptors.d.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-export declare function findComponentDescriptors(packageRoot: string): string[];
-//# sourceMappingURL=findComponentDescriptors.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findComponentDescriptors.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/config/findComponentDescriptors.d.ts.map
deleted file mode 100644
index 94daf86..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/findComponentDescriptors.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"findComponentDescriptors.d.ts","sourceRoot":"","sources":["../../src/config/findComponentDescriptors.ts"],"names":[],"mappings":"AAMA,wBAAgB,wBAAwB,CAAC,WAAW,EAAE,MAAM,YAgB3D"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findComponentDescriptors.js b/node_modules/@react-native-community/cli-platform-android/build/config/findComponentDescriptors.js
deleted file mode 100644
index 793cc82..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/findComponentDescriptors.js
+++ /dev/null
@@ -1,50 +0,0 @@
-"use strict";
-
-Object.defineProperty(exports, "__esModule", {
-  value: true
-});
-exports.findComponentDescriptors = findComponentDescriptors;
-function _fs() {
-  const data = _interopRequireDefault(require("fs"));
-  _fs = function () {
-    return data;
-  };
-  return data;
-}
-function _path() {
-  const data = _interopRequireDefault(require("path"));
-  _path = function () {
-    return data;
-  };
-  return data;
-}
-function _fastGlob() {
-  const data = _interopRequireDefault(require("fast-glob"));
-  _fastGlob = function () {
-    return data;
-  };
-  return data;
-}
-var _extractComponentDescriptors = require("./extractComponentDescriptors");
-function _cliTools() {
-  const data = require("@react-native-community/cli-tools");
-  _cliTools = function () {
-    return data;
-  };
-  return data;
-}
-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
-function findComponentDescriptors(packageRoot) {
-  const files = _fastGlob().default.sync('**/+(*.js|*.jsx|*.ts|*.tsx)', {
-    cwd: (0, _cliTools().unixifyPaths)(packageRoot),
-    onlyFiles: true,
-    ignore: ['**/node_modules/**']
-  });
-  const codegenComponent = files.map(filePath => _fs().default.readFileSync(_path().default.join(packageRoot, filePath), 'utf8')).map(_extractComponentDescriptors.extractComponentDescriptors).filter(Boolean);
-
-  // Filter out duplicates as it happens that libraries contain multiple outputs due to package publishing.
-  // TODO: consider using "codegenConfig" to avoid this.
-  return Array.from(new Set(codegenComponent));
-}
-
-//# sourceMappingURL=findComponentDescriptors.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findComponentDescriptors.js.map b/node_modules/@react-native-community/cli-platform-android/build/config/findComponentDescriptors.js.map
deleted file mode 100644
index 436c4a4..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/findComponentDescriptors.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["findComponentDescriptors","packageRoot","files","glob","sync","cwd","unixifyPaths","onlyFiles","ignore","codegenComponent","map","filePath","fs","readFileSync","path","join","extractComponentDescriptors","filter","Boolean","Array","from","Set"],"sources":["../../src/config/findComponentDescriptors.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport glob from 'fast-glob';\nimport {extractComponentDescriptors} from './extractComponentDescriptors';\nimport {unixifyPaths} from '@react-native-community/cli-tools';\n\nexport function findComponentDescriptors(packageRoot: string) {\n  const files = glob.sync('**/+(*.js|*.jsx|*.ts|*.tsx)', {\n    cwd: unixifyPaths(packageRoot),\n    onlyFiles: true,\n    ignore: ['**/node_modules/**'],\n  });\n  const codegenComponent = files\n    .map((filePath) =>\n      fs.readFileSync(path.join(packageRoot, filePath), 'utf8'),\n    )\n    .map(extractComponentDescriptors)\n    .filter(Boolean);\n\n  // Filter out duplicates as it happens that libraries contain multiple outputs due to package publishing.\n  // TODO: consider using \"codegenConfig\" to avoid this.\n  return Array.from(new Set(codegenComponent as string[]));\n}\n"],"mappings":";;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAA+D;AAExD,SAASA,wBAAwB,CAACC,WAAmB,EAAE;EAC5D,MAAMC,KAAK,GAAGC,mBAAI,CAACC,IAAI,CAAC,6BAA6B,EAAE;IACrDC,GAAG,EAAE,IAAAC,wBAAY,EAACL,WAAW,CAAC;IAC9BM,SAAS,EAAE,IAAI;IACfC,MAAM,EAAE,CAAC,oBAAoB;EAC/B,CAAC,CAAC;EACF,MAAMC,gBAAgB,GAAGP,KAAK,CAC3BQ,GAAG,CAAEC,QAAQ,IACZC,aAAE,CAACC,YAAY,CAACC,eAAI,CAACC,IAAI,CAACd,WAAW,EAAEU,QAAQ,CAAC,EAAE,MAAM,CAAC,CAC1D,CACAD,GAAG,CAACM,wDAA2B,CAAC,CAChCC,MAAM,CAACC,OAAO,CAAC;;EAElB;EACA;EACA,OAAOC,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAACZ,gBAAgB,CAAa,CAAC;AAC1D"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findLibraryName.d.ts b/node_modules/@react-native-community/cli-platform-android/build/config/findLibraryName.d.ts
deleted file mode 100644
index f46154a..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/findLibraryName.d.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-export declare function findLibraryName(root: string, sourceDir: string): any;
-//# sourceMappingURL=findLibraryName.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findLibraryName.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/config/findLibraryName.d.ts.map
deleted file mode 100644
index 6dac49b..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/findLibraryName.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"findLibraryName.d.ts","sourceRoot":"","sources":["../../src/config/findLibraryName.ts"],"names":[],"mappings":"AAGA,wBAAgB,eAAe,CAAC,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,OA8B9D"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findLibraryName.js b/node_modules/@react-native-community/cli-platform-android/build/config/findLibraryName.js
deleted file mode 100644
index ca4b670..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/findLibraryName.js
+++ /dev/null
@@ -1,53 +0,0 @@
-"use strict";
-
-Object.defineProperty(exports, "__esModule", {
-  value: true
-});
-exports.findLibraryName = findLibraryName;
-function _fs() {
-  const data = _interopRequireDefault(require("fs"));
-  _fs = function () {
-    return data;
-  };
-  return data;
-}
-function _path() {
-  const data = _interopRequireDefault(require("path"));
-  _path = function () {
-    return data;
-  };
-  return data;
-}
-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
-function findLibraryName(root, sourceDir) {
-  const packageJsonPath = _path().default.join(root, 'package.json');
-  const buildGradlePath = _path().default.join(sourceDir, 'build.gradle');
-  const buildGradleKtsPath = _path().default.join(sourceDir, 'build.gradle.kts');
-
-  // We first check if there is a codegenConfig.name inside the package.json file.
-  if (_fs().default.existsSync(packageJsonPath)) {
-    var _packageJson$codegenC;
-    const packageJson = JSON.parse(_fs().default.readFileSync(packageJsonPath, 'utf8'));
-    if ((_packageJson$codegenC = packageJson.codegenConfig) === null || _packageJson$codegenC === void 0 ? void 0 : _packageJson$codegenC.name) {
-      return packageJson.codegenConfig.name;
-    }
-  }
-
-  // If not, we check if the library specified it in the build.gradle file.
-  let buildGradleContents = '';
-  if (_fs().default.existsSync(buildGradlePath)) {
-    buildGradleContents = _fs().default.readFileSync(buildGradlePath, 'utf-8');
-  } else if (_fs().default.existsSync(buildGradleKtsPath)) {
-    buildGradleContents = _fs().default.readFileSync(buildGradleKtsPath, 'utf-8');
-  } else {
-    return undefined;
-  }
-  const match = buildGradleContents.match(/libraryName = ["'](.+)["']/);
-  if (match) {
-    return match[1];
-  } else {
-    return undefined;
-  }
-}
-
-//# sourceMappingURL=findLibraryName.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findLibraryName.js.map b/node_modules/@react-native-community/cli-platform-android/build/config/findLibraryName.js.map
deleted file mode 100644
index 44c9a16..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/findLibraryName.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["findLibraryName","root","sourceDir","packageJsonPath","path","join","buildGradlePath","buildGradleKtsPath","fs","existsSync","packageJson","JSON","parse","readFileSync","codegenConfig","name","buildGradleContents","undefined","match"],"sources":["../../src/config/findLibraryName.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nexport function findLibraryName(root: string, sourceDir: string) {\n  const packageJsonPath = path.join(root, 'package.json');\n  const buildGradlePath = path.join(sourceDir, 'build.gradle');\n  const buildGradleKtsPath = path.join(sourceDir, 'build.gradle.kts');\n\n  // We first check if there is a codegenConfig.name inside the package.json file.\n  if (fs.existsSync(packageJsonPath)) {\n    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n    if (packageJson.codegenConfig?.name) {\n      return packageJson.codegenConfig.name;\n    }\n  }\n\n  // If not, we check if the library specified it in the build.gradle file.\n  let buildGradleContents = '';\n  if (fs.existsSync(buildGradlePath)) {\n    buildGradleContents = fs.readFileSync(buildGradlePath, 'utf-8');\n  } else if (fs.existsSync(buildGradleKtsPath)) {\n    buildGradleContents = fs.readFileSync(buildGradleKtsPath, 'utf-8');\n  } else {\n    return undefined;\n  }\n\n  const match = buildGradleContents.match(/libraryName = [\"'](.+)[\"']/);\n\n  if (match) {\n    return match[1];\n  } else {\n    return undefined;\n  }\n}\n"],"mappings":";;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAAwB;AAEjB,SAASA,eAAe,CAACC,IAAY,EAAEC,SAAiB,EAAE;EAC/D,MAAMC,eAAe,GAAGC,eAAI,CAACC,IAAI,CAACJ,IAAI,EAAE,cAAc,CAAC;EACvD,MAAMK,eAAe,GAAGF,eAAI,CAACC,IAAI,CAACH,SAAS,EAAE,cAAc,CAAC;EAC5D,MAAMK,kBAAkB,GAAGH,eAAI,CAACC,IAAI,CAACH,SAAS,EAAE,kBAAkB,CAAC;;EAEnE;EACA,IAAIM,aAAE,CAACC,UAAU,CAACN,eAAe,CAAC,EAAE;IAAA;IAClC,MAAMO,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACJ,aAAE,CAACK,YAAY,CAACV,eAAe,EAAE,MAAM,CAAC,CAAC;IACxE,6BAAIO,WAAW,CAACI,aAAa,0DAAzB,sBAA2BC,IAAI,EAAE;MACnC,OAAOL,WAAW,CAACI,aAAa,CAACC,IAAI;IACvC;EACF;;EAEA;EACA,IAAIC,mBAAmB,GAAG,EAAE;EAC5B,IAAIR,aAAE,CAACC,UAAU,CAACH,eAAe,CAAC,EAAE;IAClCU,mBAAmB,GAAGR,aAAE,CAACK,YAAY,CAACP,eAAe,EAAE,OAAO,CAAC;EACjE,CAAC,MAAM,IAAIE,aAAE,CAACC,UAAU,CAACF,kBAAkB,CAAC,EAAE;IAC5CS,mBAAmB,GAAGR,aAAE,CAACK,YAAY,CAACN,kBAAkB,EAAE,OAAO,CAAC;EACpE,CAAC,MAAM;IACL,OAAOU,SAAS;EAClB;EAEA,MAAMC,KAAK,GAAGF,mBAAmB,CAACE,KAAK,CAAC,4BAA4B,CAAC;EAErE,IAAIA,KAAK,EAAE;IACT,OAAOA,KAAK,CAAC,CAAC,CAAC;EACjB,CAAC,MAAM;IACL,OAAOD,SAAS;EAClB;AACF"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findManifest.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/config/findManifest.d.ts.map
index 0b1257e..8b46f3f 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/config/findManifest.d.ts.map
+++ b/node_modules/@react-native-community/cli-platform-android/build/config/findManifest.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"findManifest.d.ts","sourceRoot":"","sources":["../../src/config/findManifest.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAMH,MAAM,CAAC,OAAO,UAAU,YAAY,CAAC,MAAM,EAAE,MAAM,iBA0BlD"}
\ No newline at end of file
+{"version":3,"file":"findManifest.d.ts","sourceRoot":"","sources":["../../src/config/findManifest.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAKH,MAAM,CAAC,OAAO,UAAU,YAAY,CAAC,MAAM,EAAE,MAAM,iBAalD"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findManifest.js b/node_modules/@react-native-community/cli-platform-android/build/config/findManifest.js
index 636c268..9420fa4 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/config/findManifest.js
+++ b/node_modules/@react-native-community/cli-platform-android/build/config/findManifest.js
@@ -4,28 +4,29 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = findManifest;
-function _fastGlob() {
-  const data = _interopRequireDefault(require("fast-glob"));
-  _fastGlob = function () {
+
+function _glob() {
+  const data = _interopRequireDefault(require("glob"));
+
+  _glob = function () {
     return data;
   };
+
   return data;
 }
+
 function _path() {
   const data = _interopRequireDefault(require("path"));
+
   _path = function () {
     return data;
   };
+
   return data;
 }
-function _cliTools() {
-  const data = require("@react-native-community/cli-tools");
-  _cliTools = function () {
-    return data;
-  };
-  return data;
-}
+
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
 /**
  * Copyright (c) Facebook, Inc. and its affiliates.
  *
@@ -33,20 +34,11 @@ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { de
  * LICENSE file in the root directory of this source tree.
  *
  */
-
 function findManifest(folder) {
-  let manifestPaths = _fastGlob().default.sync('**/AndroidManifest.xml', {
-    cwd: (0, _cliTools().unixifyPaths)(folder),
-    ignore: ['node_modules/**', '**/build/**', '**/debug/**', 'Examples/**', 'examples/**', '**/Pods/**', '**/sdks/hermes/android/**', '**/src/androidTest/**', '**/src/test/**']
-  });
-  if (manifestPaths.length > 1) {
-    // if we have more than one manifest, pick the one in the main folder if present
-    const mainManifest = manifestPaths.filter(manifestPath => manifestPath.includes('src/main/'));
-    if (mainManifest.length === 1) {
-      manifestPaths = mainManifest;
-    }
-  }
-  return manifestPaths[0] ? _path().default.join(folder, manifestPaths[0]) : null;
-}
+  const manifestPath = _glob().default.sync(_path().default.join('**', 'AndroidManifest.xml'), {
+    cwd: folder,
+    ignore: ['node_modules/**', '**/build/**', '**/debug/**', 'Examples/**', 'examples/**']
+  })[0];
 
-//# sourceMappingURL=findManifest.ts.map
\ No newline at end of file
+  return manifestPath ? _path().default.join(folder, manifestPath) : null;
+}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findManifest.js.map b/node_modules/@react-native-community/cli-platform-android/build/config/findManifest.js.map
deleted file mode 100644
index 73a5d57..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/findManifest.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["findManifest","folder","manifestPaths","glob","sync","cwd","unixifyPaths","ignore","length","mainManifest","filter","manifestPath","includes","path","join"],"sources":["../../src/config/findManifest.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport glob from 'fast-glob';\nimport path from 'path';\nimport {unixifyPaths} from '@react-native-community/cli-tools';\n\nexport default function findManifest(folder: string) {\n  let manifestPaths = glob.sync('**/AndroidManifest.xml', {\n    cwd: unixifyPaths(folder),\n    ignore: [\n      'node_modules/**',\n      '**/build/**',\n      '**/debug/**',\n      'Examples/**',\n      'examples/**',\n      '**/Pods/**',\n      '**/sdks/hermes/android/**',\n      '**/src/androidTest/**',\n      '**/src/test/**',\n    ],\n  });\n  if (manifestPaths.length > 1) {\n    // if we have more than one manifest, pick the one in the main folder if present\n    const mainManifest = manifestPaths.filter((manifestPath) =>\n      manifestPath.includes('src/main/'),\n    );\n    if (mainManifest.length === 1) {\n      manifestPaths = mainManifest;\n    }\n  }\n\n  return manifestPaths[0] ? path.join(folder, manifestPaths[0]) : null;\n}\n"],"mappings":";;;;;;AAQA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAA+D;AAV/D;AACA;AACA;AACA;AACA;AACA;AACA;;AAMe,SAASA,YAAY,CAACC,MAAc,EAAE;EACnD,IAAIC,aAAa,GAAGC,mBAAI,CAACC,IAAI,CAAC,wBAAwB,EAAE;IACtDC,GAAG,EAAE,IAAAC,wBAAY,EAACL,MAAM,CAAC;IACzBM,MAAM,EAAE,CACN,iBAAiB,EACjB,aAAa,EACb,aAAa,EACb,aAAa,EACb,aAAa,EACb,YAAY,EACZ,2BAA2B,EAC3B,uBAAuB,EACvB,gBAAgB;EAEpB,CAAC,CAAC;EACF,IAAIL,aAAa,CAACM,MAAM,GAAG,CAAC,EAAE;IAC5B;IACA,MAAMC,YAAY,GAAGP,aAAa,CAACQ,MAAM,CAAEC,YAAY,IACrDA,YAAY,CAACC,QAAQ,CAAC,WAAW,CAAC,CACnC;IACD,IAAIH,YAAY,CAACD,MAAM,KAAK,CAAC,EAAE;MAC7BN,aAAa,GAAGO,YAAY;IAC9B;EACF;EAEA,OAAOP,aAAa,CAAC,CAAC,CAAC,GAAGW,eAAI,CAACC,IAAI,CAACb,MAAM,EAAEC,aAAa,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;AACtE"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findPackageClassName.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/config/findPackageClassName.d.ts.map
index 748a106..ec27e95 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/config/findPackageClassName.d.ts.map
+++ b/node_modules/@react-native-community/cli-platform-android/build/config/findPackageClassName.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"findPackageClassName.d.ts","sourceRoot":"","sources":["../../src/config/findPackageClassName.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAOH,MAAM,CAAC,OAAO,UAAU,mBAAmB,CAAC,MAAM,EAAE,MAAM,iBAUzD;AAED,wBAAgB,cAAc,CAAC,IAAI,EAAE,MAAM,2BAa1C"}
\ No newline at end of file
+{"version":3,"file":"findPackageClassName.d.ts","sourceRoot":"","sources":["../../src/config/findPackageClassName.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAMH,MAAM,CAAC,OAAO,UAAU,mBAAmB,CAAC,MAAM,EAAE,MAAM,iBAUzD;AAED,wBAAgB,cAAc,CAAC,IAAI,EAAE,MAAM,2BAI1C"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findPackageClassName.js b/node_modules/@react-native-community/cli-platform-android/build/config/findPackageClassName.js
index a1d150a..7bc0962 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/config/findPackageClassName.js
+++ b/node_modules/@react-native-community/cli-platform-android/build/config/findPackageClassName.js
@@ -5,35 +5,39 @@ Object.defineProperty(exports, "__esModule", {
 });
 exports.default = getPackageClassName;
 exports.matchClassName = matchClassName;
+
 function _fs() {
   const data = _interopRequireDefault(require("fs"));
+
   _fs = function () {
     return data;
   };
+
   return data;
 }
-function _fastGlob() {
-  const data = _interopRequireDefault(require("fast-glob"));
-  _fastGlob = function () {
+
+function _glob() {
+  const data = _interopRequireDefault(require("glob"));
+
+  _glob = function () {
     return data;
   };
+
   return data;
 }
+
 function _path() {
   const data = _interopRequireDefault(require("path"));
+
   _path = function () {
     return data;
   };
+
   return data;
 }
-function _cliTools() {
-  const data = require("@react-native-community/cli-tools");
-  _cliTools = function () {
-    return data;
-  };
-  return data;
-}
+
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
 /**
  * Copyright (c) Facebook, Inc. and its affiliates.
  *
@@ -41,25 +45,16 @@ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { de
  * LICENSE file in the root directory of this source tree.
  *
  */
-
 function getPackageClassName(folder) {
-  const files = _fastGlob().default.sync('**/+(*.java|*.kt)', {
-    cwd: (0, _cliTools().unixifyPaths)(folder)
+  const files = _glob().default.sync('**/+(*.java|*.kt)', {
+    cwd: folder
   });
-  const packages = files.map(filePath => _fs().default.readFileSync(_path().default.join(folder, filePath), 'utf8')).map(matchClassName).filter(match => match);
 
-  // @ts-ignore
+  const packages = files.map(filePath => _fs().default.readFileSync(_path().default.join(folder, filePath), 'utf8')).map(matchClassName).filter(match => match); // @ts-ignore
+
   return packages.length ? packages[0][1] : null;
 }
+
 function matchClassName(file) {
-  const nativeModuleMatch = file.match(/class\s+(\w+[^(\s]*)[\s\w():]*(\s+implements\s+|:)[\s\w():,]*[^{]*ReactPackage/);
-  // We first check for implementation of ReactPackage to find native
-  // modules and then for subclasses of TurboReactPackage to find turbo modules.
-  if (nativeModuleMatch) {
-    return nativeModuleMatch;
-  } else {
-    return file.match(/class\s+(\w+[^(\s]*)[\s\w():]*(\s+extends\s+|:)[\s\w():,]*[^{]*TurboReactPackage/);
-  }
+  return file.match(/class\s+(\w+[^(\s]*)[\s\w():]*(\s+implements\s+|:)[\s\w():,]*[^{]*ReactPackage/);
 }
\ No newline at end of file
-
-//# sourceMappingURL=findPackageClassName.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findPackageClassName.js.map b/node_modules/@react-native-community/cli-platform-android/build/config/findPackageClassName.js.map
deleted file mode 100644
index 091268c..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/findPackageClassName.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["getPackageClassName","folder","files","glob","sync","cwd","unixifyPaths","packages","map","filePath","fs","readFileSync","path","join","matchClassName","filter","match","length","file","nativeModuleMatch"],"sources":["../../src/config/findPackageClassName.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport fs from 'fs';\nimport glob from 'fast-glob';\nimport path from 'path';\nimport {unixifyPaths} from '@react-native-community/cli-tools';\n\nexport default function getPackageClassName(folder: string) {\n  const files = glob.sync('**/+(*.java|*.kt)', {cwd: unixifyPaths(folder)});\n\n  const packages = files\n    .map((filePath) => fs.readFileSync(path.join(folder, filePath), 'utf8'))\n    .map(matchClassName)\n    .filter((match) => match);\n\n  // @ts-ignore\n  return packages.length ? packages[0][1] : null;\n}\n\nexport function matchClassName(file: string) {\n  const nativeModuleMatch = file.match(\n    /class\\s+(\\w+[^(\\s]*)[\\s\\w():]*(\\s+implements\\s+|:)[\\s\\w():,]*[^{]*ReactPackage/,\n  );\n  // We first check for implementation of ReactPackage to find native\n  // modules and then for subclasses of TurboReactPackage to find turbo modules.\n  if (nativeModuleMatch) {\n    return nativeModuleMatch;\n  } else {\n    return file.match(\n      /class\\s+(\\w+[^(\\s]*)[\\s\\w():]*(\\s+extends\\s+|:)[\\s\\w():,]*[^{]*TurboReactPackage/,\n    );\n  }\n}\n"],"mappings":";;;;;;;AAQA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAA+D;AAX/D;AACA;AACA;AACA;AACA;AACA;AACA;;AAOe,SAASA,mBAAmB,CAACC,MAAc,EAAE;EAC1D,MAAMC,KAAK,GAAGC,mBAAI,CAACC,IAAI,CAAC,mBAAmB,EAAE;IAACC,GAAG,EAAE,IAAAC,wBAAY,EAACL,MAAM;EAAC,CAAC,CAAC;EAEzE,MAAMM,QAAQ,GAAGL,KAAK,CACnBM,GAAG,CAAEC,QAAQ,IAAKC,aAAE,CAACC,YAAY,CAACC,eAAI,CAACC,IAAI,CAACZ,MAAM,EAAEQ,QAAQ,CAAC,EAAE,MAAM,CAAC,CAAC,CACvED,GAAG,CAACM,cAAc,CAAC,CACnBC,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAAC;;EAE3B;EACA,OAAOT,QAAQ,CAACU,MAAM,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;AAChD;AAEO,SAASO,cAAc,CAACI,IAAY,EAAE;EAC3C,MAAMC,iBAAiB,GAAGD,IAAI,CAACF,KAAK,CAClC,gFAAgF,CACjF;EACD;EACA;EACA,IAAIG,iBAAiB,EAAE;IACrB,OAAOA,iBAAiB;EAC1B,CAAC,MAAM;IACL,OAAOD,IAAI,CAACF,KAAK,CACf,kFAAkF,CACnF;EACH;AACF"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/getAndroidProject.d.ts b/node_modules/@react-native-community/cli-platform-android/build/config/getAndroidProject.d.ts
deleted file mode 100644
index 0ccb34c..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/getAndroidProject.d.ts
+++ /dev/null
@@ -1,13 +0,0 @@
-import { Config } from '@react-native-community/cli-types';
-export declare function getAndroidProject(config: Config): import("@react-native-community/cli-types").AndroidProjectConfig;
-/**
- * Get the package name/namespace of the running React Native app
- * @param manifestPath The path to the AndroidManifest.xml
- * @param buildGradlePath The path to the build.gradle[.kts] file.
- */
-export declare function getPackageName(manifestPath: string | null, buildGradlePath: string | null): string;
-export declare function parsePackageNameFromAndroidManifestFile(androidManifest: string): string | null;
-export declare function parseNamespaceFromBuildGradleFile(buildGradle: string): string | null;
-export declare function validatePackageName(packageName: string): boolean;
-export declare function parseApplicationIdFromBuildGradleFile(buildGradlePath: string): string | null;
-//# sourceMappingURL=getAndroidProject.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/getAndroidProject.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/config/getAndroidProject.d.ts.map
deleted file mode 100644
index 93f183a..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/getAndroidProject.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"getAndroidProject.d.ts","sourceRoot":"","sources":["../../src/config/getAndroidProject.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,MAAM,EAAC,MAAM,mCAAmC,CAAC;AAKzD,wBAAgB,iBAAiB,CAAC,MAAM,EAAE,MAAM,oEAW/C;AA4CD;;;;GAIG;AACH,wBAAgB,cAAc,CAC5B,YAAY,EAAE,MAAM,GAAG,IAAI,EAC3B,eAAe,EAAE,MAAM,GAAG,IAAI,UAa/B;AAED,wBAAgB,uCAAuC,CACrD,eAAe,EAAE,MAAM,iBAQxB;AAED,wBAAgB,iCAAiC,CAAC,WAAW,EAAE,MAAM,iBAQpE;AAGD,wBAAgB,mBAAmB,CAAC,WAAW,EAAE,MAAM,WAEtD;AAGD,wBAAgB,qCAAqC,CAAC,eAAe,EAAE,MAAM,iBAgB5E"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/getAndroidProject.js b/node_modules/@react-native-community/cli-platform-android/build/config/getAndroidProject.js
deleted file mode 100644
index 24355dd..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/getAndroidProject.js
+++ /dev/null
@@ -1,126 +0,0 @@
-"use strict";
-
-Object.defineProperty(exports, "__esModule", {
-  value: true
-});
-exports.getAndroidProject = getAndroidProject;
-exports.getPackageName = getPackageName;
-exports.parseApplicationIdFromBuildGradleFile = parseApplicationIdFromBuildGradleFile;
-exports.parseNamespaceFromBuildGradleFile = parseNamespaceFromBuildGradleFile;
-exports.parsePackageNameFromAndroidManifestFile = parsePackageNameFromAndroidManifestFile;
-exports.validatePackageName = validatePackageName;
-function _cliTools() {
-  const data = require("@react-native-community/cli-tools");
-  _cliTools = function () {
-    return data;
-  };
-  return data;
-}
-function _fs() {
-  const data = _interopRequireDefault(require("fs"));
-  _fs = function () {
-    return data;
-  };
-  return data;
-}
-function _chalk() {
-  const data = _interopRequireDefault(require("chalk"));
-  _chalk = function () {
-    return data;
-  };
-  return data;
-}
-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
-function getAndroidProject(config) {
-  const androidProject = config.project.android;
-  if (!androidProject) {
-    throw new (_cliTools().CLIError)(`
-      Android project not found. Are you sure this is a React Native project?
-      If your Android files are located in a non-standard location (e.g. not inside 'android' folder), consider setting
-      \`project.android.sourceDir\` option to point to a new location.
-    `);
-  }
-  return androidProject;
-}
-
-/**
- * Util function to discover the package name from either the Manifest file or the build.gradle file.
- * @param manifestPath The path to the AndroidManifest.xml
- * @param buildGradlePath The path to the build.gradle[.kts] file.
- */
-function discoverPackageName(manifestPath, buildGradlePath) {
-  if (manifestPath) {
-    const androidManifest = _fs().default.readFileSync(manifestPath, 'utf8');
-    const packageNameFromManifest = parsePackageNameFromAndroidManifestFile(androidManifest);
-    // We got the package from the AndroidManifest.xml
-    if (packageNameFromManifest) {
-      return packageNameFromManifest;
-    }
-  }
-  if (buildGradlePath) {
-    // We didn't get the package from the AndroidManifest.xml,
-    // so we'll try to get it from the build.gradle[.kts] file
-    // via the namespace field.
-    const buildGradle = _fs().default.readFileSync(buildGradlePath, 'utf8');
-    const namespace = parseNamespaceFromBuildGradleFile(buildGradle);
-    if (namespace) {
-      return namespace;
-    }
-  }
-  throw new (_cliTools().CLIError)(`Failed to build the app: No package name found. 
-    We couldn't parse the namespace from neither your build.gradle[.kts] file at ${_chalk().default.underline.dim(`${buildGradlePath}`)} 
-    nor your package in the AndroidManifest at ${_chalk().default.underline.dim(`${manifestPath}`)}
-    `);
-}
-
-/**
- * Get the package name/namespace of the running React Native app
- * @param manifestPath The path to the AndroidManifest.xml
- * @param buildGradlePath The path to the build.gradle[.kts] file.
- */
-function getPackageName(manifestPath, buildGradlePath) {
-  let packageName = discoverPackageName(manifestPath, buildGradlePath);
-  if (!validatePackageName(packageName)) {
-    _cliTools().logger.warn(`Invalid application's package name "${_chalk().default.bgRed(packageName)}" in either 'AndroidManifest.xml' or 'build.gradle'. Read guidelines for setting the package name here: ${_chalk().default.underline.dim('https://developer.android.com/studio/build/application-id')}`);
-  }
-  return packageName;
-}
-function parsePackageNameFromAndroidManifestFile(androidManifest) {
-  const matchArray = androidManifest.match(/package="(.+?)"/);
-  if (matchArray && matchArray.length > 0) {
-    return matchArray[1];
-  } else {
-    return null;
-  }
-}
-function parseNamespaceFromBuildGradleFile(buildGradle) {
-  // search for namespace = inside the build.gradle file via regex
-  const matchArray = buildGradle.match(/namespace\s*[=]*\s*["'](.+?)["']/);
-  if (matchArray && matchArray.length > 0) {
-    return matchArray[1];
-  } else {
-    return null;
-  }
-}
-
-// Validates that the package name is correct
-function validatePackageName(packageName) {
-  return /^[a-z][a-z0-9_]*(\.[a-z][a-z0-9_]*)+$/i.test(packageName);
-}
-
-// Search for applicationId at defaultConfig object
-function parseApplicationIdFromBuildGradleFile(buildGradlePath) {
-  if (!buildGradlePath) {
-    return null;
-  }
-  const buildGradle = _fs().default.readFileSync(buildGradlePath, 'utf8');
-  const matchArray = buildGradle.match(/defaultConfig\s*{([\s\S]*?)}/);
-  if (matchArray && matchArray.length > 0) {
-    const appIdMatchArray = matchArray[1].match(/applicationId\s*[=]*\s*["'](.+?)["']/);
-    return (appIdMatchArray === null || appIdMatchArray === void 0 ? void 0 : appIdMatchArray[1]) ?? '';
-  } else {
-    return null;
-  }
-}
-
-//# sourceMappingURL=getAndroidProject.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/getAndroidProject.js.map b/node_modules/@react-native-community/cli-platform-android/build/config/getAndroidProject.js.map
deleted file mode 100644
index 362e919..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/getAndroidProject.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["getAndroidProject","config","androidProject","project","android","CLIError","discoverPackageName","manifestPath","buildGradlePath","androidManifest","fs","readFileSync","packageNameFromManifest","parsePackageNameFromAndroidManifestFile","buildGradle","namespace","parseNamespaceFromBuildGradleFile","chalk","underline","dim","getPackageName","packageName","validatePackageName","logger","warn","bgRed","matchArray","match","length","test","parseApplicationIdFromBuildGradleFile","appIdMatchArray"],"sources":["../../src/config/getAndroidProject.ts"],"sourcesContent":["import {Config} from '@react-native-community/cli-types';\nimport {logger, CLIError} from '@react-native-community/cli-tools';\nimport fs from 'fs';\nimport chalk from 'chalk';\n\nexport function getAndroidProject(config: Config) {\n  const androidProject = config.project.android;\n\n  if (!androidProject) {\n    throw new CLIError(`\n      Android project not found. Are you sure this is a React Native project?\n      If your Android files are located in a non-standard location (e.g. not inside 'android' folder), consider setting\n      \\`project.android.sourceDir\\` option to point to a new location.\n    `);\n  }\n  return androidProject;\n}\n\n/**\n * Util function to discover the package name from either the Manifest file or the build.gradle file.\n * @param manifestPath The path to the AndroidManifest.xml\n * @param buildGradlePath The path to the build.gradle[.kts] file.\n */\nfunction discoverPackageName(\n  manifestPath: string | null,\n  buildGradlePath: string | null,\n) {\n  if (manifestPath) {\n    const androidManifest = fs.readFileSync(manifestPath, 'utf8');\n    const packageNameFromManifest =\n      parsePackageNameFromAndroidManifestFile(androidManifest);\n    // We got the package from the AndroidManifest.xml\n    if (packageNameFromManifest) {\n      return packageNameFromManifest;\n    }\n  }\n\n  if (buildGradlePath) {\n    // We didn't get the package from the AndroidManifest.xml,\n    // so we'll try to get it from the build.gradle[.kts] file\n    // via the namespace field.\n    const buildGradle = fs.readFileSync(buildGradlePath, 'utf8');\n    const namespace = parseNamespaceFromBuildGradleFile(buildGradle);\n    if (namespace) {\n      return namespace;\n    }\n  }\n\n  throw new CLIError(\n    `Failed to build the app: No package name found. \n    We couldn't parse the namespace from neither your build.gradle[.kts] file at ${chalk.underline.dim(\n      `${buildGradlePath}`,\n    )} \n    nor your package in the AndroidManifest at ${chalk.underline.dim(\n      `${manifestPath}`,\n    )}\n    `,\n  );\n}\n\n/**\n * Get the package name/namespace of the running React Native app\n * @param manifestPath The path to the AndroidManifest.xml\n * @param buildGradlePath The path to the build.gradle[.kts] file.\n */\nexport function getPackageName(\n  manifestPath: string | null,\n  buildGradlePath: string | null,\n) {\n  let packageName = discoverPackageName(manifestPath, buildGradlePath);\n  if (!validatePackageName(packageName)) {\n    logger.warn(\n      `Invalid application's package name \"${chalk.bgRed(\n        packageName,\n      )}\" in either 'AndroidManifest.xml' or 'build.gradle'. Read guidelines for setting the package name here: ${chalk.underline.dim(\n        'https://developer.android.com/studio/build/application-id',\n      )}`,\n    );\n  }\n  return packageName;\n}\n\nexport function parsePackageNameFromAndroidManifestFile(\n  androidManifest: string,\n) {\n  const matchArray = androidManifest.match(/package=\"(.+?)\"/);\n  if (matchArray && matchArray.length > 0) {\n    return matchArray[1];\n  } else {\n    return null;\n  }\n}\n\nexport function parseNamespaceFromBuildGradleFile(buildGradle: string) {\n  // search for namespace = inside the build.gradle file via regex\n  const matchArray = buildGradle.match(/namespace\\s*[=]*\\s*[\"'](.+?)[\"']/);\n  if (matchArray && matchArray.length > 0) {\n    return matchArray[1];\n  } else {\n    return null;\n  }\n}\n\n// Validates that the package name is correct\nexport function validatePackageName(packageName: string) {\n  return /^[a-z][a-z0-9_]*(\\.[a-z][a-z0-9_]*)+$/i.test(packageName);\n}\n\n// Search for applicationId at defaultConfig object\nexport function parseApplicationIdFromBuildGradleFile(buildGradlePath: string) {\n  if (!buildGradlePath) {\n    return null;\n  }\n  const buildGradle = fs.readFileSync(buildGradlePath, 'utf8');\n\n  const matchArray = buildGradle.match(/defaultConfig\\s*{([\\s\\S]*?)}/);\n\n  if (matchArray && matchArray.length > 0) {\n    const appIdMatchArray = matchArray[1].match(\n      /applicationId\\s*[=]*\\s*[\"'](.+?)[\"']/,\n    );\n    return appIdMatchArray?.[1] ?? '';\n  } else {\n    return null;\n  }\n}\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/getMainActivity.d.ts b/node_modules/@react-native-community/cli-platform-android/build/config/getMainActivity.d.ts
deleted file mode 100644
index 4564c7d..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/getMainActivity.d.ts
+++ /dev/null
@@ -1,5 +0,0 @@
-/**
- * Reads the AndroidManifest.xml file and returns the name of the main activity.
- */
-export default function getMainActivity(manifestPath: string): string | null;
-//# sourceMappingURL=getMainActivity.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/getMainActivity.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/config/getMainActivity.d.ts.map
deleted file mode 100644
index c1b916e..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/getMainActivity.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"getMainActivity.d.ts","sourceRoot":"","sources":["../../src/config/getMainActivity.ts"],"names":[],"mappings":"AAmBA;;GAEG;AAEH,MAAM,CAAC,OAAO,UAAU,eAAe,CAAC,YAAY,EAAE,MAAM,GAAG,MAAM,GAAG,IAAI,CA0E3E"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/getMainActivity.js b/node_modules/@react-native-community/cli-platform-android/build/config/getMainActivity.js
deleted file mode 100644
index 00bc442..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/getMainActivity.js
+++ /dev/null
@@ -1,94 +0,0 @@
-"use strict";
-
-Object.defineProperty(exports, "__esModule", {
-  value: true
-});
-exports.default = getMainActivity;
-function _fs() {
-  const data = _interopRequireDefault(require("fs"));
-  _fs = function () {
-    return data;
-  };
-  return data;
-}
-function _fastXmlParser() {
-  const data = require("fast-xml-parser");
-  _fastXmlParser = function () {
-    return data;
-  };
-  return data;
-}
-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
-const MAIN_ACTION = 'android.intent.action.MAIN';
-const LAUNCHER = 'android.intent.category.LAUNCHER';
-/**
- * Reads the AndroidManifest.xml file and returns the name of the main activity.
- */
-
-function getMainActivity(manifestPath) {
-  try {
-    const xmlParser = new (_fastXmlParser().XMLParser)({
-      ignoreAttributes: false
-    });
-    const manifestContent = _fs().default.readFileSync(manifestPath, {
-      encoding: 'utf8'
-    });
-    if (_fastXmlParser().XMLValidator.validate(manifestContent)) {
-      const {
-        manifest
-      } = xmlParser.parse(manifestContent);
-      const application = manifest.application || {};
-      const activity = application.activity || {};
-      let activities = [];
-      if (!Array.isArray(activity)) {
-        activities = [activity];
-      } else {
-        activities = activity;
-      }
-      const mainActivity = activities.find(act => {
-        let intentFilters = act['intent-filter'];
-        if (!intentFilters) {
-          return false;
-        }
-        if (!Array.isArray(intentFilters)) {
-          intentFilters = [intentFilters];
-        }
-        return intentFilters.find(intentFilter => {
-          const {
-            action,
-            category
-          } = intentFilter;
-          let actions;
-          let categories;
-          if (!Array.isArray(action)) {
-            actions = [action];
-          } else {
-            actions = action;
-          }
-          if (!Array.isArray(category)) {
-            categories = [category];
-          } else {
-            categories = category;
-          }
-          if (actions && categories) {
-            const parsedActions = actions.map(({
-              '@_android:name': name
-            }) => name);
-            const parsedCategories = categories.map(({
-              '@_android:name': name
-            }) => name);
-            return parsedActions.includes(MAIN_ACTION) && parsedCategories.includes(LAUNCHER);
-          }
-          return false;
-        });
-      });
-      return mainActivity ? mainActivity['@_android:name'] : null;
-    } else {
-      return null;
-    }
-  } catch {
-    return null;
-  }
-}
-
-//# sourceMappingURL=getMainActivity.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/getMainActivity.js.map b/node_modules/@react-native-community/cli-platform-android/build/config/getMainActivity.js.map
deleted file mode 100644
index a0fbc98..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/getMainActivity.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["MAIN_ACTION","LAUNCHER","getMainActivity","manifestPath","xmlParser","XMLParser","ignoreAttributes","manifestContent","fs","readFileSync","encoding","XMLValidator","validate","manifest","parse","application","activity","activities","Array","isArray","mainActivity","find","act","intentFilters","intentFilter","action","category","actions","categories","parsedActions","map","name","parsedCategories","includes"],"sources":["../../src/config/getMainActivity.ts"],"sourcesContent":["import fs from 'fs';\nimport {XMLParser, XMLValidator} from 'fast-xml-parser';\n\nconst MAIN_ACTION = 'android.intent.action.MAIN';\nconst LAUNCHER = 'android.intent.category.LAUNCHER';\n\ninterface Activity {\n  [x: string]: any;\n}\n\ninterface AndroidNameProperty {\n  '@_android:name': string;\n}\n\ninterface IntentFilter {\n  action: AndroidNameProperty | AndroidNameProperty[];\n  category: AndroidNameProperty | AndroidNameProperty[];\n}\n\n/**\n * Reads the AndroidManifest.xml file and returns the name of the main activity.\n */\n\nexport default function getMainActivity(manifestPath: string): string | null {\n  try {\n    const xmlParser = new XMLParser({ignoreAttributes: false});\n    const manifestContent = fs.readFileSync(manifestPath, {encoding: 'utf8'});\n\n    if (XMLValidator.validate(manifestContent)) {\n      const {manifest} = xmlParser.parse(manifestContent);\n\n      const application = manifest.application || {};\n      const activity = application.activity || {};\n\n      let activities: Activity[] = [];\n\n      if (!Array.isArray(activity)) {\n        activities = [activity];\n      } else {\n        activities = activity;\n      }\n\n      const mainActivity = activities.find((act: Activity) => {\n        let intentFilters = act['intent-filter'];\n\n        if (!intentFilters) {\n          return false;\n        }\n\n        if (!Array.isArray(intentFilters)) {\n          intentFilters = [intentFilters];\n        }\n\n        return intentFilters.find((intentFilter: IntentFilter) => {\n          const {action, category} = intentFilter;\n\n          let actions;\n          let categories;\n\n          if (!Array.isArray(action)) {\n            actions = [action];\n          } else {\n            actions = action;\n          }\n\n          if (!Array.isArray(category)) {\n            categories = [category];\n          } else {\n            categories = category;\n          }\n\n          if (actions && categories) {\n            const parsedActions: string[] = actions.map(\n              ({'@_android:name': name}) => name,\n            );\n\n            const parsedCategories: string[] = categories.map(\n              ({'@_android:name': name}) => name,\n            );\n\n            return (\n              parsedActions.includes(MAIN_ACTION) &&\n              parsedCategories.includes(LAUNCHER)\n            );\n          }\n\n          return false;\n        });\n      });\n\n      return mainActivity ? mainActivity['@_android:name'] : null;\n    } else {\n      return null;\n    }\n  } catch {\n    return null;\n  }\n}\n"],"mappings":";;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAAwD;AAExD,MAAMA,WAAW,GAAG,4BAA4B;AAChD,MAAMC,QAAQ,GAAG,kCAAkC;AAenD;AACA;AACA;;AAEe,SAASC,eAAe,CAACC,YAAoB,EAAiB;EAC3E,IAAI;IACF,MAAMC,SAAS,GAAG,KAAIC,0BAAS,EAAC;MAACC,gBAAgB,EAAE;IAAK,CAAC,CAAC;IAC1D,MAAMC,eAAe,GAAGC,aAAE,CAACC,YAAY,CAACN,YAAY,EAAE;MAACO,QAAQ,EAAE;IAAM,CAAC,CAAC;IAEzE,IAAIC,6BAAY,CAACC,QAAQ,CAACL,eAAe,CAAC,EAAE;MAC1C,MAAM;QAACM;MAAQ,CAAC,GAAGT,SAAS,CAACU,KAAK,CAACP,eAAe,CAAC;MAEnD,MAAMQ,WAAW,GAAGF,QAAQ,CAACE,WAAW,IAAI,CAAC,CAAC;MAC9C,MAAMC,QAAQ,GAAGD,WAAW,CAACC,QAAQ,IAAI,CAAC,CAAC;MAE3C,IAAIC,UAAsB,GAAG,EAAE;MAE/B,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,QAAQ,CAAC,EAAE;QAC5BC,UAAU,GAAG,CAACD,QAAQ,CAAC;MACzB,CAAC,MAAM;QACLC,UAAU,GAAGD,QAAQ;MACvB;MAEA,MAAMI,YAAY,GAAGH,UAAU,CAACI,IAAI,CAAEC,GAAa,IAAK;QACtD,IAAIC,aAAa,GAAGD,GAAG,CAAC,eAAe,CAAC;QAExC,IAAI,CAACC,aAAa,EAAE;UAClB,OAAO,KAAK;QACd;QAEA,IAAI,CAACL,KAAK,CAACC,OAAO,CAACI,aAAa,CAAC,EAAE;UACjCA,aAAa,GAAG,CAACA,aAAa,CAAC;QACjC;QAEA,OAAOA,aAAa,CAACF,IAAI,CAAEG,YAA0B,IAAK;UACxD,MAAM;YAACC,MAAM;YAAEC;UAAQ,CAAC,GAAGF,YAAY;UAEvC,IAAIG,OAAO;UACX,IAAIC,UAAU;UAEd,IAAI,CAACV,KAAK,CAACC,OAAO,CAACM,MAAM,CAAC,EAAE;YAC1BE,OAAO,GAAG,CAACF,MAAM,CAAC;UACpB,CAAC,MAAM;YACLE,OAAO,GAAGF,MAAM;UAClB;UAEA,IAAI,CAACP,KAAK,CAACC,OAAO,CAACO,QAAQ,CAAC,EAAE;YAC5BE,UAAU,GAAG,CAACF,QAAQ,CAAC;UACzB,CAAC,MAAM;YACLE,UAAU,GAAGF,QAAQ;UACvB;UAEA,IAAIC,OAAO,IAAIC,UAAU,EAAE;YACzB,MAAMC,aAAuB,GAAGF,OAAO,CAACG,GAAG,CACzC,CAAC;cAAC,gBAAgB,EAAEC;YAAI,CAAC,KAAKA,IAAI,CACnC;YAED,MAAMC,gBAA0B,GAAGJ,UAAU,CAACE,GAAG,CAC/C,CAAC;cAAC,gBAAgB,EAAEC;YAAI,CAAC,KAAKA,IAAI,CACnC;YAED,OACEF,aAAa,CAACI,QAAQ,CAACjC,WAAW,CAAC,IACnCgC,gBAAgB,CAACC,QAAQ,CAAChC,QAAQ,CAAC;UAEvC;UAEA,OAAO,KAAK;QACd,CAAC,CAAC;MACJ,CAAC,CAAC;MAEF,OAAOmB,YAAY,GAAGA,YAAY,CAAC,gBAAgB,CAAC,GAAG,IAAI;IAC7D,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF,CAAC,CAAC,MAAM;IACN,OAAO,IAAI;EACb;AACF"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/index.d.ts b/node_modules/@react-native-community/cli-platform-android/build/config/index.d.ts
index 2c94bd4..66c4600 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/config/index.d.ts
+++ b/node_modules/@react-native-community/cli-platform-android/build/config/index.d.ts
@@ -5,15 +5,31 @@
  * LICENSE file in the root directory of this source tree.
  *
  */
-import { AndroidProjectParams, AndroidProjectConfig, AndroidDependencyParams, AndroidDependencyConfig } from '@react-native-community/cli-types';
+import { AndroidProjectParams, AndroidDependencyParams } from '@react-native-community/cli-types';
 /**
  * Gets android project config by analyzing given folder and taking some
  * defaults specified by user into consideration
  */
-export declare function projectConfig(root: string, userConfig?: AndroidProjectParams): AndroidProjectConfig | null;
+export declare function projectConfig(folder: string, userConfig?: AndroidProjectParams): {
+    sourceDir: string;
+    isFlat: boolean;
+    folder: string;
+    stringsPath: string;
+    manifestPath: string;
+    buildGradlePath: string;
+    settingsGradlePath: string;
+    assetsPath: string;
+    mainFilePath: string;
+    packageName: string;
+} | null;
 /**
  * Same as projectConfigAndroid except it returns
  * different config that applies to packages only
  */
-export declare function dependencyConfig(root: string, userConfig?: AndroidDependencyParams | null): AndroidDependencyConfig | null;
+export declare function dependencyConfig(folder: string, userConfig?: AndroidDependencyParams): {
+    sourceDir: string;
+    folder: string;
+    packageImportPath: string;
+    packageInstance: string;
+} | null;
 //# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/index.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/config/index.d.ts.map
index f4ff63e..8495f29 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/config/index.d.ts.map
+++ b/node_modules/@react-native-community/cli-platform-android/build/config/index.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../src/config/index.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAOH,OAAO,EACL,oBAAoB,EACpB,oBAAoB,EACpB,uBAAuB,EACvB,uBAAuB,EACxB,MAAM,mCAAmC,CAAC;AAW3C;;;GAGG;AACH,wBAAgB,aAAa,CAC3B,IAAI,EAAE,MAAM,EACZ,UAAU,GAAE,oBAAyB,GACpC,oBAAoB,GAAG,IAAI,CAoD7B;AAyBD;;;GAGG;AACH,wBAAgB,gBAAgB,CAC9B,IAAI,EAAE,MAAM,EACZ,UAAU,GAAE,uBAAuB,GAAG,IAAS,GAC9C,uBAAuB,GAAG,IAAI,CA2EhC"}
\ No newline at end of file
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../src/config/index.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAOH,OAAO,EACL,oBAAoB,EACpB,uBAAuB,EACxB,MAAM,mCAAmC,CAAC;AAK3C;;;GAGG;AACH,wBAAgB,aAAa,CAC3B,MAAM,EAAE,MAAM,EACd,UAAU,GAAE,oBAAyB;;;;;;;;;;;SAoEtC;AAED;;;GAGG;AACH,wBAAgB,gBAAgB,CAC9B,MAAM,EAAE,MAAM,EACd,UAAU,GAAE,uBAA4B;;;;;SAoCzC"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/index.js b/node_modules/@react-native-community/cli-platform-android/build/config/index.js
index c0098fe..324d84f 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/config/index.js
+++ b/node_modules/@react-native-community/cli-platform-android/build/config/index.js
@@ -3,38 +3,29 @@
 Object.defineProperty(exports, "__esModule", {
   value: true
 });
-exports.dependencyConfig = dependencyConfig;
 exports.projectConfig = projectConfig;
+exports.dependencyConfig = dependencyConfig;
+
 function _path() {
   const data = _interopRequireDefault(require("path"));
+
   _path = function () {
     return data;
   };
+
   return data;
 }
-function _fs() {
-  const data = _interopRequireDefault(require("fs"));
-  _fs = function () {
-    return data;
-  };
-  return data;
-}
-var _findAndroidDir = _interopRequireDefault(require("./findAndroidDir"));
+
+var _findAndroidAppFolder = _interopRequireDefault(require("./findAndroidAppFolder"));
+
 var _findManifest = _interopRequireDefault(require("./findManifest"));
+
 var _findPackageClassName = _interopRequireDefault(require("./findPackageClassName"));
-var _getAndroidProject = require("./getAndroidProject");
-var _findLibraryName = require("./findLibraryName");
-var _findComponentDescriptors = require("./findComponentDescriptors");
-var _findBuildGradle = require("./findBuildGradle");
-function _cliTools() {
-  const data = require("@react-native-community/cli-tools");
-  _cliTools = function () {
-    return data;
-  };
-  return data;
-}
-var _getMainActivity = _interopRequireDefault(require("./getMainActivity"));
+
+var _readManifest = _interopRequireDefault(require("./readManifest"));
+
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
 /**
  * Copyright (c) Facebook, Inc. and its affiliates.
  *
@@ -42,120 +33,99 @@ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { de
  * LICENSE file in the root directory of this source tree.
  *
  */
-
+const getPackageName = manifest => manifest.attr.package;
 /**
  * Gets android project config by analyzing given folder and taking some
  * defaults specified by user into consideration
  */
-function projectConfig(root, userConfig = {}) {
-  const src = userConfig.sourceDir || (0, _findAndroidDir.default)(root);
+
+
+function projectConfig(folder, userConfig = {}) {
+  const src = userConfig.sourceDir || (0, _findAndroidAppFolder.default)(folder);
+
   if (!src) {
     return null;
   }
-  const sourceDir = _path().default.join(root, src);
-  const appName = getAppName(sourceDir, userConfig.appName);
-  const manifestPath = userConfig.manifestPath ? _path().default.join(sourceDir, userConfig.manifestPath) : (0, _findManifest.default)(_path().default.join(sourceDir, appName));
-  const buildGradlePath = (0, _findBuildGradle.findBuildGradle)(sourceDir, false);
-  if (!manifestPath && !buildGradlePath) {
+
+  const sourceDir = _path().default.join(folder, src);
+
+  const isFlat = sourceDir.indexOf('app') === -1;
+  const manifestPath = userConfig.manifestPath ? _path().default.join(sourceDir, userConfig.manifestPath) : (0, _findManifest.default)(sourceDir);
+
+  if (!manifestPath) {
     return null;
   }
-  const packageName = userConfig.packageName || (0, _getAndroidProject.getPackageName)(manifestPath, buildGradlePath);
+
+  const manifest = (0, _readManifest.default)(manifestPath);
+  const packageName = userConfig.packageName || getPackageName(manifest);
+
   if (!packageName) {
-    throw new (_cliTools().CLIError)(`Package name not found in neither ${manifestPath} nor ${buildGradlePath}`);
+    throw new Error(`Package name not found in ${manifestPath}`);
   }
-  const applicationId = buildGradlePath ? getApplicationId(buildGradlePath, packageName) : packageName;
-  const mainActivity = (0, _getMainActivity.default)(manifestPath || '') ?? '';
 
-  // @todo remove for RN 0.75
-  if (userConfig.unstable_reactLegacyComponentNames) {
-    _cliTools().logger.warn('The "project.android.unstable_reactLegacyComponentNames" config option is not necessary anymore for React Native 0.74 and does nothing. Please remove it from the "react-native.config.js" file.');
-  }
+  const packageFolder = userConfig.packageFolder || packageName.replace(/\./g, _path().default.sep);
+
+  const mainFilePath = _path().default.join(sourceDir, userConfig.mainFilePath || `src/main/java/${packageFolder}/MainApplication.java`);
+
+  const stringsPath = _path().default.join(sourceDir, userConfig.stringsPath || 'src/main/res/values/strings.xml');
+
+  const settingsGradlePath = _path().default.join(folder, 'android', userConfig.settingsGradlePath || 'settings.gradle');
+
+  const assetsPath = _path().default.join(sourceDir, userConfig.assetsPath || 'src/main/assets');
+
+  const buildGradlePath = _path().default.join(sourceDir, userConfig.buildGradlePath || 'build.gradle');
+
   return {
     sourceDir,
-    appName,
-    packageName,
-    applicationId,
-    mainActivity,
-    dependencyConfiguration: userConfig.dependencyConfiguration,
-    watchModeCommandParams: userConfig.watchModeCommandParams,
-    // @todo remove for RN 0.75
-    unstable_reactLegacyComponentNames: undefined
+    isFlat,
+    folder,
+    stringsPath,
+    manifestPath,
+    buildGradlePath,
+    settingsGradlePath,
+    assetsPath,
+    mainFilePath,
+    packageName
   };
 }
-function getApplicationId(buildGradlePath, packageName) {
-  let appId = packageName;
-  const applicationId = (0, _getAndroidProject.parseApplicationIdFromBuildGradleFile)(buildGradlePath);
-  if (applicationId) {
-    appId = applicationId;
-  }
-  return appId;
-}
-function getAppName(sourceDir, userConfigAppName) {
-  let appName = '';
-  if (typeof userConfigAppName === 'string' && _fs().default.existsSync(_path().default.join(sourceDir, userConfigAppName))) {
-    appName = userConfigAppName;
-  } else if (_fs().default.existsSync(_path().default.join(sourceDir, 'app'))) {
-    appName = 'app';
-  }
-  return appName;
-}
-
 /**
  * Same as projectConfigAndroid except it returns
  * different config that applies to packages only
  */
-function dependencyConfig(root, userConfig = {}) {
-  if (userConfig === null) {
-    return null;
-  }
-  const src = userConfig.sourceDir || (0, _findAndroidDir.default)(root);
+
+
+function dependencyConfig(folder, userConfig = {}) {
+  const src = userConfig.sourceDir || (0, _findAndroidAppFolder.default)(folder);
+
   if (!src) {
     return null;
   }
-  const sourceDir = _path().default.join(root, src);
+
+  const sourceDir = _path().default.join(folder, src);
+
   const manifestPath = userConfig.manifestPath ? _path().default.join(sourceDir, userConfig.manifestPath) : (0, _findManifest.default)(sourceDir);
-  const buildGradlePath = (0, _findBuildGradle.findBuildGradle)(sourceDir, true);
-  if (!manifestPath && !buildGradlePath) {
+
+  if (!manifestPath) {
     return null;
   }
-  const packageName = userConfig.packageName || (0, _getAndroidProject.getPackageName)(manifestPath, buildGradlePath);
-  const packageClassName = (0, _findPackageClassName.default)(sourceDir);
 
+  const manifest = (0, _readManifest.default)(manifestPath);
+  const packageName = userConfig.packageName || getPackageName(manifest);
+  const packageClassName = (0, _findPackageClassName.default)(sourceDir);
   /**
    * This module has no package to export
    */
+
   if (!packageClassName) {
     return null;
   }
+
   const packageImportPath = userConfig.packageImportPath || `import ${packageName}.${packageClassName};`;
   const packageInstance = userConfig.packageInstance || `new ${packageClassName}()`;
-  const buildTypes = userConfig.buildTypes || [];
-  const dependencyConfiguration = userConfig.dependencyConfiguration;
-  const libraryName = userConfig.libraryName || (0, _findLibraryName.findLibraryName)(root, sourceDir);
-  const componentDescriptors = userConfig.componentDescriptors || (0, _findComponentDescriptors.findComponentDescriptors)(root);
-  let cmakeListsPath = userConfig.cmakeListsPath ? _path().default.join(sourceDir, userConfig.cmakeListsPath) : _path().default.join(sourceDir, 'build/generated/source/codegen/jni/CMakeLists.txt');
-  const cxxModuleCMakeListsModuleName = userConfig.cxxModuleCMakeListsModuleName || null;
-  const cxxModuleHeaderName = userConfig.cxxModuleHeaderName || null;
-  let cxxModuleCMakeListsPath = userConfig.cxxModuleCMakeListsPath ? _path().default.join(sourceDir, userConfig.cxxModuleCMakeListsPath) : null;
-  if (process.platform === 'win32') {
-    cmakeListsPath = cmakeListsPath.replace(/\\/g, '/');
-    if (cxxModuleCMakeListsPath) {
-      cxxModuleCMakeListsPath = cxxModuleCMakeListsPath.replace(/\\/g, '/');
-    }
-  }
   return {
     sourceDir,
+    folder,
     packageImportPath,
-    packageInstance,
-    buildTypes,
-    dependencyConfiguration,
-    libraryName,
-    componentDescriptors,
-    cmakeListsPath,
-    cxxModuleCMakeListsModuleName,
-    cxxModuleCMakeListsPath,
-    cxxModuleHeaderName
+    packageInstance
   };
 }
\ No newline at end of file
-
-//# sourceMappingURL=index.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/index.js.map b/node_modules/@react-native-community/cli-platform-android/build/config/index.js.map
deleted file mode 100644
index 491ac37..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/config/index.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":["projectConfig","root","userConfig","src","sourceDir","findAndroidDir","path","join","appName","getAppName","manifestPath","findManifest","buildGradlePath","findBuildGradle","packageName","getPackageName","CLIError","applicationId","getApplicationId","mainActivity","getMainActivity","unstable_reactLegacyComponentNames","logger","warn","dependencyConfiguration","watchModeCommandParams","undefined","appId","parseApplicationIdFromBuildGradleFile","userConfigAppName","fs","existsSync","dependencyConfig","packageClassName","findPackageClassName","packageImportPath","packageInstance","buildTypes","libraryName","findLibraryName","componentDescriptors","findComponentDescriptors","cmakeListsPath","cxxModuleCMakeListsModuleName","cxxModuleHeaderName","cxxModuleCMakeListsPath","process","platform","replace"],"sources":["../../src/config/index.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport path from 'path';\nimport fs from 'fs';\nimport findAndroidDir from './findAndroidDir';\nimport findManifest from './findManifest';\nimport findPackageClassName from './findPackageClassName';\nimport {\n  AndroidProjectParams,\n  AndroidProjectConfig,\n  AndroidDependencyParams,\n  AndroidDependencyConfig,\n} from '@react-native-community/cli-types';\nimport {\n  getPackageName,\n  parseApplicationIdFromBuildGradleFile,\n} from './getAndroidProject';\nimport {findLibraryName} from './findLibraryName';\nimport {findComponentDescriptors} from './findComponentDescriptors';\nimport {findBuildGradle} from './findBuildGradle';\nimport {CLIError, logger} from '@react-native-community/cli-tools';\nimport getMainActivity from './getMainActivity';\n\n/**\n * Gets android project config by analyzing given folder and taking some\n * defaults specified by user into consideration\n */\nexport function projectConfig(\n  root: string,\n  userConfig: AndroidProjectParams = {},\n): AndroidProjectConfig | null {\n  const src = userConfig.sourceDir || findAndroidDir(root);\n\n  if (!src) {\n    return null;\n  }\n\n  const sourceDir = path.join(root, src);\n\n  const appName = getAppName(sourceDir, userConfig.appName);\n\n  const manifestPath = userConfig.manifestPath\n    ? path.join(sourceDir, userConfig.manifestPath)\n    : findManifest(path.join(sourceDir, appName));\n  const buildGradlePath = findBuildGradle(sourceDir, false);\n\n  if (!manifestPath && !buildGradlePath) {\n    return null;\n  }\n\n  const packageName =\n    userConfig.packageName || getPackageName(manifestPath, buildGradlePath);\n\n  if (!packageName) {\n    throw new CLIError(\n      `Package name not found in neither ${manifestPath} nor ${buildGradlePath}`,\n    );\n  }\n\n  const applicationId = buildGradlePath\n    ? getApplicationId(buildGradlePath, packageName)\n    : packageName;\n  const mainActivity = getMainActivity(manifestPath || '') ?? '';\n\n  // @todo remove for RN 0.75\n  if (userConfig.unstable_reactLegacyComponentNames) {\n    logger.warn(\n      'The \"project.android.unstable_reactLegacyComponentNames\" config option is not necessary anymore for React Native 0.74 and does nothing. Please remove it from the \"react-native.config.js\" file.',\n    );\n  }\n\n  return {\n    sourceDir,\n    appName,\n    packageName,\n    applicationId,\n    mainActivity,\n    dependencyConfiguration: userConfig.dependencyConfiguration,\n    watchModeCommandParams: userConfig.watchModeCommandParams,\n    // @todo remove for RN 0.75\n    unstable_reactLegacyComponentNames: undefined,\n  };\n}\n\nfunction getApplicationId(buildGradlePath: string, packageName: string) {\n  let appId = packageName;\n\n  const applicationId = parseApplicationIdFromBuildGradleFile(buildGradlePath);\n  if (applicationId) {\n    appId = applicationId;\n  }\n  return appId;\n}\n\nfunction getAppName(sourceDir: string, userConfigAppName: string | undefined) {\n  let appName = '';\n  if (\n    typeof userConfigAppName === 'string' &&\n    fs.existsSync(path.join(sourceDir, userConfigAppName))\n  ) {\n    appName = userConfigAppName;\n  } else if (fs.existsSync(path.join(sourceDir, 'app'))) {\n    appName = 'app';\n  }\n  return appName;\n}\n\n/**\n * Same as projectConfigAndroid except it returns\n * different config that applies to packages only\n */\nexport function dependencyConfig(\n  root: string,\n  userConfig: AndroidDependencyParams | null = {},\n): AndroidDependencyConfig | null {\n  if (userConfig === null) {\n    return null;\n  }\n\n  const src = userConfig.sourceDir || findAndroidDir(root);\n\n  if (!src) {\n    return null;\n  }\n\n  const sourceDir = path.join(root, src);\n  const manifestPath = userConfig.manifestPath\n    ? path.join(sourceDir, userConfig.manifestPath)\n    : findManifest(sourceDir);\n  const buildGradlePath = findBuildGradle(sourceDir, true);\n\n  if (!manifestPath && !buildGradlePath) {\n    return null;\n  }\n\n  const packageName =\n    userConfig.packageName || getPackageName(manifestPath, buildGradlePath);\n  const packageClassName = findPackageClassName(sourceDir);\n\n  /**\n   * This module has no package to export\n   */\n  if (!packageClassName) {\n    return null;\n  }\n\n  const packageImportPath =\n    userConfig.packageImportPath ||\n    `import ${packageName}.${packageClassName};`;\n\n  const packageInstance =\n    userConfig.packageInstance || `new ${packageClassName}()`;\n\n  const buildTypes = userConfig.buildTypes || [];\n  const dependencyConfiguration = userConfig.dependencyConfiguration;\n  const libraryName =\n    userConfig.libraryName || findLibraryName(root, sourceDir);\n  const componentDescriptors =\n    userConfig.componentDescriptors || findComponentDescriptors(root);\n  let cmakeListsPath = userConfig.cmakeListsPath\n    ? path.join(sourceDir, userConfig.cmakeListsPath)\n    : path.join(sourceDir, 'build/generated/source/codegen/jni/CMakeLists.txt');\n  const cxxModuleCMakeListsModuleName =\n    userConfig.cxxModuleCMakeListsModuleName || null;\n  const cxxModuleHeaderName = userConfig.cxxModuleHeaderName || null;\n  let cxxModuleCMakeListsPath = userConfig.cxxModuleCMakeListsPath\n    ? path.join(sourceDir, userConfig.cxxModuleCMakeListsPath)\n    : null;\n\n  if (process.platform === 'win32') {\n    cmakeListsPath = cmakeListsPath.replace(/\\\\/g, '/');\n    if (cxxModuleCMakeListsPath) {\n      cxxModuleCMakeListsPath = cxxModuleCMakeListsPath.replace(/\\\\/g, '/');\n    }\n  }\n\n  return {\n    sourceDir,\n    packageImportPath,\n    packageInstance,\n    buildTypes,\n    dependencyConfiguration,\n    libraryName,\n    componentDescriptors,\n    cmakeListsPath,\n    cxxModuleCMakeListsModuleName,\n    cxxModuleCMakeListsPath,\n    cxxModuleHeaderName,\n  };\n}\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/readManifest.d.ts b/node_modules/@react-native-community/cli-platform-android/build/config/readManifest.d.ts
new file mode 100644
index 0000000..78affdb
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/config/readManifest.d.ts
@@ -0,0 +1,10 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+import xml from 'xmldoc';
+export default function readManifest(manifestPath: string): xml.XmlDocument;
+//# sourceMappingURL=readManifest.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/readManifest.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/config/readManifest.d.ts.map
new file mode 100644
index 0000000..4101588
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/config/readManifest.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"readManifest.d.ts","sourceRoot":"","sources":["../../src/config/readManifest.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,GAAG,MAAM,QAAQ,CAAC;AAEzB,MAAM,CAAC,OAAO,UAAU,YAAY,CAAC,YAAY,EAAE,MAAM,mBAExD"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/readManifest.js b/node_modules/@react-native-community/cli-platform-android/build/config/readManifest.js
new file mode 100644
index 0000000..7dbd4cf
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/config/readManifest.js
@@ -0,0 +1,39 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = readManifest;
+
+function _fs() {
+  const data = _interopRequireDefault(require("fs"));
+
+  _fs = function () {
+    return data;
+  };
+
+  return data;
+}
+
+function _xmldoc() {
+  const data = _interopRequireDefault(require("xmldoc"));
+
+  _xmldoc = function () {
+    return data;
+  };
+
+  return data;
+}
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+function readManifest(manifestPath) {
+  return new (_xmldoc().default.XmlDocument)(_fs().default.readFileSync(manifestPath, 'utf8'));
+}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/index.d.ts b/node_modules/@react-native-community/cli-platform-android/build/index.d.ts
index 5e749bd..9780462 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/index.d.ts
+++ b/node_modules/@react-native-community/cli-platform-android/build/index.d.ts
@@ -1,8 +1,7 @@
 /**
  * Android platform files
  */
+export { default as linkConfig } from './link';
 export { default as commands } from './commands';
-export { adb, getAdbPath, listAndroidDevices, tryRunAdbReverse, } from './commands/runAndroid';
 export { projectConfig, dependencyConfig } from './config';
-export { getAndroidProject, getPackageName } from './config/getAndroidProject';
 //# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/index.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/index.d.ts.map
index 5cece29..3826715 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/index.d.ts.map
+++ b/node_modules/@react-native-community/cli-platform-android/build/index.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA;;GAEG;AAEH,OAAO,EAAC,OAAO,IAAI,QAAQ,EAAC,MAAM,YAAY,CAAC;AAC/C,OAAO,EACL,GAAG,EACH,UAAU,EACV,kBAAkB,EAClB,gBAAgB,GACjB,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAC,aAAa,EAAE,gBAAgB,EAAC,MAAM,UAAU,CAAC;AACzD,OAAO,EAAC,iBAAiB,EAAE,cAAc,EAAC,MAAM,4BAA4B,CAAC"}
\ No newline at end of file
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA;;GAEG;AAEH,OAAO,EAAC,OAAO,IAAI,UAAU,EAAC,MAAM,QAAQ,CAAC;AAC7C,OAAO,EAAC,OAAO,IAAI,QAAQ,EAAC,MAAM,YAAY,CAAC;AAC/C,OAAO,EAAC,aAAa,EAAE,gBAAgB,EAAC,MAAM,UAAU,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/index.js b/node_modules/@react-native-community/cli-platform-android/build/index.js
index 0051d19..c66f819 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/index.js
+++ b/node_modules/@react-native-community/cli-platform-android/build/index.js
@@ -3,10 +3,10 @@
 Object.defineProperty(exports, "__esModule", {
   value: true
 });
-Object.defineProperty(exports, "adb", {
+Object.defineProperty(exports, "linkConfig", {
   enumerable: true,
   get: function () {
-    return _runAndroid.adb;
+    return _link.default;
   }
 });
 Object.defineProperty(exports, "commands", {
@@ -15,52 +15,23 @@ Object.defineProperty(exports, "commands", {
     return _commands.default;
   }
 });
-Object.defineProperty(exports, "dependencyConfig", {
-  enumerable: true,
-  get: function () {
-    return _config.dependencyConfig;
-  }
-});
-Object.defineProperty(exports, "getAdbPath", {
-  enumerable: true,
-  get: function () {
-    return _runAndroid.getAdbPath;
-  }
-});
-Object.defineProperty(exports, "getAndroidProject", {
-  enumerable: true,
-  get: function () {
-    return _getAndroidProject.getAndroidProject;
-  }
-});
-Object.defineProperty(exports, "getPackageName", {
-  enumerable: true,
-  get: function () {
-    return _getAndroidProject.getPackageName;
-  }
-});
-Object.defineProperty(exports, "listAndroidDevices", {
-  enumerable: true,
-  get: function () {
-    return _runAndroid.listAndroidDevices;
-  }
-});
 Object.defineProperty(exports, "projectConfig", {
   enumerable: true,
   get: function () {
     return _config.projectConfig;
   }
 });
-Object.defineProperty(exports, "tryRunAdbReverse", {
+Object.defineProperty(exports, "dependencyConfig", {
   enumerable: true,
   get: function () {
-    return _runAndroid.tryRunAdbReverse;
+    return _config.dependencyConfig;
   }
 });
+
+var _link = _interopRequireDefault(require("./link"));
+
 var _commands = _interopRequireDefault(require("./commands"));
-var _runAndroid = require("./commands/runAndroid");
+
 var _config = require("./config");
-var _getAndroidProject = require("./config/getAndroidProject");
-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
 
-//# sourceMappingURL=index.ts.map
\ No newline at end of file
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/index.js.map b/node_modules/@react-native-community/cli-platform-android/build/index.js.map
deleted file mode 100644
index 3b01471..0000000
--- a/node_modules/@react-native-community/cli-platform-android/build/index.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":[],"sources":["../src/index.ts"],"sourcesContent":["/**\n * Android platform files\n */\n\nexport {default as commands} from './commands';\nexport {\n  adb,\n  getAdbPath,\n  listAndroidDevices,\n  tryRunAdbReverse,\n} from './commands/runAndroid';\nexport {projectConfig, dependencyConfig} from './config';\nexport {getAndroidProject, getPackageName} from './config/getAndroidProject';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AAMA;AACA;AAA6E"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/copyAssets.d.ts b/node_modules/@react-native-community/cli-platform-android/build/link/copyAssets.d.ts
new file mode 100644
index 0000000..2055a78
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/copyAssets.d.ts
@@ -0,0 +1,17 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+/**
+ * Copies each file from an array of assets provided to targetPath directory
+ *
+ * For now, the only types of files that are handled are:
+ * - Fonts (otf, ttf) - copied to targetPath/fonts under original name
+ */
+export default function copyAssetsAndroid(files: Array<string>, project: {
+    assetsPath: string;
+}): void;
+//# sourceMappingURL=copyAssets.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/copyAssets.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/link/copyAssets.d.ts.map
new file mode 100644
index 0000000..545a381
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/copyAssets.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"copyAssets.d.ts","sourceRoot":"","sources":["../../src/link/copyAssets.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAMH;;;;;GAKG;AACH,MAAM,CAAC,OAAO,UAAU,iBAAiB,CACvC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,EACpB,OAAO,EAAE;IAAC,UAAU,EAAE,MAAM,CAAA;CAAC,QAY9B"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/copyAssets.js b/node_modules/@react-native-community/cli-platform-android/build/link/copyAssets.js
new file mode 100644
index 0000000..565d648
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/copyAssets.js
@@ -0,0 +1,68 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = copyAssetsAndroid;
+
+function _fsExtra() {
+  const data = _interopRequireDefault(require("fs-extra"));
+
+  _fsExtra = function () {
+    return data;
+  };
+
+  return data;
+}
+
+function _path() {
+  const data = _interopRequireDefault(require("path"));
+
+  _path = function () {
+    return data;
+  };
+
+  return data;
+}
+
+function _cliTools() {
+  const data = require("@react-native-community/cli-tools");
+
+  _cliTools = function () {
+    return data;
+  };
+
+  return data;
+}
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+
+/**
+ * Copies each file from an array of assets provided to targetPath directory
+ *
+ * For now, the only types of files that are handled are:
+ * - Fonts (otf, ttf) - copied to targetPath/fonts under original name
+ */
+function copyAssetsAndroid(files, project) {
+  const assets = (0, _cliTools().groupFilesByType)(files);
+
+  _cliTools().logger.debug(`Assets path: ${project.assetsPath}`);
+
+  (assets.font || []).forEach(asset => {
+    const fontsDir = _path().default.join(project.assetsPath, 'fonts');
+
+    _cliTools().logger.debug(`Copying asset ${asset}`); // @todo: replace with fs.mkdirSync(path, {recursive}) + fs.copyFileSync
+    // and get rid of fs-extra once we move to Node 10
+
+
+    _fsExtra().default.copySync(asset, _path().default.join(fontsDir, _path().default.basename(asset)));
+  });
+}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/index.d.ts b/node_modules/@react-native-community/cli-platform-android/build/link/index.d.ts
new file mode 100644
index 0000000..42766c9
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/index.d.ts
@@ -0,0 +1,21 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+import isInstalled from './isInstalled';
+import register from './registerNativeModule';
+import unregister from './unregisterNativeModule';
+import copyAssets from './copyAssets';
+import unlinkAssets from './unlinkAssets';
+export declare function getAndroidLinkConfig(): {
+    isInstalled: typeof isInstalled;
+    register: typeof register;
+    unregister: typeof unregister;
+    copyAssets: typeof copyAssets;
+    unlinkAssets: typeof unlinkAssets;
+};
+export default getAndroidLinkConfig;
+//# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/index.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/link/index.d.ts.map
new file mode 100644
index 0000000..179fcf1
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/index.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../src/link/index.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,WAAW,MAAM,eAAe,CAAC;AACxC,OAAO,QAAQ,MAAM,wBAAwB,CAAC;AAC9C,OAAO,UAAU,MAAM,0BAA0B,CAAC;AAClD,OAAO,UAAU,MAAM,cAAc,CAAC;AACtC,OAAO,YAAY,MAAM,gBAAgB,CAAC;AAE1C,wBAAgB,oBAAoB;;;;;;EAEnC;AAED,eAAe,oBAAoB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/index.js b/node_modules/@react-native-community/cli-platform-android/build/link/index.js
new file mode 100644
index 0000000..be0b7f1
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/index.js
@@ -0,0 +1,39 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.getAndroidLinkConfig = getAndroidLinkConfig;
+exports.default = void 0;
+
+var _isInstalled = _interopRequireDefault(require("./isInstalled"));
+
+var _registerNativeModule = _interopRequireDefault(require("./registerNativeModule"));
+
+var _unregisterNativeModule = _interopRequireDefault(require("./unregisterNativeModule"));
+
+var _copyAssets = _interopRequireDefault(require("./copyAssets"));
+
+var _unlinkAssets = _interopRequireDefault(require("./unlinkAssets"));
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+function getAndroidLinkConfig() {
+  return {
+    isInstalled: _isInstalled.default,
+    register: _registerNativeModule.default,
+    unregister: _unregisterNativeModule.default,
+    copyAssets: _copyAssets.default,
+    unlinkAssets: _unlinkAssets.default
+  };
+}
+
+var _default = getAndroidLinkConfig;
+exports.default = _default;
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/isInstalled.d.ts b/node_modules/@react-native-community/cli-platform-android/build/link/isInstalled.d.ts
new file mode 100644
index 0000000..37b7c85
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/isInstalled.d.ts
@@ -0,0 +1,11 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+export default function isInstalled(config: {
+    buildGradlePath: string;
+}, name: string): boolean;
+//# sourceMappingURL=isInstalled.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/isInstalled.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/link/isInstalled.d.ts.map
new file mode 100644
index 0000000..e7c8db8
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/isInstalled.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"isInstalled.d.ts","sourceRoot":"","sources":["../../src/link/isInstalled.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAKH,MAAM,CAAC,OAAO,UAAU,WAAW,CACjC,MAAM,EAAE;IAAC,eAAe,EAAE,MAAM,CAAA;CAAC,EACjC,IAAI,EAAE,MAAM,WAIb"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/isInstalled.js b/node_modules/@react-native-community/cli-platform-android/build/link/isInstalled.js
new file mode 100644
index 0000000..901e1e0
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/isInstalled.js
@@ -0,0 +1,33 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = isInstalled;
+
+function _fs() {
+  const data = _interopRequireDefault(require("fs"));
+
+  _fs = function () {
+    return data;
+  };
+
+  return data;
+}
+
+var _makeBuildPatch = _interopRequireDefault(require("./patches/makeBuildPatch"));
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+function isInstalled(config, name) {
+  const buildGradle = _fs().default.readFileSync(config.buildGradlePath, 'utf8');
+
+  return (0, _makeBuildPatch.default)(name).installPattern.test(buildGradle);
+}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/applyParams.d.ts b/node_modules/@react-native-community/cli-platform-android/build/link/patches/applyParams.d.ts
new file mode 100644
index 0000000..8de84f3
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/applyParams.d.ts
@@ -0,0 +1,10 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+import { AndroidProjectParams } from '@react-native-community/cli-types';
+export default function applyParams(str: string, params: AndroidProjectParams, prefix: string): string;
+//# sourceMappingURL=applyParams.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/applyParams.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/link/patches/applyParams.d.ts.map
new file mode 100644
index 0000000..496f572
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/applyParams.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"applyParams.d.ts","sourceRoot":"","sources":["../../../src/link/patches/applyParams.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,EAAC,oBAAoB,EAAC,MAAM,mCAAmC,CAAC;AAEvE,MAAM,CAAC,OAAO,UAAU,WAAW,CACjC,GAAG,EAAE,MAAM,EACX,MAAM,EAAE,oBAAoB,EAC5B,MAAM,EAAE,MAAM,UAUf"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/applyParams.js b/node_modules/@react-native-community/cli-platform-android/build/link/patches/applyParams.js
new file mode 100644
index 0000000..5a81ab6
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/applyParams.js
@@ -0,0 +1,31 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = applyParams;
+
+function _lodash() {
+  const data = require("lodash");
+
+  _lodash = function () {
+    return data;
+  };
+
+  return data;
+}
+
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+function applyParams(str, params, prefix) {
+  return str.replace(/\$\{(\w+)\}/g, (_pattern, param) => {
+    const name = `${(0, _lodash().camelCase)(prefix)}_${param}`; // @ts-ignore
+
+    return params[param] ? `getResources().getString(R.string.${name})` : 'null';
+  });
+}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/applyPatch.d.ts b/node_modules/@react-native-community/cli-platform-android/build/link/patches/applyPatch.d.ts
new file mode 100644
index 0000000..4ac6088
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/applyPatch.d.ts
@@ -0,0 +1,12 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+export default function applyPatch(file: string, patch: {
+    patch: string;
+    pattern: string | RegExp;
+}): void;
+//# sourceMappingURL=applyPatch.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/applyPatch.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/link/patches/applyPatch.d.ts.map
new file mode 100644
index 0000000..3d3b48a
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/applyPatch.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"applyPatch.d.ts","sourceRoot":"","sources":["../../../src/link/patches/applyPatch.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAKH,MAAM,CAAC,OAAO,UAAU,UAAU,CAChC,IAAI,EAAE,MAAM,EACZ,KAAK,EAAE;IAAC,KAAK,EAAE,MAAM,CAAC;IAAC,OAAO,EAAE,MAAM,GAAG,MAAM,CAAA;CAAC,QAYjD"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/applyPatch.js b/node_modules/@react-native-community/cli-platform-android/build/link/patches/applyPatch.js
new file mode 100644
index 0000000..435c75c
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/applyPatch.js
@@ -0,0 +1,43 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = applyPatch;
+
+function _fs() {
+  const data = _interopRequireDefault(require("fs"));
+
+  _fs = function () {
+    return data;
+  };
+
+  return data;
+}
+
+function _cliTools() {
+  const data = require("@react-native-community/cli-tools");
+
+  _cliTools = function () {
+    return data;
+  };
+
+  return data;
+}
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+function applyPatch(file, patch) {
+  if (file) {
+    _cliTools().logger.debug(`Patching ${file}`);
+  }
+
+  _fs().default.writeFileSync(file, _fs().default.readFileSync(file, 'utf8').replace(patch.pattern, match => `${match}${patch.patch}`));
+}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeBuildPatch.d.ts b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeBuildPatch.d.ts
new file mode 100644
index 0000000..c4d3467
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeBuildPatch.d.ts
@@ -0,0 +1,13 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+export default function makeBuildPatch(name: string, buildGradlePath?: string): {
+    installPattern: RegExp;
+    pattern: RegExp;
+    patch: string;
+};
+//# sourceMappingURL=makeBuildPatch.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeBuildPatch.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeBuildPatch.d.ts.map
new file mode 100644
index 0000000..cffb6b0
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeBuildPatch.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"makeBuildPatch.d.ts","sourceRoot":"","sources":["../../../src/link/patches/makeBuildPatch.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAOH,MAAM,CAAC,OAAO,UAAU,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE,eAAe,CAAC,EAAE,MAAM;;;;EAW5E"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeBuildPatch.js b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeBuildPatch.js
new file mode 100644
index 0000000..9440b4d
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeBuildPatch.js
@@ -0,0 +1,64 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = makeBuildPatch;
+
+function _fs() {
+  const data = _interopRequireDefault(require("fs"));
+
+  _fs = function () {
+    return data;
+  };
+
+  return data;
+}
+
+var _normalizeProjectName = _interopRequireDefault(require("./normalizeProjectName"));
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+const depConfigs = ['compile', 'api', 'implementation'];
+
+function makeBuildPatch(name, buildGradlePath) {
+  const normalizedProjectName = (0, _normalizeProjectName.default)(name);
+  const installPattern = new RegExp(buildDepRegExp(normalizedProjectName, ...depConfigs));
+  return {
+    installPattern,
+    pattern: /[^ \t]dependencies {(\r\n|\n)/,
+    patch: makePatchString(normalizedProjectName, buildGradlePath)
+  };
+}
+
+function makePatchString(normalizedProjectName, buildGradlePath) {
+  const defaultPatchString = `    implementation project(':${normalizedProjectName}')\n`;
+
+  if (!buildGradlePath) {
+    return defaultPatchString;
+  }
+
+  const buildGradle = _fs().default.readFileSync(buildGradlePath, 'utf8');
+
+  for (const config of depConfigs) {
+    const depPattern = new RegExp(buildDepRegExp(normalizedProjectName, config));
+
+    if (depPattern.test(buildGradle)) {
+      return `    ${config} project(':${normalizedProjectName}')\n`;
+    }
+  }
+
+  return defaultPatchString;
+}
+
+function buildDepRegExp(normalizedProjectName, ...configs) {
+  const orConfigs = configs.join('|');
+  return `(${orConfigs})\\w*\\s*\\(*project\\s*\\(['"]:${normalizedProjectName}['"]\\)`;
+}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeImportPatch.d.ts b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeImportPatch.d.ts
new file mode 100644
index 0000000..2eacb33
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeImportPatch.d.ts
@@ -0,0 +1,12 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+export default function makeImportPatch(packageImportPath: string): {
+    pattern: string;
+    patch: string;
+};
+//# sourceMappingURL=makeImportPatch.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeImportPatch.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeImportPatch.d.ts.map
new file mode 100644
index 0000000..ac72c06
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeImportPatch.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"makeImportPatch.d.ts","sourceRoot":"","sources":["../../../src/link/patches/makeImportPatch.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,MAAM,CAAC,OAAO,UAAU,eAAe,CAAC,iBAAiB,EAAE,MAAM;;;EAKhE"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeImportPatch.js b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeImportPatch.js
new file mode 100644
index 0000000..05f4209
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeImportPatch.js
@@ -0,0 +1,20 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = makeImportPatch;
+
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+function makeImportPatch(packageImportPath) {
+  return {
+    pattern: 'import com.facebook.react.ReactApplication;',
+    patch: `\n${packageImportPath}`
+  };
+}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/makePackagePatch.d.ts b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makePackagePatch.d.ts
new file mode 100644
index 0000000..82e5100
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makePackagePatch.d.ts
@@ -0,0 +1,13 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+import { AndroidProjectParams } from '@react-native-community/cli-types';
+export default function makePackagePatch(packageInstance: string, params: AndroidProjectParams, prefix: string): {
+    pattern: string;
+    patch: string;
+};
+//# sourceMappingURL=makePackagePatch.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/makePackagePatch.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makePackagePatch.d.ts.map
new file mode 100644
index 0000000..390a926
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makePackagePatch.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"makePackagePatch.d.ts","sourceRoot":"","sources":["../../../src/link/patches/makePackagePatch.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,EAAC,oBAAoB,EAAC,MAAM,mCAAmC,CAAC;AAEvE,MAAM,CAAC,OAAO,UAAU,gBAAgB,CACtC,eAAe,EAAE,MAAM,EACvB,MAAM,EAAE,oBAAoB,EAC5B,MAAM,EAAE,MAAM;;;EAQf"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/makePackagePatch.js b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makePackagePatch.js
new file mode 100644
index 0000000..deb7923
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makePackagePatch.js
@@ -0,0 +1,25 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = makePackagePatch;
+
+var _applyParams = _interopRequireDefault(require("./applyParams"));
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+function makePackagePatch(packageInstance, params, prefix) {
+  const processedInstance = (0, _applyParams.default)(packageInstance, params, prefix);
+  return {
+    pattern: 'new MainReactPackage()',
+    patch: `,\n            ${processedInstance}`
+  };
+}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeSettingsPatch.d.ts b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeSettingsPatch.d.ts
new file mode 100644
index 0000000..527fd14
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeSettingsPatch.d.ts
@@ -0,0 +1,16 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+export default function makeSettingsPatch(name: string, androidConfig: {
+    sourceDir: string;
+}, projectConfig: {
+    settingsGradlePath: string;
+}): {
+    pattern: string;
+    patch: string;
+};
+//# sourceMappingURL=makeSettingsPatch.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeSettingsPatch.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeSettingsPatch.d.ts.map
new file mode 100644
index 0000000..db8d87c
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeSettingsPatch.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"makeSettingsPatch.d.ts","sourceRoot":"","sources":["../../../src/link/patches/makeSettingsPatch.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAMH,MAAM,CAAC,OAAO,UAAU,iBAAiB,CACvC,IAAI,EAAE,MAAM,EACZ,aAAa,EAAE;IAAC,SAAS,EAAE,MAAM,CAAA;CAAC,EAClC,aAAa,EAAE;IAAC,kBAAkB,EAAE,MAAM,CAAA;CAAC;;;EAkB5C"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeSettingsPatch.js b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeSettingsPatch.js
new file mode 100644
index 0000000..299c139
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeSettingsPatch.js
@@ -0,0 +1,47 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = makeSettingsPatch;
+
+function _path() {
+  const data = _interopRequireDefault(require("path"));
+
+  _path = function () {
+    return data;
+  };
+
+  return data;
+}
+
+function _slash() {
+  const data = _interopRequireDefault(require("slash"));
+
+  _slash = function () {
+    return data;
+  };
+
+  return data;
+}
+
+var _normalizeProjectName = _interopRequireDefault(require("./normalizeProjectName"));
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+function makeSettingsPatch(name, androidConfig, projectConfig) {
+  // Gradle expects paths to be posix even on Windows
+  const projectDir = (0, _slash().default)(_path().default.relative(_path().default.dirname(projectConfig.settingsGradlePath), androidConfig.sourceDir));
+  const normalizedProjectName = (0, _normalizeProjectName.default)(name);
+  return {
+    pattern: '\n',
+    patch: `include ':${normalizedProjectName}'\n` + `project(':${normalizedProjectName}').projectDir = ` + `new File(rootProject.projectDir, '${projectDir}')\n`
+  };
+}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeStringsPatch.d.ts b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeStringsPatch.d.ts
new file mode 100644
index 0000000..9b1a2dd
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeStringsPatch.d.ts
@@ -0,0 +1,13 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+import { AndroidProjectParams } from '@react-native-community/cli-types';
+export default function makeStringsPatch(params: AndroidProjectParams, prefix: string): {
+    pattern: string;
+    patch: string;
+};
+//# sourceMappingURL=makeStringsPatch.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeStringsPatch.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeStringsPatch.d.ts.map
new file mode 100644
index 0000000..f6787ac
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeStringsPatch.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"makeStringsPatch.d.ts","sourceRoot":"","sources":["../../../src/link/patches/makeStringsPatch.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,EAAC,oBAAoB,EAAC,MAAM,mCAAmC,CAAC;AAEvE,MAAM,CAAC,OAAO,UAAU,gBAAgB,CACtC,MAAM,EAAE,oBAAoB,EAC5B,MAAM,EAAE,MAAM;;;EAiBf"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeStringsPatch.js b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeStringsPatch.js
new file mode 100644
index 0000000..4bab556
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/makeStringsPatch.js
@@ -0,0 +1,36 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = makeStringsPatch;
+
+function _lodash() {
+  const data = require("lodash");
+
+  _lodash = function () {
+    return data;
+  };
+
+  return data;
+}
+
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+function makeStringsPatch(params, prefix) {
+  const values = Object.keys(params).map(param => {
+    const name = `${(0, _lodash().camelCase)(prefix)}_${param}`;
+    return '    ' + // @ts-ignore
+    `<string moduleConfig="true" name="${name}">${params[param]}</string>`;
+  });
+  const patch = values.length > 0 ? `${values.join('\n')}\n` : '';
+  return {
+    pattern: '<resources>\n',
+    patch
+  };
+}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/config/findAndroidDir.d.ts b/node_modules/@react-native-community/cli-platform-android/build/link/patches/normalizeProjectName.d.ts
similarity index 61%
rename from node_modules/@react-native-community/cli-platform-android/build/config/findAndroidDir.d.ts
rename to node_modules/@react-native-community/cli-platform-android/build/link/patches/normalizeProjectName.d.ts
index 793113e..ee0c37c 100644
--- a/node_modules/@react-native-community/cli-platform-android/build/config/findAndroidDir.d.ts
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/normalizeProjectName.d.ts
@@ -5,5 +5,5 @@
  * LICENSE file in the root directory of this source tree.
  *
  */
-export default function findAndroidDir(root: string): "android" | null;
-//# sourceMappingURL=findAndroidDir.d.ts.map
\ No newline at end of file
+export default function normalizeProjectName(name: string): string;
+//# sourceMappingURL=normalizeProjectName.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/normalizeProjectName.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/link/patches/normalizeProjectName.d.ts.map
new file mode 100644
index 0000000..e4a2c9a
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/normalizeProjectName.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"normalizeProjectName.d.ts","sourceRoot":"","sources":["../../../src/link/patches/normalizeProjectName.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,MAAM,CAAC,OAAO,UAAU,oBAAoB,CAAC,IAAI,EAAE,MAAM,UAExD"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/normalizeProjectName.js b/node_modules/@react-native-community/cli-platform-android/build/link/patches/normalizeProjectName.js
new file mode 100644
index 0000000..88bbccd
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/normalizeProjectName.js
@@ -0,0 +1,17 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = normalizeProjectName;
+
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+function normalizeProjectName(name) {
+  return name.replace(/\//g, '_');
+}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/revokePatch.d.ts b/node_modules/@react-native-community/cli-platform-android/build/link/patches/revokePatch.d.ts
new file mode 100644
index 0000000..450f739
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/revokePatch.d.ts
@@ -0,0 +1,11 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+export default function revokePatch(file: string, patch: {
+    patch: string;
+}): void;
+//# sourceMappingURL=revokePatch.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/revokePatch.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/link/patches/revokePatch.d.ts.map
new file mode 100644
index 0000000..5cce352
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/revokePatch.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"revokePatch.d.ts","sourceRoot":"","sources":["../../../src/link/patches/revokePatch.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAKH,MAAM,CAAC,OAAO,UAAU,WAAW,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE;IAAC,KAAK,EAAE,MAAM,CAAA;CAAC,QASvE"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/patches/revokePatch.js b/node_modules/@react-native-community/cli-platform-android/build/link/patches/revokePatch.js
new file mode 100644
index 0000000..8b64ef2
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/patches/revokePatch.js
@@ -0,0 +1,43 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = revokePatch;
+
+function _fs() {
+  const data = _interopRequireDefault(require("fs"));
+
+  _fs = function () {
+    return data;
+  };
+
+  return data;
+}
+
+function _cliTools() {
+  const data = require("@react-native-community/cli-tools");
+
+  _cliTools = function () {
+    return data;
+  };
+
+  return data;
+}
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+function revokePatch(file, patch) {
+  if (file) {
+    _cliTools().logger.debug(`Patching ${file}`);
+  }
+
+  _fs().default.writeFileSync(file, _fs().default.readFileSync(file, 'utf8').replace(patch.patch, ''));
+}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/registerNativeModule.d.ts b/node_modules/@react-native-community/cli-platform-android/build/link/registerNativeModule.d.ts
new file mode 100644
index 0000000..a199c5d
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/registerNativeModule.d.ts
@@ -0,0 +1,10 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+import { AndroidProjectConfig, AndroidDependencyConfig, AndroidProjectParams } from '@react-native-community/cli-types';
+export default function registerNativeAndroidModule(name: string, androidConfig: AndroidDependencyConfig, params: AndroidProjectParams, projectConfig: AndroidProjectConfig): void;
+//# sourceMappingURL=registerNativeModule.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/registerNativeModule.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/link/registerNativeModule.d.ts.map
new file mode 100644
index 0000000..9d77e74
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/registerNativeModule.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"registerNativeModule.d.ts","sourceRoot":"","sources":["../../src/link/registerNativeModule.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAQH,OAAO,EACL,oBAAoB,EACpB,uBAAuB,EACvB,oBAAoB,EACrB,MAAM,mCAAmC,CAAC;AAE3C,MAAM,CAAC,OAAO,UAAU,2BAA2B,CACjD,IAAI,EAAE,MAAM,EACZ,aAAa,EAAE,uBAAuB,EACtC,MAAM,EAAE,oBAAoB,EAC5B,aAAa,EAAE,oBAAoB,QAqBpC"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/registerNativeModule.js b/node_modules/@react-native-community/cli-platform-android/build/link/registerNativeModule.js
new file mode 100644
index 0000000..fadbcd1
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/registerNativeModule.js
@@ -0,0 +1,36 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = registerNativeAndroidModule;
+
+var _applyPatch = _interopRequireDefault(require("./patches/applyPatch"));
+
+var _makeStringsPatch = _interopRequireDefault(require("./patches/makeStringsPatch"));
+
+var _makeSettingsPatch = _interopRequireDefault(require("./patches/makeSettingsPatch"));
+
+var _makeBuildPatch = _interopRequireDefault(require("./patches/makeBuildPatch"));
+
+var _makeImportPatch = _interopRequireDefault(require("./patches/makeImportPatch"));
+
+var _makePackagePatch = _interopRequireDefault(require("./patches/makePackagePatch"));
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+function registerNativeAndroidModule(name, androidConfig, params, projectConfig) {
+  const buildPatch = (0, _makeBuildPatch.default)(name);
+  (0, _applyPatch.default)(projectConfig.settingsGradlePath, (0, _makeSettingsPatch.default)(name, androidConfig, projectConfig));
+  (0, _applyPatch.default)(projectConfig.buildGradlePath, buildPatch);
+  (0, _applyPatch.default)(projectConfig.stringsPath, (0, _makeStringsPatch.default)(params, name));
+  (0, _applyPatch.default)(projectConfig.mainFilePath, (0, _makePackagePatch.default)(androidConfig.packageInstance, params, name));
+  (0, _applyPatch.default)(projectConfig.mainFilePath, (0, _makeImportPatch.default)(androidConfig.packageImportPath));
+}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/unlinkAssets.d.ts b/node_modules/@react-native-community/cli-platform-android/build/link/unlinkAssets.d.ts
new file mode 100644
index 0000000..612ad5d
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/unlinkAssets.d.ts
@@ -0,0 +1,17 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+/**
+ * Copies each file from an array of assets provided to targetPath directory
+ *
+ * For now, the only types of files that are handled are:
+ * - Fonts (otf, ttf) - copied to targetPath/fonts under original name
+ */
+export default function unlinkAssetsAndroid(files: Array<string>, project: {
+    assetsPath: string;
+}): void;
+//# sourceMappingURL=unlinkAssets.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/unlinkAssets.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/link/unlinkAssets.d.ts.map
new file mode 100644
index 0000000..7454387
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/unlinkAssets.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"unlinkAssets.d.ts","sourceRoot":"","sources":["../../src/link/unlinkAssets.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAMH;;;;;GAKG;AACH,MAAM,CAAC,OAAO,UAAU,mBAAmB,CACzC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,EACpB,OAAO,EAAE;IAAC,UAAU,EAAE,MAAM,CAAA;CAAC,QAgB9B"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/unlinkAssets.js b/node_modules/@react-native-community/cli-platform-android/build/link/unlinkAssets.js
new file mode 100644
index 0000000..c01b1fc
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/unlinkAssets.js
@@ -0,0 +1,68 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = unlinkAssetsAndroid;
+
+function _fs() {
+  const data = _interopRequireDefault(require("fs"));
+
+  _fs = function () {
+    return data;
+  };
+
+  return data;
+}
+
+function _path() {
+  const data = _interopRequireDefault(require("path"));
+
+  _path = function () {
+    return data;
+  };
+
+  return data;
+}
+
+function _cliTools() {
+  const data = require("@react-native-community/cli-tools");
+
+  _cliTools = function () {
+    return data;
+  };
+
+  return data;
+}
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+
+/**
+ * Copies each file from an array of assets provided to targetPath directory
+ *
+ * For now, the only types of files that are handled are:
+ * - Fonts (otf, ttf) - copied to targetPath/fonts under original name
+ */
+function unlinkAssetsAndroid(files, project) {
+  const assets = (0, _cliTools().groupFilesByType)(files);
+
+  _cliTools().logger.debug(`Assets path: ${project.assetsPath}`);
+
+  (assets.font || []).forEach(file => {
+    const filePath = _path().default.join(project.assetsPath, 'fonts', _path().default.basename(file));
+
+    if (_fs().default.existsSync(filePath)) {
+      _cliTools().logger.debug(`Removing asset ${filePath}`);
+
+      _fs().default.unlinkSync(filePath);
+    }
+  });
+}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/unregisterNativeModule.d.ts b/node_modules/@react-native-community/cli-platform-android/build/link/unregisterNativeModule.d.ts
new file mode 100644
index 0000000..702360f
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/unregisterNativeModule.d.ts
@@ -0,0 +1,10 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+import { AndroidProjectConfig, AndroidDependencyConfig } from '@react-native-community/cli-types';
+export default function unregisterNativeAndroidModule(name: string, androidConfig: AndroidDependencyConfig, projectConfig: AndroidProjectConfig): void;
+//# sourceMappingURL=unregisterNativeModule.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/unregisterNativeModule.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/link/unregisterNativeModule.d.ts.map
new file mode 100644
index 0000000..bcc15a0
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/unregisterNativeModule.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"unregisterNativeModule.d.ts","sourceRoot":"","sources":["../../src/link/unregisterNativeModule.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAWH,OAAO,EACL,oBAAoB,EACpB,uBAAuB,EACxB,MAAM,mCAAmC,CAAC;AAE3C,MAAM,CAAC,OAAO,UAAU,6BAA6B,CACnD,IAAI,EAAE,MAAM,EACZ,aAAa,EAAE,uBAAuB,EACtC,aAAa,EAAE,oBAAoB,QAgCpC"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/unregisterNativeModule.js b/node_modules/@react-native-community/cli-platform-android/build/link/unregisterNativeModule.js
new file mode 100644
index 0000000..e3b0279
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/unregisterNativeModule.js
@@ -0,0 +1,65 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = unregisterNativeAndroidModule;
+
+function _fs() {
+  const data = _interopRequireDefault(require("fs"));
+
+  _fs = function () {
+    return data;
+  };
+
+  return data;
+}
+
+function _lodash() {
+  const data = require("lodash");
+
+  _lodash = function () {
+    return data;
+  };
+
+  return data;
+}
+
+var _revokePatch = _interopRequireDefault(require("./patches/revokePatch"));
+
+var _makeSettingsPatch = _interopRequireDefault(require("./patches/makeSettingsPatch"));
+
+var _makeBuildPatch = _interopRequireDefault(require("./patches/makeBuildPatch"));
+
+var _makeStringsPatch = _interopRequireDefault(require("./patches/makeStringsPatch"));
+
+var _makeImportPatch = _interopRequireDefault(require("./patches/makeImportPatch"));
+
+var _makePackagePatch = _interopRequireDefault(require("./patches/makePackagePatch"));
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+function unregisterNativeAndroidModule(name, androidConfig, projectConfig) {
+  const buildPatch = (0, _makeBuildPatch.default)(name, projectConfig.buildGradlePath);
+
+  const strings = _fs().default.readFileSync(projectConfig.stringsPath, 'utf8');
+
+  const params = {};
+  strings.replace(/moduleConfig="true" name="(\w+)">(.*)</g, // @ts-ignore
+  (_, param, value) => {
+    // @ts-ignore
+    params[param.slice((0, _lodash().camelCase)(name).length + 1)] = value;
+  });
+  (0, _revokePatch.default)(projectConfig.settingsGradlePath, (0, _makeSettingsPatch.default)(name, androidConfig, projectConfig));
+  (0, _revokePatch.default)(projectConfig.buildGradlePath, buildPatch);
+  (0, _revokePatch.default)(projectConfig.stringsPath, (0, _makeStringsPatch.default)(params, name));
+  (0, _revokePatch.default)(projectConfig.mainFilePath, (0, _makePackagePatch.default)(androidConfig.packageInstance, params, name));
+  (0, _revokePatch.default)(projectConfig.mainFilePath, (0, _makeImportPatch.default)(androidConfig.packageImportPath));
+}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/warnAboutManuallyLinkedLibs.d.ts b/node_modules/@react-native-community/cli-platform-android/build/link/warnAboutManuallyLinkedLibs.d.ts
new file mode 100644
index 0000000..c6c1ae0
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/warnAboutManuallyLinkedLibs.d.ts
@@ -0,0 +1,3 @@
+import { Config } from '@react-native-community/cli-types';
+export default function warnAboutManuallyLinkedLibs(config: Config, platform?: string, linkConfig?: ReturnType<Config['platforms']['android']['linkConfig']>): void;
+//# sourceMappingURL=warnAboutManuallyLinkedLibs.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/warnAboutManuallyLinkedLibs.d.ts.map b/node_modules/@react-native-community/cli-platform-android/build/link/warnAboutManuallyLinkedLibs.d.ts.map
new file mode 100644
index 0000000..37c5fda
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/warnAboutManuallyLinkedLibs.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"warnAboutManuallyLinkedLibs.d.ts","sourceRoot":"","sources":["../../src/link/warnAboutManuallyLinkedLibs.ts"],"names":[],"mappings":"AAGA,OAAO,EAAC,MAAM,EAAC,MAAM,mCAAmC,CAAC;AAIzD,MAAM,CAAC,OAAO,UAAU,2BAA2B,CACjD,MAAM,EAAE,MAAM,EACd,QAAQ,GAAE,MAAkB,EAC5B,UAAU,GAAE,UAAU,CACpB,MAAM,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,CAC3B,QAwCpB"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/build/link/warnAboutManuallyLinkedLibs.js b/node_modules/@react-native-community/cli-platform-android/build/link/warnAboutManuallyLinkedLibs.js
new file mode 100644
index 0000000..81cff70
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-android/build/link/warnAboutManuallyLinkedLibs.js
@@ -0,0 +1,58 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = warnAboutManuallyLinkedLibs;
+
+function _chalk() {
+  const data = _interopRequireDefault(require("chalk"));
+
+  _chalk = function () {
+    return data;
+  };
+
+  return data;
+}
+
+function _cliTools() {
+  const data = require("@react-native-community/cli-tools");
+
+  _cliTools = function () {
+    return data;
+  };
+
+  return data;
+}
+
+var _index = _interopRequireDefault(require("./index"));
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+// TODO: move to cli-tools once platform-ios and platform-android are migrated
+// to TS and unify with iOS implementation
+function warnAboutManuallyLinkedLibs(config, platform = 'android', linkConfig = (0, _index.default)()) {
+  let deps = [];
+
+  for (let key in config.dependencies) {
+    const dependency = config.dependencies[key];
+
+    try {
+      const projectConfig = config.project[platform];
+      const dependencyConfig = dependency.platforms[platform];
+
+      if (projectConfig && dependencyConfig) {
+        const x = linkConfig.isInstalled(projectConfig, dependency.name, dependencyConfig);
+        deps = deps.concat(x ? dependency.name : []);
+      }
+    } catch (error) {
+      _cliTools().logger.debug('Checking manually linked modules failed.', error);
+    }
+  }
+
+  const installedModules = [...new Set(deps)];
+
+  if (installedModules.length) {
+    _cliTools().logger.error(`React Native CLI uses autolinking for native dependencies, but the following modules are linked manually: \n${installedModules.map(x => `  - ${_chalk().default.bold(x)} ${_chalk().default.dim(`(to unlink run: "react-native unlink ${x}")`)}`).join('\n')}\nThis is likely happening when upgrading React Native from below 0.60 to 0.60 or above. Going forward, you can unlink this dependency via "react-native unlink <dependency>" and it will be included in your app automatically. If a library isn't compatible with autolinking, disregard this message and notify the library maintainers.\nRead more about autolinking: ${_chalk().default.dim.underline('https://github.com/react-native-community/cli/blob/master/docs/autolinking.md')}`);
+  }
+}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-android/native_modules.gradle b/node_modules/@react-native-community/cli-platform-android/native_modules.gradle
index d03521c..e9b0ae6 100644
--- a/node_modules/@react-native-community/cli-platform-android/native_modules.gradle
+++ b/node_modules/@react-native-community/cli-platform-android/native_modules.gradle
@@ -2,6 +2,7 @@ import groovy.json.JsonSlurper
 import org.gradle.initialization.DefaultSettings
 import org.apache.tools.ant.taskdefs.condition.Os
 
+def jsAppDir = buildscript.sourceFile.toString().split("node_modules(/|\\\\)@react-native-community(/|\\\\)cli-platform-android")[0]
 def generatedFileName = "PackageList.java"
 def generatedFilePackage = "com.facebook.react"
 def generatedFileContentsTemplate = """
@@ -68,102 +69,21 @@ public class PackageList {
 }
 """
 
-def cmakeTemplate = """# This code was generated by [React Native CLI](https://www.npmjs.com/package/@react-native-community/cli)
-
-cmake_minimum_required(VERSION 3.13)
-set(CMAKE_VERBOSE_MAKEFILE on)
-
-{{ libraryIncludes }}
-
-set(AUTOLINKED_LIBRARIES
-  {{ libraryModules }}
-)
-"""
-
-def rncliCppTemplate = """/**
- * This code was generated by [React Native CLI](https://www.npmjs.com/package/@react-native-community/cli).
- *
- * Do not edit this file as changes may cause incorrect behavior and will be lost
- * once the code is regenerated.
- *
- */
-
-#include "rncli.h"
-{{ rncliCppIncludes }}
-
-namespace facebook {
-namespace react {
-
-{{ rncliReactLegacyComponentNames }}
-
-std::shared_ptr<TurboModule> rncli_ModuleProvider(const std::string moduleName, const JavaTurboModule::InitParams &params) {
-{{ rncliCppTurboModuleJavaProviders }}
-  return nullptr;
-}
-
-std::shared_ptr<TurboModule> rncli_cxxModuleProvider(const std::string moduleName, const std::shared_ptr<CallInvoker>& jsInvoker) {
-{{ rncliCppTurboModuleCxxProviders }}
-  return nullptr;
-}
-
-void rncli_registerProviders(std::shared_ptr<ComponentDescriptorProviderRegistry const> providerRegistry) {
-{{ rncliCppComponentDescriptors }}
-{{ rncliReactLegacyComponentDescriptors }}
-  return;
-}
-
-} // namespace react
-} // namespace facebook
-"""
-
-def rncliHTemplate = """/**
- * This code was generated by [React Native CLI](https://www.npmjs.com/package/@react-native-community/cli).
- *
- * Do not edit this file as changes may cause incorrect behavior and will be lost
- * once the code is regenerated.
- *
- */
-
-#pragma once
-
-#include <ReactCommon/CallInvoker.h>
-#include <ReactCommon/JavaTurboModule.h>
-#include <ReactCommon/TurboModule.h>
-#include <jsi/jsi.h>
-#include <react/renderer/componentregistry/ComponentDescriptorProviderRegistry.h>
-
-namespace facebook {
-namespace react {
-
-std::shared_ptr<TurboModule> rncli_ModuleProvider(const std::string moduleName, const JavaTurboModule::InitParams &params);
-std::shared_ptr<TurboModule> rncli_cxxModuleProvider(const std::string moduleName, const std::shared_ptr<CallInvoker>& jsInvoker);
-void rncli_registerProviders(std::shared_ptr<ComponentDescriptorProviderRegistry const> providerRegistry);
-
-} // namespace react
-} // namespace facebook
-"""
-
 class ReactNativeModules {
   private Logger logger
-  private ProviderFactory providers
   private String packageName
-  private File root
+  private String jsAppDir
   private ArrayList<HashMap<String, String>> reactNativeModules
-  private HashMap<String, ArrayList> reactNativeModulesBuildVariants
-  private String reactNativeVersion
 
   private static String LOG_PREFIX = ":ReactNative:"
 
-  ReactNativeModules(Logger logger, ProviderFactory providers, File root) {
+  ReactNativeModules(Logger logger, String jsAppDir) {
     this.logger = logger
-    this.providers = providers
-    this.root = root
+    this.jsAppDir = jsAppDir
 
-    def (nativeModules, reactNativeModulesBuildVariants, androidProject, reactNativeVersion) = this.getReactNativeConfig()
+    def (nativeModules, packageName) = this.getReactNativeConfig()
     this.reactNativeModules = nativeModules
-    this.reactNativeModulesBuildVariants = reactNativeModulesBuildVariants
-    this.packageName = androidProject["packageName"]
-    this.reactNativeVersion = reactNativeVersion
+    this.packageName = packageName
   }
 
   /**
@@ -184,25 +104,9 @@ class ReactNativeModules {
   void addReactNativeModuleDependencies(Project appProject) {
     reactNativeModules.forEach { reactNativeModule ->
       def nameCleansed = reactNativeModule["nameCleansed"]
-      def dependencyConfiguration = reactNativeModule["dependencyConfiguration"]
       appProject.dependencies {
-        if (reactNativeModulesBuildVariants.containsKey(nameCleansed)) {
-          reactNativeModulesBuildVariants
-            .get(nameCleansed)
-            .forEach { buildVariant ->
-              if(dependencyConfiguration != null) {
-                "${buildVariant}${dependencyConfiguration}"
-              } else {
-                "${buildVariant}Implementation" project(path: ":${nameCleansed}")
-              }
-            }
-        } else {
-          if(dependencyConfiguration != null) {
-            "${dependencyConfiguration}"
-          } else {
-             implementation project(path: ":${nameCleansed}")
-          }
-        }
+        // TODO(salakar): are other dependency scope methods such as `api` required?
+        implementation project(path: ":${nameCleansed}")
       }
     }
   }
@@ -222,37 +126,11 @@ class ReactNativeModules {
     String packageClassInstances = ""
 
     if (packages.size() > 0) {
-      def interpolateDynamicValues = {
-        it
-                // Before adding the package replacement mechanism,
-                // BuildConfig and R classes were imported automatically
-                // into the scope of the file. We want to replace all
-                // non-FQDN references to those classes with the package name
-                // of the MainApplication.
-                //
-                // We want to match "R" or "BuildConfig":
-                //  - new Package(R.string…),
-                //  - Module.configure(BuildConfig);
-                //    ^ hence including (BuildConfig|R)
-                // but we don't want to match "R":
-                //  - new Package(getResources…),
-                //  - new PackageR…,
-                //  - new Royal…,
-                //    ^ hence excluding \w before and after matches
-                // and "BuildConfig" that has FQDN reference:
-                //  - Module.configure(com.acme.BuildConfig);
-                //    ^ hence excluding . before the match.
-                .replaceAll(~/([^.\w])(BuildConfig|R)([^\w])/, {
-                  wholeString, prefix, className, suffix ->
-                    "${prefix}${packageName}.${className}${suffix}"
-                })
-      }
-      packageImports = packages.collect {
-        "// ${it.name}\n${interpolateDynamicValues(it.packageImportPath)}"
+      packageImports = "import ${packageName}.BuildConfig;\nimport ${packageName}.R;\n\n"
+      packageImports = packageImports + packages.collect {
+        "// ${it.name}\n${it.packageImportPath}"
       }.join('\n')
-      packageClassInstances = ",\n      " + packages.collect {
-        interpolateDynamicValues(it.packageInstance)
-      }.join(",\n      ")
+      packageClassInstances = ",\n      " + packages.collect { it.packageInstance }.join(",\n      ")
     }
 
     String generatedFileContents = generatedFileContentsTemplate
@@ -266,147 +144,34 @@ class ReactNativeModules {
     }
   }
 
-  void generateCmakeFile(File outputDir, String generatedFileName, String generatedFileContentsTemplate) {
-    ArrayList<HashMap<String, String>> packages = this.reactNativeModules
-    String packageName = this.packageName
-    String codegenLibPrefix = "react_codegen_"
-    String libraryIncludes = ""
-    String libraryModules = ""
-
-    if (packages.size() > 0) {
-      libraryIncludes = packages.collect {
-        def addDirectoryString = ""
-        if (it.libraryName != null && it.cmakeListsPath != null) {
-          // If user provided a custom cmakeListsPath, let's honor it.
-          String nativeFolderPath = it.cmakeListsPath.replace("CMakeLists.txt", "")
-          addDirectoryString += "add_subdirectory($nativeFolderPath ${it.libraryName}_autolinked_build)"
-        } else {
-          null
-        }
-        if (it.cxxModuleCMakeListsPath != null) {
-          // If user provided a custom cxxModuleCMakeListsPath, let's honor it.
-          String nativeFolderPath = it.cxxModuleCMakeListsPath.replace("CMakeLists.txt", "")
-          addDirectoryString += "\nadd_subdirectory($nativeFolderPath ${it.libraryName}_cxxmodule_autolinked_build)"
-        }
-        addDirectoryString
-      }.minus(null).join('\n')
-      libraryModules = packages.collect {
-        def autolinkedLibraries = ""
-        if (it.libraryName != null) {
-          autolinkedLibraries += "${codegenLibPrefix}${it.libraryName}"
-        }
-        if (it.cxxModuleCMakeListsModuleName != null) {
-          autolinkedLibraries += "\n${it.cxxModuleCMakeListsModuleName}"
-        }
-        autolinkedLibraries
-      }.minus(null).join('\n  ')
-    }
-
-    String generatedFileContents = generatedFileContentsTemplate
-      .replace("{{ libraryIncludes }}", libraryIncludes)
-      .replace("{{ libraryModules }}", libraryModules)
-
-    outputDir.mkdirs()
-    final FileTreeBuilder treeBuilder = new FileTreeBuilder(outputDir)
-    treeBuilder.file(generatedFileName).newWriter().withWriter { w ->
-      w << generatedFileContents
-    }
-  }
-
-  void generateRncliCpp(File outputDir, String generatedFileName, String generatedFileContentsTemplate) {
-    ArrayList<HashMap<String, String>> packages = this.reactNativeModules
-    String rncliCppIncludes = ""
-    String rncliCppTurboModuleJavaProviders = ""
-    String rncliCppTurboModuleCxxProviders = ""
-    String rncliCppComponentDescriptors = ""
-    String rncliReactLegacyComponentDescriptors = ""
-    String rncliReactLegacyComponentNames = ""
-    String codegenComponentDescriptorsHeaderFile = "ComponentDescriptors.h"
-    String codegenReactComponentsDir = "react/renderer/components"
-
-    if (packages.size() > 0) {
-      rncliCppIncludes = packages.collect {
-        if (!it.libraryName) {
-          return null
-        }
-        def result = "#include <${it.libraryName}.h>"
-        if (it.componentDescriptors && it.componentDescriptors.size() > 0) {
-          result += "\n#include <${codegenReactComponentsDir}/${it.libraryName}/${codegenComponentDescriptorsHeaderFile}>"
-        }
-        if (it.cxxModuleHeaderName) {
-          result += "\n#include <${it.cxxModuleHeaderName}.h>"
-        }
-        result
-      }.minus(null).join('\n')
-      rncliCppTurboModuleJavaProviders = packages.collect {
-        it.libraryName ? """  auto module_${it.libraryName} = ${it.libraryName}_ModuleProvider(moduleName, params);
-  if (module_${it.libraryName} != nullptr) {
-    return module_${it.libraryName};
-  }""" : null
-      }.minus(null).join("\n")
-
-      rncliCppTurboModuleCxxProviders = packages.collect {
-        it.cxxModuleHeaderName ? """
-  if (moduleName == ${it.cxxModuleHeaderName}::kModuleName) {
-    return std::make_shared<${it.cxxModuleHeaderName}>(jsInvoker);
-  }""" : null
-      }.minus(null).join("\n")
-
-      rncliCppComponentDescriptors = packages.collect {
-        def result = ""
-        if (it.componentDescriptors && it.componentDescriptors.size() > 0) {
-          result += it.componentDescriptors.collect {
-            "  providerRegistry->add(concreteComponentDescriptorProvider<${it}>());"
-          }.join('\n')
-        }
-        result
-      }.join("\n")
-    }
-
-    String generatedFileContents = generatedFileContentsTemplate
-      .replace("{{ rncliCppIncludes }}", rncliCppIncludes)
-      .replace("{{ rncliCppTurboModuleJavaProviders }}", rncliCppTurboModuleJavaProviders)
-      .replace("{{ rncliCppTurboModuleCxxProviders }}", rncliCppTurboModuleCxxProviders)
-      .replace("{{ rncliCppComponentDescriptors }}", rncliCppComponentDescriptors)
-      .replace("{{ rncliReactLegacyComponentDescriptors }}", rncliReactLegacyComponentDescriptors)
-      .replace("{{ rncliReactLegacyComponentNames }}", rncliReactLegacyComponentNames)
-
-    outputDir.mkdirs()
-    final FileTreeBuilder treeBuilder = new FileTreeBuilder(outputDir)
-    treeBuilder.file(generatedFileName).newWriter().withWriter { w ->
-      w << generatedFileContents
-    }
-  }
-
-  void generateRncliH(File outputDir, String generatedFileName, String generatedFileContentsTemplate) {
-    String generatedFileContents = generatedFileContentsTemplate
-
-    outputDir.mkdirs()
-    final FileTreeBuilder treeBuilder = new FileTreeBuilder(outputDir)
-    treeBuilder.file(generatedFileName).newWriter().withWriter { w ->
-      w << generatedFileContents
-    }
-  }
-
   /**
-   * Runs a specified command using providers.exec in a specified directory.
+   * Runs a specified command using Runtime exec() in a specified directory.
    * Throws when the command result is empty.
    */
-  String getCommandOutput(String[] command, File directory) {
+  String getCommandOutput(String command, File directory = null) {
     try {
-      def execOutput = providers.exec {
-        commandLine(command)
-        workingDir(directory)
+      def output = ""
+      def cmdProcess = Runtime.getRuntime().exec(command, null, directory)
+      def bufferedReader = new BufferedReader(new InputStreamReader(cmdProcess.getInputStream()))
+      def buff = ""
+      def readBuffer = new StringBuffer()
+      while ((buff = bufferedReader.readLine()) != null) {
+        readBuffer.append(buff)
       }
-      def output = execOutput.standardOutput.asText.get().trim()
+      output = readBuffer.toString()
       if (!output) {
-        this.logger.error("${LOG_PREFIX}Unexpected empty result of running '${command}' command.")
-        def error = execOutput.standardError.asText.get().trim()
-        throw new Exception(error)
+        this.logger.error("${LOG_PREFIX}Unexpected empty result of running '${command}' command from '${directory}' directory.")
+        def bufferedErrorReader = new BufferedReader(new InputStreamReader(cmdProcess.getErrorStream()))
+        def errBuff = ""
+        def readErrorBuffer = new StringBuffer()
+        while ((errBuff = bufferedErrorReader.readLine()) != null) {
+          readErrorBuffer.append(errBuff)
+        }
+        throw new Exception(readErrorBuffer.toString())
       }
       return output
     } catch (Exception exception) {
-      this.logger.error("${LOG_PREFIX}Running '${command}' command failed.")
+      this.logger.error("${LOG_PREFIX}Running '${command}' command from '${directory}' directory failed.")
       throw exception
     }
   }
@@ -418,39 +183,29 @@ class ReactNativeModules {
     if (this.reactNativeModules != null) return this.reactNativeModules
 
     ArrayList<HashMap<String, String>> reactNativeModules = new ArrayList<HashMap<String, String>>()
-    HashMap<String, ArrayList> reactNativeModulesBuildVariants = new HashMap<String, ArrayList>()
-
+    def npx = Os.isFamily(Os.FAMILY_WINDOWS) ? "npx.cmd" : "npx"
+    def command = "${npx} --no-install react-native config"
     /**
-     * Resolve the CLI location from Gradle file
-     *
-     * @todo: Sometimes Gradle can be called outside of the JavaScript hierarchy (-p flag) which
-     * will fail to resolve the script and the dependencies. We should resolve this soon.
-     *
-     * @todo: `fastlane` has been reported to not work too.
+     * Running npx from the directory of the JS app which holds this script in its node_modules.
+     * We do so, because Gradle may be ran with a different directory as CWD, that's outside of JS project
+     * (e.g. when running with -p flag), in which case npx wouldn't resolve correct `react-native` binary.
      */
-    def cliResolveScript = "try {console.log(require('@react-native-community/cli').bin);} catch (e) {console.log(require('react-native/cli').bin);}"
-    String[] nodeCommand = ["node", "-e", cliResolveScript]
-    def cliPath = this.getCommandOutput(nodeCommand, this.root)
-
-    String[] reactNativeConfigCommand = ["node", cliPath, "config"]
-    def reactNativeConfigOutput = this.getCommandOutput(reactNativeConfigCommand, this.root)
-
+    def dir = new File(this.jsAppDir)
+    def reactNativeConfigOutput = this.getCommandOutput(command, /* dir */) // Temporary disable changing dir, as it introduces regressions
     def json
     try {
       json = new JsonSlurper().parseText(reactNativeConfigOutput)
     } catch (Exception exception) {
-      throw new Exception("Calling `${reactNativeConfigCommand}` finished with an exception. Error message: ${exception.toString()}. Output: ${reactNativeConfigOutput}");
+      this.logger.error("${LOG_PREFIX}Failed to parse React Native CLI configuration: ${exception.toString()}")
+      throw new Exception("Failed to parse React Native CLI configuration. Expected running '${command}' command from '${dir}' directory to output valid JSON, but it didn't. This may be caused by npx resolving to a legacy global react-native binary. Please make sure to uninstall any global 'react-native' binaries: 'npm uninstall -g react-native react-native-cli' and try again")
     }
     def dependencies = json["dependencies"]
     def project = json["project"]["android"]
-    def reactNativeVersion = json["version"]
 
     if (project == null) {
       throw new Exception("React Native CLI failed to determine Android project configuration. This is likely due to misconfiguration. Config output:\n${json.toMapString()}")
     }
 
-    def engine = new groovy.text.SimpleTemplateEngine()
-
     dependencies.each { name, value ->
       def platformsConfig = value["platforms"];
       def androidConfig = platformsConfig["android"]
@@ -459,31 +214,11 @@ class ReactNativeModules {
         this.logger.info("${LOG_PREFIX}Automatically adding native module '${name}'")
 
         HashMap reactNativeModuleConfig = new HashMap<String, String>()
-        def nameCleansed = name.replaceAll('[~*!\'()]+', '_').replaceAll('^@([\\w-.]+)/', '$1_')
         reactNativeModuleConfig.put("name", name)
-        reactNativeModuleConfig.put("nameCleansed", nameCleansed)
+        reactNativeModuleConfig.put("nameCleansed", name.replaceAll('/', '_'))
         reactNativeModuleConfig.put("androidSourceDir", androidConfig["sourceDir"])
         reactNativeModuleConfig.put("packageInstance", androidConfig["packageInstance"])
         reactNativeModuleConfig.put("packageImportPath", androidConfig["packageImportPath"])
-        reactNativeModuleConfig.put("libraryName", androidConfig["libraryName"])
-        reactNativeModuleConfig.put("componentDescriptors", androidConfig["componentDescriptors"])
-        reactNativeModuleConfig.put("cmakeListsPath", androidConfig["cmakeListsPath"])
-        reactNativeModuleConfig.put("cxxModuleCMakeListsModuleName", androidConfig["cxxModuleCMakeListsModuleName"])
-        reactNativeModuleConfig.put("cxxModuleCMakeListsPath", androidConfig["cxxModuleCMakeListsPath"])
-        reactNativeModuleConfig.put("cxxModuleHeaderName", androidConfig["cxxModuleHeaderName"])
-
-        if (androidConfig["buildTypes"] && !androidConfig["buildTypes"].isEmpty()) {
-          reactNativeModulesBuildVariants.put(nameCleansed, androidConfig["buildTypes"])
-        }
-        if(androidConfig.containsKey("dependencyConfiguration")) {
-          reactNativeModuleConfig.put("dependencyConfiguration", androidConfig["dependencyConfiguration"])
-        } else if (project.containsKey("dependencyConfiguration")) {
-          def bindings = ["dependencyName": nameCleansed]
-          def template = engine.createTemplate(project["dependencyConfiguration"]).make(bindings)
-
-          reactNativeModuleConfig.put("dependencyConfiguration", template.toString())
-        }
-
         this.logger.trace("${LOG_PREFIX}'${name}': ${reactNativeModuleConfig.toMapString()}")
 
         reactNativeModules.add(reactNativeModuleConfig)
@@ -492,48 +227,33 @@ class ReactNativeModules {
       }
     }
 
-    return [reactNativeModules, reactNativeModulesBuildVariants, json["project"]["android"], reactNativeVersion];
+    return [reactNativeModules, json["project"]["android"]["packageName"]];
   }
 }
 
-
-/*
- * Sometimes Gradle can be called outside of JavaScript hierarchy. Detect the directory
- * where build files of an active project are located.
- */
-def projectRoot = rootProject.projectDir
-
-def autoModules = new ReactNativeModules(logger, providers, projectRoot)
-
-def reactNativeVersionRequireNewArchEnabled(autoModules) {
-    def rnVersion = autoModules.reactNativeVersion
-    def regexPattern = /^(\d+)\.(\d+)\.(\d+)(?:-(\w+(?:[-.]\d+)?))?$/
-
-    if (rnVersion =~ regexPattern) {
-        def result = (rnVersion =~ regexPattern).findAll().first()
-
-        def major = result[1].toInteger()
-        if (major > 0 && major < 1000) {
-            return true
-        }
-    }
-    return false
-}
-
 /** -----------------------
  *    Exported Extensions
  * ------------------------ */
 
-ext.applyNativeModulesSettingsGradle = { DefaultSettings defaultSettings ->
+def autoModules = new ReactNativeModules(logger, jsAppDir)
+
+ext.applyNativeModulesSettingsGradle = { DefaultSettings defaultSettings, String root = null ->
+  if (root != null) {
+    logger.warn("${ReactNativeModules.LOG_PREFIX}Passing custom root is deprecated. CLI detects root automatically now.");
+    logger.warn("${ReactNativeModules.LOG_PREFIX}Please remove second argument to `applyNativeModulesSettingsGradle`.");
+  }
   autoModules.addReactNativeModuleProjects(defaultSettings)
 }
 
-ext.applyNativeModulesAppBuildGradle = { Project project ->
+ext.applyNativeModulesAppBuildGradle = { Project project, String root = null ->
+  if (root != null) {
+    logger.warn("${ReactNativeModules.LOG_PREFIX}Passing custom root is deprecated. CLI detects root automatically now");
+    logger.warn("${ReactNativeModules.LOG_PREFIX}Please remove second argument to `applyNativeModulesAppBuildGradle`.");
+  }
   autoModules.addReactNativeModuleDependencies(project)
 
   def generatedSrcDir = new File(buildDir, "generated/rncli/src/main/java")
   def generatedCodeDir = new File(generatedSrcDir, generatedFilePackage.replace('.', '/'))
-  def generatedJniDir = new File(buildDir, "generated/rncli/src/main/jni")
 
   task generatePackageList {
     doLast {
@@ -541,20 +261,7 @@ ext.applyNativeModulesAppBuildGradle = { Project project ->
     }
   }
 
-  task generateNewArchitectureFiles {
-    doLast {
-      autoModules.generateCmakeFile(generatedJniDir, "Android-rncli.cmake", cmakeTemplate)
-      autoModules.generateRncliCpp(generatedJniDir, "rncli.cpp", rncliCppTemplate)
-      autoModules.generateRncliH(generatedJniDir, "rncli.h", rncliHTemplate)
-    }
-  }
-
   preBuild.dependsOn generatePackageList
-  def isNewArchEnabled = (project.hasProperty("newArchEnabled") && project.newArchEnabled == "true") ||
-    reactNativeVersionRequireNewArchEnabled(autoModules)
-  if (isNewArchEnabled) {
-    preBuild.dependsOn generateNewArchitectureFiles
-  }
 
   android {
     sourceSets {
